import Shortcuts
#Color: red, #Icon: camera

var Input = ShortcutInput
// First check if user is signed into Instagram within Scriptable app
//Unable to get shortcuts action dk.simonbs.Scriptable.RunScriptInlineIntent
valuesFrom(dictionary: Output) >> valuesFrom
if(Dictionary Value == "false") { >> IFResult
// User is not logged in, trying to get the user to login now...
	alert(alert: "You are not logged into Instagram in Scriptable. After pressing OK you'll be taken to Scriptable to login.")
//Unable to get shortcuts action dk.simonbs.Scriptable.RunScriptInlineIntent
	exit()
} >> IFResult 1
dictionary({"ShortcutName":"Instagram Media Saver","Version":"1.61","ID":"5195"}) >> MainDict
var Dict = MainDict
var SName = Variable
/*
1.61
- add conditions for media id not matching
1.60
- Remove debugging step
1.59
- Fix for caption grabbing / saving
1.58
- Fix for when media doesn't have a caption and error appears
1.57
- Fix for Caption grabbing
1.56
- Fix for constant rollback message
1.55
- Revamp for instagram code changes and now urilizing scriptable to maintain cookies and login presence. 
- Private items can now download without safari usage (except for private story)
- Removed periodic update check to reduce unnecessary actions now that update checks are almost instantaneous
- Remove input type checks as no longer needed
*/
list(items: (
    Yes,
    No
)) >> list
var YesNo = List
number(value: 1) >> number
var 1 = Number
createFolder(path: "${SName}") >> createFolder
getFile(picker: false, path: "${SName}/settings.json", error: false) >> getFile
if(File == nil) { >> IFResult 2
	list(items: (
    "iCloud Drive",
    "Photos App",
    "Don't Store, Share Only!"
)) >> list 1
var BC5C09F2-C6CB-4665-B1F1-18F652B44430 = """Where do you want your media stored?

This setting is saved for future runs. 

To reset, delete the file "settings.json" at:
iCloud Drive/Shortcuts/Ôøº

This can also be done from the main menu"""
text("${BC5C09F2-C6CB-4665-B1F1-18F652B44430}")
	choose(list: List, prompt: "${Text}") >> choose
	dictionary({"storageLocation":"${Chosen Item}","setupDate":"${CurrentDate}","versionDuringSetup":"${Dict.key(Version)}"})
	saveFile(input: Dictionary, ask: false, path: "${SName}/settings.json") >> saveFile
} >> IFResult 3
var Settings = If Result
var InitialSettings = Variable
text(text: "${Settings.as(Dictionary).key(storageLocation)}") >> text
var StorageLoc = Text
/*

Update Check üîΩüîΩüîΩ
*/
downloadURL(url: "https://raw.githubusercontent.com/mvan231/Shortcuts/main/InstagramMediaSaver.json") >> Server
if(Server .contains "success") { >> IFResult 4
var C63C3EE4-B58F-4F59-A8DF-FE8C59003B50 = """<html><head></head><body><script>
// Swing Engine 1.2.2
// ¬© D3W10 - ùóóùóºùóª'ùòÅ ùó∞ùóºùóΩùòÜ ùòÅùóµùó∂ùòÄ ùó∞ùóºùó±ùó≤ ùòÑùó∂ùòÅùóµùóºùòÇùòÅ ùóΩùó≤ùóøùó∫ùó∂ùòÄùòÄùó∂ùóºùóª.
function sue (a, b) {
let pa = a.split('.');
let pb = b.split('.');
for (let i = 0; i < Math.max(pa.length, pb.length); i++) {
let na = Number(pa[i]);
let nb = Number(pb[i]);
if (isNaN(na)) na = 0;
if (isNaN(nb)) nb = 0;
if (na > nb) return "Rollback";
if (nb > na) return "Update";
}
if (a != b) return "Update";
return "Updated";
};
let data = {"current":"Ôøº","new":"Ôøº"};
document.write(sue(data.current, data.new));
</script></body></html>"""
text("${C63C3EE4-B58F-4F59-A8DF-FE8C59003B50}")
	url(url: "data:text/html,${Engine Code}") >> url
	urlContents(url: "${URL}") >> EngineResult
	if(EngineResult .contains "Updated") {
		if(EngineResult == "Update") {
var 9E164D5C-1111-498D-AA0A-837D1B7815BC = """‚¨ÜÔ∏è ùó®ùóΩùó±ùóÆùòÅùó≤ ‚¨ÜÔ∏è

An update is available for Ôøº, here are some information about it:

ùó°ùóÆùó∫ùó≤: Ôøº
ùóúùóªùòÄùòÅùóÆùóπùóπùó≤ùó± ùó©ùó≤ùóøùòÄùó∂ùóºùóª: Ôøº
ùó•ùó≤ùó∞ùó≤ùóªùòÅ ùó©ùó≤ùóøùòÄùó∂ùóºùóª: Ôøº
ùó•ùó≤ùóπùó≤ùóÆùòÄùó≤ ùóóùóÆùòÅùó≤: Ôøº
ùóñùóµùóÆùóªùó¥ùó≤ùòÄ:
Ôøº

ùó®ùóΩùó±ùóÆùòÅùó≤ ùó∞ùóµùó≤ùó∞ùó∏ùó∂ùóªùó¥ ùòÇùòÄùó∂ùóªùó¥ ùñ≤ùóêùóÇùóáùóÄ ùñ¥ùóâùñΩùñ∫ùóçùñæùóã üÑ¥"""
text("${9E164D5C-1111-498D-AA0A-837D1B7815BC}")
		} else {
var 1424CE8F-78EC-46BC-B824-16B765630B51 = """‚¨áÔ∏è ùó•ùóºùóπùóπùóØùóÆùó∞ùó∏ ‚¨áÔ∏è

A rollback is available for Ôøº, probably because the owner of this shortcut changed the version numbers, ùó∂ùòÅ'ùòÄ ùòÉùó≤ùóøùòÜ ùóøùó≤ùó∞ùóºùó∫ùó∫ùó≤ùóªùó±ùó≤ùó± ùòÅùóº ùó±ùóº ùòÅùóµùó∂ùòÄ ùóøùóºùóπùóπùóØùóÆùó∞ùó∏!

ùó°ùóÆùó∫ùó≤: Ôøº
ùóúùóªùòÄùòÅùóÆùóπùóπùó≤ùó± ùó©ùó≤ùóøùòÄùó∂ùóºùóª: Ôøº
ùó•ùó≤ùó∞ùó≤ùóªùòÅ ùó©ùó≤ùóøùòÄùó∂ùóºùóª: Ôøº
ùó•ùó≤ùóπùó≤ùóÆùòÄùó≤ ùóóùóÆùòÅùó≤: Ôøº
ùóñùóµùóÆùóªùó¥ùó≤ùòÄ:
Ôøº

ùó®ùóΩùó±ùóÆùòÅùó≤ ùó∞ùóµùó≤ùó∞ùó∏ùó∂ùóªùó¥ ùòÇùòÄùó∂ùóªùó¥ ùñ≤ùóêùóÇùóáùóÄ ùñ¥ùóâùñΩùñ∫ùóçùñæùóã üÑ¥"""
text("${1424CE8F-78EC-46BC-B824-16B765630B51}")
		} >> IFResult 5
		quicklook(input: If Result)
		list(items: (
        {
        WFItemType = 0;
        WFValue =         {
            Value =             {
                attachmentsByRange =                 {
                    "{0, 1}" =                     {
                        OutputName = "If Result";
                        OutputUUID = "f23df1cf-4878-4fb5-bc4e-dbc957a334c9";
                        Type = ActionOutput;
                    };
                };
                string = "\Ufffc";
            };
            WFSerializationType = WFTextTokenString;
        };
    },
    "Not Now"
)) >> list 2
		choose(list: List, prompt: "What to do?") >> choose 1
		if(Chosen Item == ""${If Result}"") {
			replaceText(input: "${Server.as(Dictionary).key(URL)}", find: ".*com", replace: "shortcuts:/", isRegex: true) >> replaceText
			openURL(url: Updated Text) >> openURL
			output(result: "${Updated Text}", noResultBehavior: Do Nothing, response: "${Updated Text}")
		}
	} >> IFResult 6
} >> IFResult 7
// Update check üîºüîºüîº
if(Input == nil) { >> IFResult 8
	dictionary({"on":"","off":"iVBORw0KGgoAAAANSUhEUgAAAJAAAACQCAYAAADnRuK4AAAABGdBTUEAALGPC/xhBQAAACBjSFJN AAB6JgAAgIQAAPoAAACA6AAAdTAAAOpgAAA6mAAAF3CculE8AAAAUGVYSWZNTQAqAAAACAACARIA AwAAAAEAAQAAh2kABAAAAAEAAAAmAAAAAAADoAEAAwAAAAEAAQAAoAIABAAAAAEAAACQoAMABAAA AAEAAACQAAAAAC3iJJYAAAHLaVRYdFhNTDpjb20uYWRvYmUueG1wAAAAAAA8eDp4bXBtZXRhIHht bG5zOng9ImFkb2JlOm5zOm1ldGEvIiB4OnhtcHRrPSJYTVAgQ29yZSA1LjQuMCI+CiAgIDxyZGY6 UkRGIHhtbG5zOnJkZj0iaHR0cDovL3d3dy53My5vcmcvMTk5OS8wMi8yMi1yZGYtc3ludGF4LW5z IyI+CiAgICAgIDxyZGY6RGVzY3JpcHRpb24gcmRmOmFib3V0PSIiCiAgICAgICAgICAgIHhtbG5z OmV4aWY9Imh0dHA6Ly9ucy5hZG9iZS5jb20vZXhpZi8xLjAvIj4KICAgICAgICAgPGV4aWY6Q29s b3JTcGFjZT4xPC9leGlmOkNvbG9yU3BhY2U+CiAgICAgICAgIDxleGlmOlBpeGVsWERpbWVuc2lv bj40NzA8L2V4aWY6UGl4ZWxYRGltZW5zaW9uPgogICAgICAgICA8ZXhpZjpQaXhlbFlEaW1lbnNp b24+NDcwPC9leGlmOlBpeGVsWURpbWVuc2lvbj4KICAgICAgPC9yZGY6RGVzY3JpcHRpb24+CiAg IDwvcmRmOlJERj4KPC94OnhtcG1ldGE+CpC7NFkAABXGSURBVHgB7Z17jF3Ffcfvwy+8fmPsLH4u G2PAdlDBUWwRJUoxEUJVpVKgTdQ/mkfVkhBIIuVBRWJDEilWEieRGyPyci1ViAJKVeRWkZLGEBIF BTtQGwMG26yfYGy8fmEbP+7N9zN7fpe5Z8/u3rt7d/fuOTPS3HmcOXPm953v/OY3c849J5cLLiAQ EAgIBAQCAgGBgEBAICAQEAgIBAQCAgGBgEBAICAQEAgIBAQCAgGBgEBAICAQEAgIBAQCAgGBgEBA ICAQEAgIBAQCAgGBgEBAICAQEAgIBAQCAgGBgEBAICAQEAgIBAQCAgGBgEBAICAQEAgIBAQCAgGB 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"})
var switches = Dictionary
	if(Settings .contains "showSaveNotifications") { >> IFResult 9
var on-or-off = Variable
		if(on-or-off == "Yes") {
var D0ADE179-3F73-4C9B-9137-55BB56C9FB12 = """BEGIN:VCARD
VERSION:3.0
N;CHARSET=utf-8:Save Notifications On;
ORG:;
PHOTO;ENCODING=b:Ôøº
END:VCARD"""
text("${D0ADE179-3F73-4C9B-9137-55BB56C9FB12}")
		} else {
var 068BEACB-7E5A-4DD2-806A-B26B24D228E2 = """BEGIN:VCARD
VERSION:3.0
N;CHARSET=utf-8:Save Notifications Off;
ORG:;
PHOTO;ENCODING=b:Ôøº
END:VCARD"""
text("${068BEACB-7E5A-4DD2-806A-B26B24D228E2}")
		} >> IFResult 10
	} else {
		nothing()
	} >> IFResult 11
var A784980B-0820-44C1-AAD7-0F22EA6C38C7 = """BEGIN:VCARD
VERSION:3.0
N;CHARSET=utf-8:Run Shortcut (multi-post or from clipboard);
ORG:;
END:VCARD

BEGIN:VCARD
VERSION:3.0
N;CHARSET=utf-8:Reset Settings;
ORG:;
END:VCARD

BEGIN:VCARD
VERSION:3.0
N;CHARSET=utf-8:Delete URLs File (if it exists);
ORG:;
END:VCARD

BEGIN:VCARD
VERSION:3.0
N;CHARSET=utf-8:Delete Downloaded Media (iCloud Drive);
ORG:;
END:VCARD

BEGIN:VCARD
VERSION:3.0
N;CHARSET=utf-8:Follower Analysis;
ORG:;
END:VCARD

Ôøº"""
text("${A784980B-0820-44C1-AAD7-0F22EA6C38C7}")
	setName(input: Text, name: "menu.vcf") >> setName
var 0F7394E9-EF7A-4B7C-B674-3248CA409108 = """Welcome to Ôøº!

You didn't share a post to the shortcut, so this menu allows some other features."""
text("${0F7394E9-EF7A-4B7C-B674-3248CA409108}")
	choose(list: Renamed Item, prompt: "${Text}") >> choose 2
	if(Chosen Item .contains "Notifications") { >> IFResult 12
		if(Chosen Item .contains "On") {
			setValue(key: "showSaveNotifications", value: "No", dictionary: Settings) >> setValue
		} else {
			setValue(key: "showSaveNotifications", value: "Yes", dictionary: Settings) >> setValue 1
		} >> IFResult 13
		saveFile(input: If Result, ask: false, path: "${SName}/settings.json", overwrite: true) >> saveFile 1
		runShortcut(name: SName, show: false) >> runShortcut
		exit()
	} >> IFResult 14
	nothing()
	if(Chosen Item .contains "Follower Analysis") {
		askForInput(prompt: "What username to check follower stats for?") >> askForInput
var Username = Provided Input
		downloadURL(url: "https://I.Instagram.com/api/v1/users/web_profile_info/?username=${Username}", method: GET, headers: , requestType: File, requestJSON: , requestVar: Text) >> downloadURL
//Unable to get shortcuts action is.workflow.actions.setvariable
		number(value: 0) >> number 1
var maxed = Number
		repeat(500) {
			if(maxed == 0) {
				downloadURL(url: "https://i.instagram.com/api/v1/friendships/${Contents of URL.as(Dictionary).key(data.user.id)}/followers/?count=1000&max_id=${ActionOutput.as(Dictionary).key(data.user.id)}", method: GET, headers: , requestType: File, requestJSON: , requestVar: Text) >> downloadURL 1
				if(Contents of URL .contains "next_max_id") {
var maxed = Variable
				} else {
var maxid = Contents of URL
				} >> IFResult 15
				matchText(text: "${Contents of URL}", regex: "(?<=username"\:").*?(?=")") >> matchText
			}
		} >> RepeatResult
		quicklook(input: Repeat Results)
		combineText(text: Repeat Results, combine: Custom, separator: "|") >> CurrentFollowersCombined
		text(text: "${Repeat Results}") >> CurrentFollowersTxt
		getFile(path: "${SName}/${Variable} Analysis.txt", error: false) >> PreviousFollowers
		if(PreviousFollowers != nil) {
			replaceText(input: "${PreviousFollowers}", find: "\n?(\b${CurrentFollowersCombined}\b)\n?", isRegex: true) >> UsersWhoUnfollowed
			replaceText(input: "${PreviousFollowers}", find: "\n", replace: "|", isRegex: true) >> PreviousFollowersCombined 
			replaceText(input: "${CurrentFollowersTxt}", find: "\n?(\b${PreviousFollowersCombined }\b)\n?", isRegex: true) >> NewFollowers
		} >> IFResult 16
		count(type: Lines, input: UsersWhoUnfollowed) >> count
		count(type: Lines, input: If Result) >> New Follower Count
		saveFile(input: CurrentFollowersTxt, ask: false, path: "${SName}/${Variable} Analysis.txt", overwrite: true) >> saveFile 2
var BB50CEED-BDE3-42DD-B491-7E1A1CF59AD3 = """Ôøº
Total Followers: Ôøº

New Followers (Ôøº):
Ôøº

Users Who Unfollowed (Ôøº):
Ôøº"""
text("${BB50CEED-BDE3-42DD-B491-7E1A1CF59AD3}")
		quicklook(input: Text)
		alert(alert: "Stop here")
	}
	if(Chosen Item .contains "Delete URLs") {
		getFile(picker: false, path: "${SName.as(Text)}/urls.txt", error: false) >> getFile 1
	} else {
		if(Chosen Item .contains "Delete Downloaded Media") {
			getFolderContents(folder: $0) >> getFolderContents
			filterFiles() >> filterFiles
		} else {
			if(Chosen Item .contains "Reset Settings") {
				getFile(picker: false, path: "${SName}/settings.json", error: false) >> getFile 2
			}
		}
	} >> IFResult 17
	if(If Result != nil) {
		deleteFile(input: If Result) >> deleteFile
		exit()
	} >> IFResult 18
	getFile(picker: false, path: "${SName}/urls.txt", error: false) >> getFile 3
	if(File != nil) { >> IFResult 19
var File = File
		count(type: Characters, input: File) >> count 1
		if(Count > 5) {
var 2E3E8C5C-7D75-430A-A73F-3AFB78E9E04A = """You seem to have a list of URLs stored in iCloud Drive. 

Should we download those posts now?"""
text("${2E3E8C5C-7D75-430A-A73F-3AFB78E9E04A}")
			menu(, [Yes, No]) {
			case("Yes"):
				splitText(text: File) >> splitText
				count(input: Split Text) >> count 2
var 3140234F-A14D-4089-84A7-F26C99AE9DE2 = """Your urls.txt file is populated with Ôøº links. 

How many of these should we download?"""
text("${3140234F-A14D-4089-84A7-F26C99AE9DE2}")
				list(items: (
        {
        WFItemType = 0;
        WFValue =         {
            Value =             {
                attachmentsByRange =                 {
                    "{4, 1}" =                     {
                        OutputName = Count;
                        OutputUUID = "B861C910-1C26-4A9F-BD42-81D25B9B5AE9";
                        Type = ActionOutput;
                    };
                };
                string = "All \Ufffc of them";
            };
            WFSerializationType = WFTextTokenString;
        };
    },
    "Choose the range to get"
)) >> list 3
				choose(list: List, prompt: "${Text}") >> choose 3
				if(Chosen Item .contains "All") {
//Unable to get shortcuts action is.workflow.actions.getvariable
				} else {
					if(Chosen Item .contains "Choose") {
						askForInput(prompt: "What index should be the start? (Total:${Count})", type: Number) >> askForInput 1
						askForInput(prompt: "What index should be the finish? (Start:${Count}; Total:${ActionOutput})", type: Number) >> askForInput 2
						getItemFromList(list: Split Text, type: Items in Range, startIndex: Provided Input, endIndex: Provided Input)
					} >> IFResult 20
				} >> IFResult 21
				repeatEach(If Result) {
					runShortcut(name: SName, input: Repeat Item, show: false) >> runShortcut 1
					replaceText(input: "${File}", find: "${Repeat Item}(\n|)", isRegex: true) >> replaceText 1
var File = Updated Text
					saveFile(input: File, ask: false, path: "${SName}/urls.txt", overwrite: true) >> saveFile 3
				} >> RepeatResult 1
				choose(list: Yes No, prompt: "Do you want to delete the remaining URLs that were stored in the urls.txt file?") >> choose 4
				if(Chosen Item == "Yes") {
					getFile(picker: false, path: "${SName}/urls.txt", error: false) >> getFile 4
					deleteFile(input: File)
				}
				exit()
			case("No"):
var AutoModeSkip = Variable
			} >> MenuResult
		}
	} >> IFResult 22
	getClipboard()
} else {
//Unable to get shortcuts action is.workflow.actions.getvariable
} >> IFResult 23
getFile(picker: false, path: "${SName}/urls.txt", error: false) >> getFile 5
if(File != nil) { >> IFResult 24
	if(AutoModeSkip != "1") {
var AutoMode = Variable
	} >> IFResult 25
} >> IFResult 26
getURLSFromInput(text: "${If Result}") >> getURLSFromInput
var InputURL = URLs
if(InputURL .contains "nstagram") { >> IFResult 27
	alert(alert: "Not a proper link.

Please share an Instagram link to the shortcut or copy one to your clipboard before running the shortcut.

Exiting now.", title: "${Dict.key(ShortcutName)}", cancel: false)
	exit()
} else {
	matchText(text: "${InputURL}", regex: "(/p/|/reel/|/stories/|/tv/)") >> matchText 1
	if(Matches != nil "/p/") {
var NormalMode = Variable
	} >> IFResult 28
} >> IFResult 29
downloadURL(url: "${InputURL}", method: GET, headers: , requestType: File, requestJSON: , requestVar: Text) >> downloadURL 2
htmlFromRichText(text: Contents of URL) >> htmlFromRichText
if(NormalMode == ""${1}"") {
/*
Try matching the html for:
(?<=media\?id\=).*?(?=\")
(?<=media_id\"\:\").*?(?=\")
*/
	matchText(text: "${HTML from Rich Text}", regex: "(?<=media_id\"\:\").*?(?=\")") >> Media ID Match
	getItemFromList(list: Media ID Match) >> getItemFromList
	if(Media ID Match == nil) {
		matchText(text: "${HTML from Rich Text}", regex: "(?<=media\?id=).*?(?=\")") >> 2nd mediaID match
		getItemFromList(list: 2nd mediaID match) >> getItemFromList 1
		if(2nd mediaID match == nil) {
			alert(alert: "Oops! Media ID can't be found. Please inform mvan231 about this issue and include the post link and any additional info.")
			exit()
		}
	} >> IFResult 30
	downloadURL(url: "https://i.instagram.com/api/v1/media/${If Result}/info", method: GET, headers: , requestType: File, requestJSON: , requestVar: Text) >> downloadURL 3
// Output of the Get Contents of URL action above is the JSON from API response
	getDictionaryFrom(input: Contents of URL) >> getDictionaryFrom
var PageJSON = Dictionary
/*
Get the media type
1 = image / photo
2 = reel / video
8 = mix of photo and video
*/
	valuesFrom(dictionary: PageJSON) >> valuesFrom 1
/*


Get username üîΩüîΩüîΩ
*/
	valuesFrom(dictionary: PageJSON) >> valuesFrom 2
	text(text: "@${Dictionary Value}") >> text 1
var Username = Text
/*
Get username üîºüîºüîº

Get photos and videos links üîΩ
*/
	if(PageJSON .contains "items") {
		valuesFrom(dictionary: PageJSON) >> valuesFrom 3
		if(Dictionary Value .contains "video_versions") {
//Unable to get shortcuts action is.workflow.actions.appendvariable
		} else {
			if(Dictionary Value .contains "carousel_media") { >> IFResult 31
				repeatEach(Dictionary Value) {
					if(Repeat Item .contains "video_versions") {
//Unable to get shortcuts action is.workflow.actions.appendvariable
					} else {
//Unable to get shortcuts action is.workflow.actions.appendvariable
					} >> IFResult 32
				}
			} else {
//Unable to get shortcuts action is.workflow.actions.appendvariable
			}
		}
	}
// Get photos and videos links üîºüîºüîº
/*


Get caption üîΩüîΩüîΩ
*/
	nothing()
	valuesFrom(dictionary: PageJSON) >> valuesFrom 4
	if(Dictionary Value .contains "caption") { >> IFResult 33
		valuesFrom(dictionary: Dictionary Value) >> valuesFrom 5
		if(Dictionary Value .contains "text") {
			valuesFrom(dictionary: PageJSON) >> valuesFrom 6
			replaceText(input: "${Dictionary Value}", find: "(\\u0026|\&amp\;)", replace: "&", isRegex: true) >> replaceText 2
			replaceText(input: "${Updated Text}", find: "\/", replace: "/") >> replaceText 3
var Caption = Updated Text
		}
	} >> IFResult 34
/*
Get caption üîºüîºüîº

*/
} else {
/*


Get profile picture or full story üîΩüîΩüîΩ
*/
	list(items: (
    "Download Profile Picture",
    "Download Full Story"
)) >> Profile choices
	matchText(text: "${InputURL}", regex: "(?<=\.com\/).*?(?=(\?|$))") >> matchText 2
var Username = Matches
var 788FFAF5-C978-4E07-BEB9-14032FBFCED0 = """It seems you are using a profile URL for Ôøº.

What would you like to do?"""
text("${788FFAF5-C978-4E07-BEB9-14032FBFCED0}")
	choose(list: Profile choices, prompt: "${Text}") >> choose 5
	downloadURL(url: "https://I.Instagram.com/api/v1/users/web_profile_info/?username=${Username}", method: GET, headers: , requestType: File, requestJSON: , requestVar: Text) >> downloadURL 4
/*
Get: data.user.username
Get: data.user.id
Get: data.user.profile_pic_url_hd
Get: data.user.biography
*/
	if(Chosen Item .contains "Full Story") {
		downloadURL(url: "https://i.instagram.com/api/v1/feed/reels_media/?reel_ids=${Contents of URL.as(Dictionary).key(data.user.id)}", method: GET, headers: , requestType: File, requestJSON: , requestVar: Text) >> downloadURL 5
/*
reels_media.1.items> repeat with each
Check for video_versions.1.url, else, get image_versions2.candidates.1.url
*/
		repeatEach(Contents of URL) {
			if(Repeat Item .contains "video_versions") {
//Unable to get shortcuts action is.workflow.actions.appendvariable
			} else {
				if(Repeat Item .contains "image_versions2") {
//Unable to get shortcuts action is.workflow.actions.appendvariable
				} >> IFResult 35
			}
		}
	} >> IFResult 36
	if(Chosen Item .contains "Profile Picture") { >> IFResult 37
//Unable to get shortcuts action is.workflow.actions.appendvariable
var Bio = Contents of URL
	} >> IFResult 38
/*
Get profile picture üîºüîºüîº


*/
} >> IFResult 39
/*
End of normal / profile mode if statement üîºüîºüîº

Start filtering URLs and getting the media üîΩüîΩüîΩ
*/
//Unable to get shortcuts action is.workflow.actions.setvariable
replaceText(input: "${URLs}", find: "(\\u0026|\&amp\;)", replace: "&", isRegex: true) >> replaceText 4
replaceText(input: "${Updated Text}", find: "\", replace: "", isRegex: false) >> replaceText 5
repeatEach(Updated Text) { >> RepeatResult 2
	if(ImgURLs .contains ""${Repeat Item}"") {
	} else {
//Unable to get shortcuts action is.workflow.actions.appendvariable
	} >> IFResult 40
	nothing()
} >> RepeatResult 3
text(text: "${Username} ${Variable}") >> text 2
var FileName = Text
repeatEach(ImgURLs) { >> RepeatResult 4
	if(Repeat Item != nil) { >> IFResult 41
		downloadURL(url: "${Repeat Item}") >> downloadURL 6
		if(Contents of URL .contains "jpg") {
var HasImages = Variable
		} >> IFResult 42
		setName(input: Contents of URL, name: "${FileName}") >> setName 1
//Unable to get shortcuts action is.workflow.actions.appendvariable
	} >> IFResult 43
	nothing()
} >> RepeatResult 5
/*
Finish filtering URLs and getting media üîºüîºüîº

Save media and notificationsüîΩüîΩüîΩ
*/
if(AutoMode != 1) { >> IFResult 44
	if(HasImages == 1) {
		if(Settings .contains "overlayUsername") {
var 773EE4C0-BEFA-48A7-BCFA-141731F90DC7 = """Which of these options do you prefer for overlaying the username on the photos downloaded?

(Note: does not work on videos)"""
text("${773EE4C0-BEFA-48A7-BCFA-141731F90DC7}")
			list(items: (
    "Always Overlay Username",
    "Never Overlay Username",
    "Ask Each Time To Overlay"
)) >> list 4
			choose(list: List, prompt: "${Text}") >> choose 6
			setValue(key: "overlayUsername", value: "${Chosen Item}", dictionary: Settings) >> setValue 2
var Settings = Dictionary
		} >> IFResult 45
		text(text: "${Settings.as(Dictionary).key(overlayUsername)}") >> text 3
		if(Text .contains "Always") {
var Overlay = Variable
		} else {
			if(Text .contains "Ask") {
				choose(list: Yes No, prompt: "Do you want to overlay the username "${Username}" on the photos?") >> choose 7
				if(Chosen Item == "Yes") {
var Overlay = Variable
				} >> IFResult 46
			}
		}
	}
} >> IFResult 47
count(input: Out) >> count 3
if(Count > 1) { >> IFResult 48
	if(Settings .contains "multiMediaAll") {
		text(text: "Which do you prefer when downloading multi media posts?") >> text 4
		list(items: (
    "Always Download All Items",
    "Ask Me Which Items To Save"
)) >> list 5
		choose(list: List, prompt: "${Text}") >> choose 8
		setValue(key: "multiMediaAll", value: "${Chosen Item}", dictionary: Settings) >> setValue 3
var Settings = Dictionary
	} >> IFResult 49
	text(text: "${Settings.as(Dictionary).key(multiMediaAll)}") >> text 5
	if(Text .contains "Ask") {
		choose(list: Out, prompt: "What items do you want to save?", multiple: true, all: true) >> choose 9
var Out = Chosen Item
	} >> IFResult 50
} >> IFResult 51
repeatEach(Out) { >> RepeatResult 6
	if(Overlay == "1") {
		if(Repeat Item .contains 1) {
//Unable to get shortcuts action is.workflow.actions.getvariable
		} else {
/*

Overlay method üîΩüîΩüîΩ
*/
			text(text: "${Username}") >> text 6
			getImagesFrom(input: Text) >> getImagesFrom
			resizeImage(image: Images, width: Repeat Item) >> resizeImage
			math(input: Repeat Item, operation: /, operand: "2") >> Width/2
			math(input: Repeat Item, operation: /, operand: "30") >> Width/30
			math(input: "333333", operation: /, operand: "10000") >> math
			math(input: Repeat Item, operation: /, operand: Calculation Result) >> Width/33.33333
			math(input: "47", operation: /, operand: "100") >> math 1
			math(input: Width/33.33333, operation: *, operand: Calculation Result) >> math 2
			count(type: Characters, input: Username) >> count 4
			math(input: Count, operation: *, operand: Calculation Result) >> UsernameWidth
var UsernameWidth = UsernameWidth
			cropImage(image: Resized Image, position: Custom, height: Calculation Result, width: UsernameWidth, x: Width/30, y: Calculation Result) >> cropImage
			maskImage() >> maskImage
			math(input: Repeat Item, operation: -, operand: Width/33.33333) >> math 3
			math(input: Repeat Item, operation: -, operand: UsernameWidth) >> math 4
			overlayImage(image1: Masked Image, image2: Repeat Item, editor: false, height: "", width: "", position: Custom) >> overlayImage
		}
	} else {
//Unable to get shortcuts action is.workflow.actions.getvariable
	} >> IFResult 52
	if(StorageLoc .contains "iCloud") {
		setName(input: If Result, name: "${FileName}.${Variable}", dontIncludeExtension: false) >> setName 2
		saveFile(input: Renamed Item, ask: false, path: "${SName}/") >> saveFile 4
	} else {
		if(StorageLoc .contains "Share") {
//Unable to get shortcuts action is.workflow.actions.appendvariable
		} else {
			saveToCameraRoll(image: If Result) >> saveToCameraRoll
		}
	} >> IFResult 53
//Unable to get shortcuts action is.workflow.actions.appendvariable
	if(ShareChoose != nil) { >> IFResult 54
	} else {
		if(Settings .contains "showSaveNotifications") {
			choose(list: Yes No, prompt: "Do you wish to show notifications for items downloaded?") >> choose 10
			setValue(key: "showSaveNotifications", value: "${Chosen Item}", dictionary: Settings) >> setValue 4
var Settings = Dictionary
		} >> IFResult 55
		text(text: "${Settings.as(Dictionary).key(showSaveNotifications)}") >> text 7
		if(Text == "Yes") {
			imageDetail(detail: File Extension, image: If Result) >> imageDetail
			if(File Extension .contains "mp4") {
				text(text: "Video") >> text 8
			} else {
				text(text: "Photo") >> text 9
			} >> IFResult 56
			sendNotification(body: "${If Result} saved to ${ActionOutput}", title: "${Dict.key(ShortcutName)}", sound: false, attachment: Repeat Item) >> sendNotification
		} >> IFResult 57
	} >> IFResult 58
} >> RepeatResult 7
if(ShareChoose != nil) { >> IFResult 59
	if(Settings != ""${InitialSettings}"") {
		saveFile(input: Settings, ask: false, path: "${SName}/settings.json", overwrite: true) >> saveFile 5
	} >> IFResult 60
	share(file: ShareChoose) >> share
	exit()
} >> IFResult 61
/*
Save media and notificationsüîºüîºüîº

Show caption and ask to copy it üîΩüîΩüîΩ
*/
replaceText(input: "${InputURL}", find: "\/\?.*", isRegex: true) >> replaceText 6
var 2E6E8C34-D4EA-4887-BABA-ACC9B1BBB54E = """Ôøº

Ôøº

ÔøºÔøº"""
text("${2E6E8C34-D4EA-4887-BABA-ACC9B1BBB54E}")
var 8EE30721-7158-4EDE-80D0-A8B3ACB03657 = """Do you want to copy the post's link, caption, and username below to clipboard? 
Choose after closing this window
__________
Ôøº"""
text("${8EE30721-7158-4EDE-80D0-A8B3ACB03657}")
if(AutoMode != 1) {
	if(Settings .contains "copyToClipboard") {
		text(text: "Which of these options do you prefer for copying the post text to your clipboard?") >> text 10
		list(items: (
    "Always Copy To Clipboard",
    "Never Copy To Clipboard",
    "Ask Me Each Time"
)) >> list 6
		choose(list: List, prompt: "${Text}") >> choose 11
		setValue(key: "copyToClipboard", value: "${Chosen Item}", dictionary: Settings) >> setValue 5
var Settings = Dictionary
	} >> IFResult 62
	text(text: "${Settings.as(Dictionary).key(copyToClipboard)}") >> text 11
	if(Text .contains "Always") {
var CopyPostToClip = Variable
	} else {
		if(Text .contains "Ask") {
			quicklook(input: Text)
			choose(list: Yes No, prompt: "") >> choose 12
			if(Chosen Item == "Yes") {
var CopyPostToClip = Variable
			}
		}
	} >> IFResult 63
	if(CopyPostToClip == "1") {
		setClipboard(variable: PostText) >> setClipboard
var 04DEED34-4AA5-4958-82B5-2BD278C53B5A = """Link, Username, and Caption has been copied to clipboard:
Ôøº"""
text("${04DEED34-4AA5-4958-82B5-2BD278C53B5A}")
		alert(alert: "${Text}", title: "${SName}", cancel: false)
	}
} >> IFResult 64
if(StorageLoc .contains "iCloud") {
	if(Settings .contains "savePostText") {
		text(text: "Which of these options do you prefer for saving the post text to iCloud?") >> text 12
		list(items: (
    "Always Save Post Text To iCloud",
    "Never Save Post Text To iCloud",
    "Ask Me Each Time"
)) >> list 7
		choose(list: List, prompt: "${Text}") >> choose 13
		setValue(key: "savePostText", value: "${Chosen Item}", dictionary: Settings) >> setValue 6
var Settings = Dictionary
		text(text: "${Settings.as(Dictionary).key(savePostText)}")
	} >> IFResult 65
	text(text: "${Settings.as(Dictionary).key(savePostText)}") >> text 13
	if(Text .contains "Always") {
var SavePostText = Variable
	} else {
		if(AutoMode != "1") {
			if(Text .contains "Ask") {
var A25FAAD3-6AD9-451E-8933-9D6C53220030 = """Do you want to save the post's link, caption, and username below to iCloud? 
Choose after closing this window
__________
Ôøº"""
text("${A25FAAD3-6AD9-451E-8933-9D6C53220030}")
				quicklook(input: Text)
				choose(list: Yes No, prompt: "Do you want to save the post text?") >> choose 14
				if(Chosen Item == "Yes") {
var SavePostText = Variable
				}
			}
		} >> IFResult 66
	} >> IFResult 67
} >> IFResult 68
if(SavePostText == "1") {
	saveFile(input: PostText, ask: false, path: "${SName}/${Variable}") >> saveFile 6
} >> IFResult 69
/*


Repost Photo Option üîΩüîΩüîΩ
*/
if(Settings .contains "repostPhoto") {
	text(text: "Which of these options do you prefer for reposting one of the photos saved?") >> text 14
	list(items: (
    "Always Prompt For Repost",
    "Never Prompt For Repost"
)) >> list 8
	choose(list: List, prompt: "${Text}") >> choose 15
	setValue(key: "repostPhoto", value: "${Chosen Item}", dictionary: Settings) >> setValue 7
var Settings = Dictionary
}
text(text: "${Settings.as(Dictionary).key(repostPhoto)}") >> RepostPhotoText
if(AutoMode != "1") {
	if(RepostPhotoText .contains "Always") {
		choose(list: Yes No, prompt: "Do you want to repost a photo from the post?") >> Repost Chosen Item
		if(Repost Chosen Item == "Yes") {
var RepostPhoto = Variable
		} >> IFResult 70
	} >> IFResult 71
} >> IFResult 72
text(text: "${Settings}") >> Settings
text(text: "${InitialSettings}") >> InitialSettings
if(Settings != ""${InitialSettings}"") {
	saveFile(input: Settings, ask: false, path: "${SName}/settings.json", overwrite: true) >> saveFile 7
} >> IFResult 73
if(RepostPhoto == "1") {
	count(input: RepostPhotoChoose) >> count 5
	if(Count > 1) {
var 7E176B63-1BDB-49FC-B550-BF3962F5F0FF = """In the next window, choose the photo from the post that you'd like to repost. 

The caption will be copied to your clipboard for easy pasting."""
text("${7E176B63-1BDB-49FC-B550-BF3962F5F0FF}")
		quicklook(input: Text)
		choose(list: RepostPhotoChoose, prompt: "Which photo to repost?") >> choose 16
	} else {
		text(text: "The caption has been copied to your clipboard for easy pasting.") >> text 15
		quicklook(input: Text)
//Unable to get shortcuts action is.workflow.actions.getvariable
	} >> IFResult 74
var E7383639-B7C8-4B15-8020-C8EE5D9DB204 = """Reposted with Ôøº
Ôøº"""
text("${E7383639-B7C8-4B15-8020-C8EE5D9DB204}")
	setClipboard(variable: Text)
//Unable to get shortcuts action com.burbn.instagram.openin
} >> IFResult 75
