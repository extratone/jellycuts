import Shortcuts
#Color: green, #Icon: repostArrows

/*
🛑 𝗜𝗻𝘀𝘁𝗮𝗹𝗹𝗮𝘁𝗶𝗼𝗻 𝗡𝗼𝘁𝗲 𝟭 𝗼𝗳 𝟯: If you have 𝘯𝘦𝘷𝘦𝘳 installed a shortcut from an 𝗶𝗖𝗹𝗼𝘂𝗱 𝗹𝗶𝗻𝗸, you'll need to do the following:

1. Open the 𝗦𝗵𝗼𝗿𝘁𝗰𝘂𝘁𝘀 𝗮𝗽𝗽 and run any shortcut
2. Go to 𝗦𝗲𝘁𝘁𝗶𝗻𝗴𝘀 > 𝗦𝗵𝗼𝗿𝘁𝗰𝘂𝘁𝘀
3. Turn on: 𝗔𝗹𝗹𝗼𝘄 𝗨𝗻𝘁𝗿𝘂𝘀𝘁𝗲𝗱 𝗦𝗵𝗼𝗿𝘁𝗰𝘂𝘁𝘀

*/
/*
🛑 𝗜𝗻𝘀𝘁𝗮𝗹𝗹𝗮𝘁𝗶𝗼𝗻 𝗡𝗼𝘁𝗲 𝟮 𝗼𝗳 𝟯: To specifically install this shortcut:

1. Scroll to the bottom of the dialog and tap: 𝗔𝗱𝗱 𝗨𝗻𝘁𝗿𝘂𝘀𝘁𝗲𝗱 𝗦𝗵𝗼𝗿𝘁𝗰𝘂𝘁.
2. Complete the 𝗖𝗼𝗻𝗳𝗶𝗴𝘂𝗿𝗲 𝗧𝗵𝗶𝘀 𝗦𝗵𝗼𝗿𝘁𝗰𝘂𝘁 steps that will immediately follow.
*/
/*
🛑 𝗜𝗻𝘀𝘁𝗮𝗹𝗹𝗮𝘁𝗶𝗼𝗻 𝗡𝗼𝘁𝗲 𝟯 𝗼𝗳 𝟯: When you run this shortcut for the 𝘧𝘪𝘳𝘴𝘵 𝘵𝘪𝘮𝘦 it will display several access requests: 𝗶𝗖𝗹𝗼𝘂𝗱 𝗗𝗿𝗶𝘃𝗲, 𝗜𝗻𝘁𝗲𝗿𝗻𝗲𝘁 𝗿𝗼𝘂𝘁𝗶𝗻𝗲𝗵𝘂𝗯.𝗶𝗼, 𝗡𝗼𝘁𝗶𝗳𝗶𝗰𝗮𝘁𝗶𝗼𝗻𝘀, and 𝗦𝗵𝗼𝗿𝘁𝗰𝘂𝘁𝘀.

Tap the 𝗢𝗞 button for each of these requests.
*/
/*
2020-08-13 Note: With iOS 14 Developer beta 1, a shortcut file (*.shortcut) could be restored directly (i.e., it wasn't necessary to create an iCloud link and then download from the link.) Unfortunately, with Developer betas 2 to 4, this capability has been temporarily disabled. However, anticipating that this streamlined method will return in a future beta, the framework to be compatible with iOS 13 (iCloud required) and iOS 14 (direct restore) has been added to this shortcut. When the direct file restore is again available in iOS 14, a minor change to this shortcut will be required.

For more information, refer to the 'Device Details (System Version)' actions.
*/
/*
𝗕𝗔𝗥𝗧
a full-featured Backup, Archive, and Restore Tool
*/
/*
The purpose of this shortcut is to back up, archive, and restore shortcuts in the Shortcuts app Library, also known as My Shortcuts. It is designed to be full-featured, yet simple and fast to use.

For much more information, select Help on the main menu.

Note: This set-up process can be rerun at anytime using
𝗗𝗲𝘁𝗮𝗶𝗹𝘀 > 𝗖𝘂𝘀𝘁𝗼𝗺𝗶𝘇𝗲 𝗦𝗵𝗼𝗿𝘁𝗰𝘂𝘁.
*/
/*
Copyright © 2020 Jim Sauer • @jimsauer

Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the "Software"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
*/
dictionary({"MyName":"BART","MyLabel":"𝗕𝗔𝗥𝗧","MyTagline":"a full-featured <u>B</u>ackup, <u>A</u>rchive, and <u>R</u>estore <u>T</u>ool","MyDate":"2021-05-08","MyBuild":"1","MyAuthor":"Jim Sauer","Tested iOS":"14.6 beta 2","Tested Devices":["iPhone 8 Plus","iPad Pro 10.5”"],"Invisible Character":"‌","Backup (secs for iCloud refresh)":"5","Unarchive (secs for iCloud refresh)":"5","Restore Alert.Elapsed Days":"1","Source Code Preview Lines":"200","Develop Copies":"5","Ints":{"0":"0","1":"1"},"Forever":"9999","RoutineHub ID":"4069","RoutineHub Version":"3.1","Check for Update.Elapsed Days":"7"})
var .SC = Dictionary
// [𝘋𝘰 𝘯𝘰𝘵 𝘤𝘩𝘢𝘯𝘨𝘦 𝘵𝘩𝘦 𝘤𝘰𝘯𝘵𝘦𝘯𝘵𝘴 𝘰𝘧 𝘵𝘩𝘪𝘴 𝘤𝘰𝘮𝘮𝘦𝘯𝘵.]
/*
~ Start of 𝗖𝗼𝗻𝗳𝗶𝗴𝘂𝗿𝗮𝘁𝗶𝗼𝗻 𝗣𝗮𝗿𝗮𝗺𝗲𝘁𝗲𝗿𝘀 ~

The following can be changed manually or by using 𝗗𝗲𝘁𝗮𝗶𝗹𝘀 > 𝗖𝘂𝘀𝘁𝗼𝗺𝗶𝘇𝗲 𝗦𝗵𝗼𝗿𝘁𝗰𝘂𝘁
*/
/*
Segregate Backup Files* by iOS Device?
┈ ┈ ┈ ┈ ┈ ┈ ┈ ┈ ┈ ┈ ┈ ┈
0 = No [default & recommended if 'iCloud Sync' is ON]
1 = Yes [recommended if using multiple devices and not syncing shortcuts via 'iCloud Sync']

*Backup Files are created using "Snapshot", "Backup", and "Archive" menu options.
*/
number(value: 0) >> Segregate Backup Files by OS Device
/*
Suppress 𝗡𝗼𝘁𝗶𝗳𝗶𝗰𝗮𝘁𝗶𝗼𝗻𝘀?
┈ ┈ ┈ ┈ ┈ ┈ ┈ ┈ ┈ ┈ ┈ ┈
0 = No [default]
1 = Yes
*/
number(value: 1) >> Supress Notifications
// ~ End of 𝗖𝗼𝗻𝗳𝗶𝗴𝘂𝗿𝗮𝘁𝗶𝗼𝗻 𝗣𝗮𝗿𝗮𝗺𝗲𝘁𝗲𝗿𝘀 ~
deviceDetails() >> deviceDetails
// Remove any problematic characters that could appear in the Device Name.
replaceText(input: "${Device Name}", find: "[/:;|`*"'\\]", isRegex: true, caseSensitive: false) >> Device Name (clean)
/*
As Root is defined below, all backups for all iOS devices (for a given iCloud account) will be grouped together.

As an alternative, Root could be set to: MyName/Device Name (clean).
*/
if(Segregate Backup Files by OS Device == 0) {
	text(text: "${.SC.key(MyName)}") >> text
} else {
	text(text: "${Device Name (clean)}/${ActionOutput}") >> text 1
} >> Root
dictionary({".":"${Root}","Settings Path":"${Root}/Settings.json","Restore Folders Path":"${Root}/Restore Folders.txt","Snapshot Folder":"${Root}/Snapshot","Snapshot Folder MD":"file://private/var/mobile/Library/Mobile Documents/iCloud~is~workflow~my~workflows/Documents/${Root}/Snapshot","Backup Folder":"${Root}/Backup","Archive Folder":"${Root}/Archive","Develop Folder":"${Root}/Develop","Unarchive Parent Folder":"${Root}/Unarchive","App Root":"/iCloud Drive/Shortcuts","Exceptions Path":"Identify iOS 14.5 Problematic Shortcuts/Shortcuts • Error Saving.txt"})
var .P = Dictionary
/*
~ Start of an additional 𝗖𝗼𝗻𝗳𝗶𝗴𝘂𝗿𝗮𝘁𝗶𝗼𝗻 𝗣𝗮𝗿𝗮𝗺𝗲𝘁𝗲𝗿 ~

The following can be changed manually but since they will be rarely changed by most users, they are not changed via 𝗗𝗲𝘁𝗮𝗶𝗹𝘀 > 𝗖𝘂𝘀𝘁𝗼𝗺𝗶𝘇𝗲 𝗦𝗵𝗼𝗿𝘁𝗰𝘂𝘁
*/
/*
Optionally add to the List action below by including any folders (aka 'Restore Folders') in /iCloud Folder/Shortcuts/ (e.g., 'Shortcut Backups/') that contain shortcuts files. This list, combined with items in 'Restore Folders.txt', is used by the 'Restore (from selected folder)' Operation.

Since the first two items are folders used within this shortcut, it is strongly recommended that you keep these two list items.
*/
/*
Note 1: Folder entries in the List action below are case-sensitive.

Note 2: Include a trailing slash (/) in any folders added to the list. 

It is strongly recommended that you retain the first three entries:
Snapshot Folder/
Backup Folder/
Develop Folder/
*/
list(items: (
        {
        WFItemType = 0;
        WFValue =         {
            Value =             {
                attachmentsByRange =                 {
                    "{0, 1}" =                     {
                        Aggrandizements =                         (
                                                        {
                                DictionaryKey = "Snapshot Folder";
                                Type = WFDictionaryValueVariableAggrandizement;
                            }
                        );
                        Type = Variable;
                        VariableName = ".P";
                    };
                };
                string = "\Ufffc/";
            };
            WFSerializationType = WFTextTokenString;
        };
    },
        {
        WFItemType = 0;
        WFValue =         {
            Value =             {
                attachmentsByRange =                 {
                    "{0, 1}" =                     {
                        Aggrandizements =                         (
                                                        {
                                DictionaryKey = "Backup Folder";
                                Type = WFDictionaryValueVariableAggrandizement;
                            }
                        );
                        Type = Variable;
                        VariableName = ".P";
                    };
                };
                string = "\Ufffc/";
            };
            WFSerializationType = WFTextTokenString;
        };
    },
        {
        WFItemType = 0;
        WFValue =         {
            Value =             {
                attachmentsByRange =                 {
                    "{0, 1}" =                     {
                        Aggrandizements =                         (
                                                        {
                                DictionaryKey = "Develop Folder";
                                Type = WFDictionaryValueVariableAggrandizement;
                            }
                        );
                        Type = Variable;
                        VariableName = ".P";
                    };
                };
                string = "\Ufffc/";
            };
            WFSerializationType = WFTextTokenString;
        };
    }
)) >> RF.List action
// ~ End of an additional 𝗖𝗼𝗻𝗳𝗶𝗴𝘂𝗿𝗮𝘁𝗶𝗼𝗻 𝗣𝗮𝗿𝗮𝗺𝗲𝘁𝗲𝗿 ~
/*
Constants

mode = null | interactive | settings | input
task = null | skip | backup | archive | restore
source = null | My Shortcuts | zip file | folder
*/
dictionary({"null":"","interactive":"interactive","settings":"settings","input":"input"})
var .modes = Dictionary
dictionary({"null":"","skip":"skip","backup":"backup","archive":"archive","develop":"develop","restore":"restore"})
var .tasks = Dictionary
dictionary({"null":"","My Shortcuts":"My Shortcuts","zip file":"zip file","folder":"folder"})
var .sources = Dictionary
// Set .T so that type checks can be language agnostic.
dictionary({"Number":"0","Text":"","Boolean":"false"})
getType(input: Dictionary) >> getType
getType(input: Dictionary) >> getType 1
getType(input: Dictionary) >> getType 2
getType(input: Dictionary) >> getType 3
dictionary({"Number":"${Type}","Text":"${Type}","Boolean":"${Type}","Dictionary":"${Type}"})
var .T = Dictionary
// Initialize global variables
var mode = Variable
var task = Variable
/*
⚫️⚫️🔴⚫️⚫️🔴⚫️⚫️🔴⚫️⚫️

Check Shortcut Input for passed information from another shortcut.
*/
getType(input: ShortcutInput) >> getType 4
if(Type == ""${.T.key(Dictionary)}"") {
var mode = Variable
	keysFrom(dictionary: ShortcutInput) >> keysFrom
	changeCase(text: Dictionary Value, case: uppercase) >> changeCase
var operation = Updated Text
	changeCase(text: Dictionary Value, case: lowercase) >> changeCase 1
	replaceText(input: "${Updated Text}", find: "[ ]*", isRegex: true, caseSensitive: false) >> replaceText
var task = Updated Text
	keysFrom(dictionary: ShortcutInput) >> keysFrom 1
	if(Dictionary Value == nil) {
		number(value: .SC) >> number
	} else {
		number(value: Dictionary Value) >> number 1
		if(Number false 1) {
			number(value: .SC)
		} else {
			number(value: Dictionary Value)
		}
	} >> Develop Copies
	keysFrom(dictionary: ShortcutInput) >> keysFrom 2
	if(ShortcutInput != nil) {
		number(value: Dictionary Value)
	} else {
		if(Supress Notifications == 1) {
			number(value: 0)
		} else {
			number(value: 1)
		}
	} >> Notify
	keysFrom(dictionary: ShortcutInput) >> keysFrom 3
var shortcutnames = Dictionary Value
	keysFrom(dictionary: ShortcutInput) >> keysFrom 4
//Unable to get shortcuts action is.workflow.actions.appendvariable
// Note if Dictionary item Shortcut (or Shortcuts) exists, but all the values are null, the count will not be zero and the Repeat Action below will match all items in My Shortcuts. Thus this method can be used as a feature. 
	count(input: shortcut names) >> Count shortcut names
	getShortcuts() >> getShortcuts
	if(Count shortcut names > 0) {
		repeatEach(shortcut names) {
			filterFiles() >> filterFiles
//Unable to get shortcuts action is.workflow.actions.appendvariable
		} >> RepeatResult
		count(input: shortcuts) >> Count shortcuts
		if(Count shortcuts false 1) {
			if(Count shortcut names false 1) {
				text(text: "1 shortcut was specified, but there is not a match in 𝗠𝘆 𝗦𝗵𝗼𝗿𝘁𝗰𝘂𝘁𝘀.")
			} else {
				text(text: "${Count shortcut names} shortcuts were specified, but there are no matches in 𝗠𝘆 𝗦𝗵𝗼𝗿𝘁𝗰𝘂𝘁𝘀.")
			} >> IFResult
			alert(alert: "${If Result}", title: "", cancel: false)
			exit()
		}
	} else {
var shortcuts = My Shortcuts
	} >> IFResult 1
} >> IFResult 2
/*
⚫️⚫️🔴⚫️⚫️🔴⚫️⚫️🔴⚫️⚫️

Check network status.
*/
if(mode != ""${.modes.key(input)}"") {
	cellularDetails() >> Cellular Carrier Name
	nothing()
	if(Cellular Carrier Name != nil) {
		cellularDetails() >> Wi-Fi Network Name
		nothing()
		if(Wi-Fi Network Name == nil) {
			getIP(source: Local) >> Local IP Address
			replaceText(input: "${Local IP Address}", find: "10.254.254.254") >> Local IP Address (w/ Replace)
			nothing()
			if(Local IP Address (w/ Replace) == nil) {
var 80D2C6EB-2896-4346-B972-DDB047E29A29 = """The Wi-Fi and Cellular networks are not active.

￼ 𝗥𝗲𝘀𝘁𝗼𝗿𝗲 operations will not function properly. 𝗦𝗻𝗮𝗽𝘀𝗵𝗼𝘁, 𝗕𝗮𝗰𝗸𝘂𝗽, and 𝗔𝗿𝗰𝗵𝗶𝘃𝗲 operations will function, however, the files written to 𝗶𝗖𝗹𝗼𝘂𝗱 𝗗𝗿𝗶𝘃𝗲 will not be synced to the cloud until the network is available."""
text("${80D2C6EB-2896-4346-B972-DDB047E29A29}")
			} else {
var F65CC088-21A9-493B-B5A3-4DFF8790DEA6 = """The Wi-Fi network is not active.

Since ￼ makes extensive use of 𝗶𝗖𝗹𝗼𝘂𝗱 𝗗𝗿𝗶𝘃𝗲 it is highly recommended to activate Wi-Fi before using this shortcut, especially when using any of the 𝗥𝗲𝘀𝘁𝗼𝗿𝗲 operations."""
text("${F65CC088-21A9-493B-B5A3-4DFF8790DEA6}")
			}
		}
	} else {
		cellularDetails() >> Wi-Fi Network Name
		nothing()
		if(Wi-Fi Network Name == nil) {
var 44FB51DC-4F9C-4969-8F19-D3665219936B = """The Wi-Fi network is not active.

￼ 𝗥𝗲𝘀𝘁𝗼𝗿𝗲 operations will not function properly. 𝗦𝗻𝗮𝗽𝘀𝗵𝗼𝘁, 𝗕𝗮𝗰𝗸𝘂𝗽, and 𝗔𝗿𝗰𝗵𝗶𝘃𝗲 operations will function, however, the files written to 𝗶𝗖𝗹𝗼𝘂𝗱 𝗗𝗿𝗶𝘃𝗲 will not be synced to the cloud until the network is available."""
text("${44FB51DC-4F9C-4969-8F19-D3665219936B}")
		}
	} >> IFResult 3
	if(If Result != nil) {
		alert(alert: "${If Result}", title: "")
	} >> IFResult 4
}
/*
⚫️⚫️🔴⚫️⚫️🔴⚫️⚫️🔴⚫️⚫️

Create the main shortcut folders.
*/
createFolder(path: "${.P.key(Snapshot Folder)}")
createFolder(path: "${.P.key(Backup Folder)}")
createFolder(path: "${.P.key(Archive Folder)}")
createFolder(path: "${.P.key(Develop Folder)}")
createFolder(path: "${.P.key(Unarchive Parent Folder)}")
/*
⚫️⚫️🔴⚫️⚫️🔴⚫️⚫️🔴⚫️⚫️

The menus in this shortcut are rendered using Contact format that are displayed using a 'Choose from List' action. The following dictionary contains the icon information (i.e., encoded photo) that appear on the left side for each menu item.

Developer note: There are a variety of methods that can be used to encode a JPEG or PNG including the 'Base64 Encode' shortcut action. For BART, the following shortcut was used to create the encoded photos of Apple's SF Symbols:

https://www.icloud.com/shortcuts/64cd0a3789f846b7a01ab87a928e4a9c

The shortcut above requires the premium version of 'Toolbox Pro' (https://toolboxpro.app).
*/
dictionary({"icons":{"Save Snapshot":"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","Back Up Selected":"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","Archive All":"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","Archive Selected":"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","Restore 1":"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","Restore 2":"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","Restore 3":"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","Restore One":"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","Help":"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","Exit":"iVBORw0KGgoAAAANSUhEUgAAAGQAAABkCAYAAABw4pVUAAAABGdBTUEAALGPC/xhBQAAACBjSFJNAAB6JgAAgIQAAPoAAACA6AAAdTAAAOpgAAA6mAAAF3CculE8AAAAUGVYSWZNTQAqAAAACAACARIAAwAAAAEAAQAAh2kABAAAAAEAAAAmAAAAAAADoAEAAwAAAAEAAQAAoAIABAAAAAEAAABkoAMABAAAAAEAAABkAAAAAD1m8F8AAAHLaVRYdFhNTDpjb20uYWRvYmUueG1wAAAAAAA8eDp4bXBtZXRhIHhtbG5zOng9ImFkb2JlOm5zOm1ldGEvIiB4OnhtcHRrPSJYTVAgQ29yZSA1LjQuMCI+CiAgIDxyZGY6UkRGIHhtbG5zOnJkZj0iaHR0cDovL3d3dy53My5vcmcvMTk5OS8wMi8yMi1yZGYtc3ludGF4LW5zIyI+CiAgICAgIDxyZGY6RGVzY3JpcHRpb24gcmRmOmFib3V0PSIiCiAgICAgICAgICAgIHhtbG5zOmV4aWY9Imh0dHA6Ly9ucy5hZG9iZS5jb20vZXhpZi8xLjAvIj4KICAgICAgICAgPGV4aWY6Q29sb3JTcGFjZT4xPC9leGlmOkNvbG9yU3BhY2U+CiAgICAgICAgIDxleGlmOlBpeGVsWERpbWVuc2lvbj40MDA8L2V4aWY6UGl4ZWxYRGltZW5zaW9uPgogICAgICAgICA8ZXhpZjpQaXhlbFlEaW1lbnNpb24+NDAwPC9leGlmOlBpeGVsWURpbWVuc2lvbj4KICAgICAgPC9yZGY6RGVzY3JpcHRpb24+CiAgIDwvcmRmOlJERj4KPC94OnhtcG1ldGE+CrGGhQcAABIFSURBVHgB7ZwJeFXFFYAnIey7JSAkEpJqiIAimyIoGqHC11a6iAqC+tm6YW2tFBGQLioFARdURJRKRUHa6meVwqcUwQVcEISAG0SEWhPCUklICIQ1Pf8kl9z7krz37n1z33sYzvedd++bO/fMmXNmzpw5M3MT1MkBjYTNdoLtBVMFOwv2rryS1lwQKBEsENwiuK7ymleZtkuuZYJxDQlxyl2K8HWe4PmCPQXPEkTwLQS9QLG8hKK+FFwvuEZwo2C+YFxBvCgkUaTSXXCw4A8EUcZpgn7CXiGeI7hccJkgCjouWKchXWo/RvADwUOC5TFCyoYHeIGnOgf9pcbzBWmlsVJCbeXCE7zB43ceBkkNlwoeFaxNIPGSDo9LBOH5Owe9pEavCmKj40Xg4fIBz/BOHU56aCs1mClYKhiuAOI1H3WgLtTppIRhwnWuYLwK2Ctf1Im6nTSAuzpH0GuFT5b3qKPfrnnESu8jFHLqgDKsRkNdqXNcwnXCVaGgxWxduVJn6h43kCCcTBI8JlhXlBBYT+qODJBFTCFJSp8lGMhgXf2PLJBJTKCBlPqsYF0Vfm31RibIJqpAK5gnWBtTdT0d2UStp2AnT5mp0I0RGUVlTGHwqus9INz6IytfYZRQr8veVLiKsPIhK2TmCxBcq4vzDEu4Xq/IzHhgsrUQ3STolam6/h6yQ4YhIdxB5xmhdHNIalHKUL9+fdW8eQvVunVr1apVK9W4cWNVLio/ePCAKiwsVEVFhaq4uEQdO3Y0ShyFVcxcyXVLqJzhKOTnQuRlwXDyhirP0/NGjRqpzMzOqkePnuqcc85VnTqlq+99r41q1qyZ4lm9evU03aNHj6qysjK1f3+J2rNnj9q+fZv65JNNasOG9Wrr1i/V4cOHPZVv6CWsxDDBV4LRCyXkZHn5Q8GMYET8etalS1c1ZMgP1YABl2glNG7cRHpCuTp+/Ji0/mP6nrJJAxISKqqTmJioQEtRpaWlatu2r9Tbb7+lli17XX35JRH0mMA2KbWv4J7aSg+lEBZk7qztZb/S+/Xrr6699jp14YX9xDQ1V0eOHHEowG25KCopKUljUVGRWr36XbVw4Qvq44/ZuhV1eExK/G1tpQZTSA956T3BxrW9bDr97LO7qNtuu11lZw9UDRo00CbGav2myqLnQPvgwYPSW95QzzzzlPrqq62myIdD56BkYgPFhpoyVxjf6k9Q1NOCXas/Mp/SsGFDddNNt6g//WmyHiMwR4wHfgAKhjaK6datm7r88iH6/2effSqmkOVz36G+lNBB8G81lVSbQi6TzPcLsoHNV+jYMU1NmzZDDR8+Utt8zFO0AMU0adJEXXJJtjrzzEw9+O/fvz8axZ8phawW3B5YWE0KoXfMFswMzGz6f8+evdRjj81S557bQx06VHZicDZdTjB69Bh6ZFZWlmLswivbvXt3sFdMPKOhs1f5xUBiNSmkn2R6QNDX3jFgwKXq4Ydnqnbt2stYwcbB2AK9pW3btrq3bN78hcrLy/OboU5SwJuC39gLqkkhf5YMDOi+wcUXD1AzZjyiWrZsJfY7eiYqVIXoKS1atFAXX3yJ+vTTT1R+fn6oVyJ5ToNn3eSfdiKBXlaaPNwo2NKeyeR99+7nqSefnCOz7NN8G7gj5ZdIQEFBgRo9+maVm7slUnLB3t8nD7sLfm1lCuwhv5QHQ62Hpq/t23dQM2c+oVJSUvXcwjR9U/Twtlq1aq29sJUr39QusinaAXQ494LJYqO3BrtCWOF6WDC14pHZX1rd5MlT1fnnXyADeOzHjFC1w3ylpqZqxTDDNz0fspXfSu6fE9Q+t33g7iaJPQV9gWuuGaEGDbpcx5rcFsBM2wqLuH23Ir+392k4Q4f+VP34x74ZDdhD5sheg10hQySFSYtxSEvrpG655TbtXrohjhKYVSMYWiy9zC0Qz0pMTNBmh/AJE8JwgV4BD7fffoc6/fT24b7mNh+VQvYaLO4Y3C+vTDN+ufnmW8W9Pd2VQhAEtvypp2apa665Ul1//Uj1zjtvaQWFyyAK2Llzpxoz5k511VU/UxMmjFN79+51pRTc4bS0dHXDDTeGW6yXfMheO1jWGJIiCfcLGo9bdet2rho79h7XTNIzVqxYru677496jWP37l3qvfdWq/79L5LWGlq59IQjR46qiRPHKQbmffv2qS1bNivCNP36XeSqcZSXH1edOnVS7777jlao68qEfoFxZIFgidVDzpM/rUO/5z7HiBHX6oit20ERgQbOA1h4mjZtijpwoDRkK69fv4H6xz8W6V5l57qwkANSFeF6e3qwe3oq6y/Dhl0dLFskz5A9OjgxG78gEmq1vZuWlqYuvTTb08IQpoJQRsuWzinRmjUfqr/+dV7Q8QRlfPbZJ9rc2Xlr0qSpDNBXePKY4AenhN7pE2gdWD2khx+FXHbZIGlZyZ6iqAggK6uLDKi/rsbavHlz1UcfrZHxpGG1Z/SssrIDEpaZLku5RY7nt946Wtzuvp7mQDgVHTp00LN4B1Fzf7QOUAiTk0xzdCsoMaASRcX+eoUjRw6rESNG6lVDO40DBw5o04UJs1YFred4Yi++uFC9//57VpK+0jgYmA8f9h6qSUhI1HVy46k5mAj+Bx00QiFEHY37dGec0VF17pwVUXiEcQeB3333eD2o2uvD+sWcObMdCsERIFo7dy5naaoAXsaPn6jNXCQNhE0TXbt288tsoYN2KITFkmZV7Ju5Y/EH+x/pog+mKyUlVQQ6SXtIdu4WLVqgmEXjOdFqGewfemia9qisfDy7556JqmPHThE1Duhhttq0aSOm9GyLvMkrOuhgKUT7wCapd+nSzdF6I6HNWgnOwY033uQgwy6SGTMeVLt27dRbgRYuXKAY9O2AmRo4cJBeb7Gne73HJLLU7AOgA62QLNPEmdRlZGRE3DvsfLGSyDIvGx/swG6S2bNnqfXrP1bPPvuM/ZHq2/dCiRCMjrhnOIjKn4yM7wcmmfqfRQ/pbYqaRYe9Um3btjOqEEwfy60TJkxSycnsTqqCV155Wd1xx2iHqWKxaeLE3+t3IjWbVSVJBFD4IOqQlOQ+jGOnU8t9bxTSuZaHnpPZusP44XYyGKpAegmOwu9+N85hDklnJm8BjgDRAfLyzCRQJ3ZNNmpU3eU2UE5nFGLcw2rWrLm0zKZGe4hVWXYmXnHFT9TVVw+vMQIs1lJvmGACSF7TgELYuoqz4AO0RyHWx7+M0cf9bNDAly6tecSjGj78WtW0adNqPLNGTzBT5OYbMMcKnP8YKqw5CjEOtCLT5spiEocBMzR37tOyh7f6lp3//W+PWrLkNb8EptmoqJ/FkdkrCikxS1K+oyem4tChwzWalEjLwlS89NLfReiLayTFvAWv64MP3vfLrEiDOGzcc6usjI72FtRYswgSS0qKdeulNZsETOHGjTnqiSdmOsgyN7CXRWhl6tQHZH6yS3oKK9PmgHLYhsrcyAcooIdsMU0YU1JU5G4hKBQP2Ozi4mI1ZcoDjqAhArr33j+oK6+8ykEiNzdXPfLIDB1LsyvLkcnDH+JZBC192hewBYWs88BX0FeYQe/YURByzSIokYCHiYn1tCnKydngePKjH10hK4ojZB5yp0pPT3c8W7z4VfXyyy8ZNV0sB+/Yke9qgcvBVPA/61DI5uB5vD3dujXXYUa8Ual4q2HDRmr58mUSxX3BQYa1+jFjxmr3mnUK5h6YNQsYfB9//BExcxsd6dZzL1do+ni+ZDMK2SFo3Elk55+JSRku5tdfb1fTp0910EPw48aNlzWKFD3AYkKyswdJuH6UQ84ccZsy5X49i4/UVcX04bB8/vnnjjIM/UEHOyyFVPcfIyzliy8+18fKIhECAkCpKCM/P8/BEQd6WOOw23JOVnG+hGNvdsDMPfnk49qERjKeYDbZ0ehTD0EHWiHEHIx7Wuwg37QpR59asgvHzT29gJNOK1awJ7kK2I6K4AmH24H/HAIl3M75QzssWrRQvf760ohMV1JSPZWTs142XbAubxzQwS56CP5brmny2Fp2jXgN7OHKrlv3UbV1ceJk48ffq2NlgQqhDjgUvXv30VFee52Yn8yYMU2flsIMugWrt65c6WwcbukEyY8OylAI4HRdKtIi/l21apX673+/9jQXQKEvvPB8tdn46NG/ktO4vYJunMDMjRp1Q7X17507C9TSpUs8zeIxvZzkDVxviVhIVQS0DiyFrKlKN3dH10YA9eu7b5EoxD4+wFV29kB9GJReEAzolURjGfSTk50fEa1YD3c/YeU9ogMlJcYDG1ZVtA6sjXKlkvoLwcbWU1PXvLxv1ODBQ7RNR8jhAmalTZtkfcyMmTGnre67b7KYqlZiBp1jR000UUpycjtZuu0oNDbocEevXr31tlCCkm55oac/+GDFnrCayoswrVDe/4NgidVUuK4QzBY0DgzAd9011nU4HKV8++23GtmJzjl1t19nYCGJtZJ9+4pkN/sZ+kMDNY09wSqNczF16mT1/PPPBcsWybO35OWBguVWD4EY6yKDuDENuIn9+l0kK23uVhFp5awSsrEAk+HFQeAdPC52HnqhgTJYHp4+/UHdy0zLppIea8+rubfGEO7fEDS7vAZVAfbVPvroQ3ogrrDhFenh/CJQPCQ3JiaQLj3CCw14JS43c+bDqrTU+FTNYhOZI3sNdoV8KinrK9ONX1atelfNnz8vonmAcaaCEMTNxWT+5S9Pq7VrPwqSM+JHyBzZa7CbLLYYthAcXPHI/C8z5rPOytQfkqHFxjOwUWPJkn/pLaluxxyX9XpU8p/YZmlXCHSIa90oyPZS44AS1q5doz2mlJTUajNt4wV6JIgy6BWcJ/HRVMHdPsHfVF75rwIVQgZ2gXXnoR/A4hGTK2bTHAJ16zX5wZOdJiuSbEcdO/Yux04Wex6D9y8Jrefs9AIVwjNiWzcI2scX0o1BcfE+2Qy9WoKA5yj23caL+aJnrFu3VisjMJhprPJVhLDZdwh+U5VUvYfwLE/wQsEz+eMXsPrHvlwUkpmZpVf2IvGkIuETbwr3luDjhAl3R6NnwO6/BacF8l1TDyEPkcdRgr71Egrhk3wrV76pxxIiuLRQnwdQinUAiiASMHv2EzrMz8fOogCEGkYLbg8sqzaF/Ecy9hbsHPiC6f8ogMM3bF5IT8+QHnOGLsLLJNANb7i0RJSZ9E2aNF4tXvyap4mnmzJteZfK/VTb/xO3VujkRILthhM9uGPG41u2Mhy3xJg4xzdy5HVy8pXjA0zozM5VUQKR223btqkFC+Yr9gXTQ6IIFNZfUEd3A8sNphDyst/mzsCX/P5PmGPo0J/oQ/vMWxAiAz+9ye04wwQPBdAjiBLz7ZLXXvunjtxyRDoG8JiU+dvayg2lkGR5kQMXGbUR8DOdPbR9+lygz3fgJrN+TmwLOH6c3ZHHtYIsJSF8kEGaK8FlxikizmvXrtXjFYtefuz5DVMO2yRfX0HPH8GknJh/JhYmMGcZGd9XXbp01bP9lJQU/UUhAocMzAifHsBEbu/eb0UJ+bL2vUWxts8ZEuY/MQbhMPRnYsPlkWgkBOMKxRSVS48pl+MBGiU8X05avPFZyQ8yNAathdImwXitbLzzheyQoVE49TF+bw2yULRg/GP8lmaZLDKpifcWGS/8IStk5itMEurxUuF45wNZ+Q64yrME410YseYPGYWaVhhTVpJQmndKKbU2SmSDjKIKbDM/pZTqluJZkUvVFvyoqqSiFZwyX1VKQRZR7xmBOsdOMnjVZe+LuiODqI0ZUlZIuE5y4HPHejCNdvnUmbrHJfQRrnIEoy2UWJVHXalzXMNpwt0cwVgJKVrlUkfqetLAMOE0VzBaAopWOdSJup2UwFkAFrlKBaMlML/KoQ7UxXm+QRJORiC49qrgcUG/BOYXXXiGd98ChEI7ZjBISl4qeFTQLwGaoguP8ArP33lgkX++IIvapgRoig48wRs81jlIlxqPEfxA8JCgKaG6pUPZ8AAv8BQzSIhZyc6C2ZDXXXCw4A8EzxP026WkJ+QILhdcJrhRkPEiphAvCgkUQookoJTzBXsKZgqeLthC0AsUy0s7BXFZ1wty4ANl5AvGFcSrQgKFxPEI64PPqXLfWbB35bW9XK2v4pXIfYHgFkE+qsM1T5A0NpGXCcY1/B9w35ycVXf4qgAAAABJRU5ErkJggg==","[folder]":"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","[folder empty]":"iVBORw0KGgoAAAANSUhEUgAAAGQAAABkCAYAAABw4pVUAAAABGdBTUEAALGPC/xhBQAAACBjSFJNAAB6JgAAgIQAAPoAAACA6AAAdTAAAOpgAAA6mAAAF3CculE8AAAAUGVYSWZNTQAqAAAACAACARIAAwAAAAEAAQAAh2kABAAAAAEAAAAmAAAAAAADoAEAAwAAAAEAAQAAoAIABAAAAAEAAABkoAMABAAAAAEAAABkAAAAAD1m8F8AAAHLaVRYdFhNTDpjb20uYWRvYmUueG1wAAAAAAA8eDp4bXBtZXRhIHhtbG5zOng9ImFkb2JlOm5zOm1ldGEvIiB4OnhtcHRrPSJYTVAgQ29yZSA1LjQuMCI+CiAgIDxyZGY6UkRGIHhtbG5zOnJkZj0iaHR0cDovL3d3dy53My5vcmcvMTk5OS8wMi8yMi1yZGYtc3ludGF4LW5zIyI+CiAgICAgIDxyZGY6RGVzY3JpcHRpb24gcmRmOmFib3V0PSIiCiAgICAgICAgICAgIHhtbG5zOmV4aWY9Imh0dHA6Ly9ucy5hZG9iZS5jb20vZXhpZi8xLjAvIj4KICAgICAgICAgPGV4aWY6Q29sb3JTcGFjZT4xPC9leGlmOkNvbG9yU3BhY2U+CiAgICAgICAgIDxleGlmOlBpeGVsWERpbWVuc2lvbj40MDA8L2V4aWY6UGl4ZWxYRGltZW5zaW9uPgogICAgICAgICA8ZXhpZjpQaXhlbFlEaW1lbnNpb24+NDAwPC9leGlmOlBpeGVsWURpbWVuc2lvbj4KICAgICAgPC9yZGY6RGVzY3JpcHRpb24+CiAgIDwvcmRmOlJERj4KPC94OnhtcG1ldGE+CrGGhQcAAA8kSURBVHgB7Z1rbBTXFcfHa0N4g60AwTwqGoIbpcTGGFKgqIB4RFWgSpN8qNSoSiSSVFGq5AOqBE2jKgpSvrRRK9Q0VE2r9lNCGhUknlVRlUIwGGOLRsEgQCQx5hHe75fp/3c716zXu+vZnZndWTxXGs94Z+bcc///e8659869M2VOCaQjR44MOHv27Ojy8vIxN27cGJdIJGru3LnTINVrysrKxuh4KMXQ8UUdd+iwTcdNnZ2dbf379//q9u3bHZWVlScmTpx4jeuinMqiqFxLS8vYW7du1VVUVMwQmPUC+SHpOUbbMAEM8I5+dwS4o3Nmoxz8zibCHJFnfheBnLqgrUPnDmpr1taorbWurq6dk1FKkSBEoCZaW1trBfBiHS8UWHUCtapfv34G9HTgewVRsrqRBFk3b95E7hnl1aLzW/Xb5tra2lYdd3qVG9Z1RSVEJEwUKE8K8GcERr1qf39qvazDEBFWoZELMbJAs5cV3ZAezbKqD6XHxyLnSJh5Z5NdFEL27t07W0q9IBCWiINKLAAS9H82XUM7JxIMObg5cXNW/69XZu9NnTp1e2iZZhBcUEKam5sXSI/XtC0WEeX4dywiSgnLkW4Qc1vEbFIleae+vv6fhdKxIITs2bNnmgr3ugq1VHGhDCKKZQ1egcVqIEbxBrNdJ33fnDZt2h6v9+d7XaiEKEaMkitaoVq3TEQMun79euSJSAUSYu677z6IuSJrXqO4s0ox5mTqdUH9Hxohu3fvfhrlVcsegoiouaZcAcSVQYys+yCVbPr06WtzleHl+sAJ2bFjR9WAAQNWqWa9SCFoYt5LyTbF5cL+cO3atRWzZs06E2T5AiVk165d06XwGm21peievAKb5MZaVeGWzZgxY7fXe3u7LjBC5KKelYv6rZqOIwjafSER9NVkPycX9jO5sL8GUeaEXyEy3bKmpqZfyCr+LFl9hgxwcyveCMoOBmDB736SLwHbtm2rGDZs2DuqKS8TK0o9cOcLJLFSpEDQ6gsXLrw6b968W/nKypuQzz77rL/ixO9FxvP3crzwCqyNKyLlT2qN/fSRRx7Jy2/n5bKwDLUw3lXGz2tfcn0LryDncp3clQMWLibvglEu99trcyYEPzlkyJB3lPFzV69etXLivYsAmIANGOUTU3ImRMMgK9XPeBk3Faf0CIANGIFV+isy/5pTDFE/48di/y9q5iUw0ThlRoCYom5Ap8j5ifopf8t8ZfcznglhgFCtCUY9RzBcHqfeEWA4X+mcWp8LvA5MenJZn3zySaUEv0+nLyajdyLsFWAFZmDnYmhPZdx7ImTgwIFvyydO6Ss98Ixo5XECzMAODL3c3qvLkqv6oXzhWsWNsjhueIG05zVuPLkjDJ+W6/p7zyvu/pKVED3hGyn/t1OEfFPC7t4VH+WMgDDkMfVhxeHv6AnkqUwCsroskbFSphaTkQm9HH6nQoMlmGa7LaOFaG7UVN3MQ/6B2meTEZ/ziABjXkpXtZ+tOWF7092W1kLoYWqw8FcaMAucDPyply2dsqX+GxUbTME2Uy8+rYUokM8Xi1skoDyIQE7NYMNsvYwK035n9JQ9TccgdIgKmVRGYXFb2C5SgP9Xql49BsBgTmP7yzWKWx7E8AigakjaOXjwoHPs2DHn4sWLhphURez/KAwZGtZ3JkyY4Dz44IP4XkOMvaaU91QuBfhyDUQu1/E2lbfbkEcPC9Ektlkq8L/FYIXfmgkZmijtqFPknD9/vpur6k22PT9q1Chn9uzZztixY+8ZUlwruSVv8T0Nq+xIrmA9YoiIeEk11DcZuKiTJ086GoY2FkKzD4JQxoKdrIg9dpU113I9MjZu3Ojs37/f/IbcUk+UH4xVvpdSy9LNQtTv+IYIaVWhh2ufem1O/wPs1q1bnQMHDphpmtyMTJ5DDx482ICbKhBF6dlevnzZWAOE2Ps4fvTRR50pU6Y4Gto2xKbeH/T/tvKgd7ZKlE++VCzJPa99rfolR62M1BjylLr5w3nQ4ieRGXGDmJEMKvFAgcwZOtQs5+iRBQAQ9E+dOuWo2e20t7ebxoCrvKMK4xw6dMjBjQ0aNKjH/UH+QJ7CwtG6EmfkyJFG5yCJQRZYqwI+Jb1/bXXvshCecAmo/6gGP+Z3zAoSjh496mzYsMHkQ+b333+/s3TpUgNkbwOU3E+l2Llzp6NHxUYGZJEsKEHXWCM8zR90wSIffvhhRzMWjbUHlTfeQlg3qqHzXfscvstC5Ea+rULXU0P9JsC7dOlSl9sBxOrqakOGlyEYrqGlNWfOHFND9RzG4Ukc4CCb2lvIRMuQyqFVXM7cuXMDIwWswRzsVZ4WytRVMhXycT186hcU+6n9B8nOCUOrB3HjiSeecCZPnpwx9uQk2OPF5G/LQAWgUdLW1uZ8/vnngVUI8gBzsLdqGQvRiTJ1BhdRk6OULCijR492Fi5caKzuypUrBZmeipWeOHHCEECekIJ10tqrqakxjRP085tczBdJ1tuSf8cQ8umnn1bLn9V5cSd+FcjnfltR8OV0GAuVaITQ/9myZYtDJxlSzp07ZzYqSRCEuJjXwYHK1W4IgQyZZGVUCbEEWIux/4e9x2WNHz/ebDTfiWFgdObMGeeBBx4IJHsqG9hLWJ22dhtDHsNHxqknArgpmr7WGgCQBga/B5Vc7B9DnmVhqs0wqExS5VAATJ6tlBL62tad1TtorFx5U5FfwaL8r7/+enJvfQOrTD57CnT48GHje4MuTD765HIPFQkXFWZFcltzk+GigjckSMExNnDmoqzXaymUSDfjUkGautf8/VxHBQrbsl3sx8BFhTon1fJhQ8KuudZl+QGnGPeid9iVyCV9iOFC7FerV2xWxoZVYDJkQJHxp7CJD7oMkEE/hAHPsIgBE7V0y2Qp1RUi5FthZWTBwUfSmdIqo6wPp+z1UdrTAmJQs7GxsWugNAz94AAuaGU1hBnQrfL4Ycanwibf5hfUHkLQPezkctDAg6iaMAN6ckEwzVJzWYXSFw7gIqEay/umknGLj4uAABzABRaS/mlREZTqy1m6RjE0fOfYl1HOo+y4rIulFmjzKGfkb4EDuGAlFK++i7zC97qCcAAXWEhbIZp19zqgfssHB4YLCWpi8C9OxUXA5aApofbvfjfCF1ejPp47HMAFhBzToNadOI4Ur0aAPRzARULDGcd0cCkmpLiEwAFcJHjjs1TpiAN78Qhxse/QhPQTCV6/Les4EAf24hEC9nCg2YvXbE99b+yyikeIi71Z4mYJaYz6FKDiwRV+zi72jeRkCJEP26sfz8ZxJHzwU3MAcxf7uxaiV2rziYcWd35Q6j3x/yEi4GLe4nLwfwuRD+OByJYwLaSUO5+pugcZb13Mt7gc3J39rnbwJs1fvRlUZsx2TyaYBTypBQux4gUmGp1ZH2kTZWIhTxBlAWswB3sr385cZFbFf7Vgp1mzH3wv2FEGzvDhw80Ufp4V06z78ssvnePHj5t1IpwPokC2EGHsAQvwOzo6nC+++MIcozMuhqmlQSTmGGjBTjPYW3ldhLCCR7MrPpASZo6pvSCfPYqPGDHCkHL69GlTGObDsuaQ9R4sSYt6v4eKxILTffv2mWlAkENFYjkehHDsNyFT2wd29RTyughxhX+kpWS/1EW+Fn1CCGbNIpvt27cbQsgct8USaWoG/0c5AbjGl+iwdenKb5MmTQpk3TzlF9Ys+vwoGYduhLAaVAt31sltPet34SfK61WpxuSZ14tFWBKofe60l2RdIndsrZgKhr7jxo0zq4CDsA5hTPxYl7wCFwC6EcIPyvhd1YwfqWb4WqtOIch0/vz5xnWxvoIZgPxOrSuVZMuBZcycOdNYvl9CKL8wvgXWqTj0QEYK8GqNDXI5j7NqyG8iczYWTBLUmXRtF4T6lR32/bQUq6qqTEOEFVNYuF8y0Bm58kCbGhoavi9sus3B6kEINwT98hlkUhg2alwQhUJm2MlWJvIJysUiUzhkfPlMWkJcK/mHrGRJEFYSNnClJN+1jvWyjh+kWgflSNvU4UK1hN6Qn+NlW6VU3kjrCpZgCrbpyMhICCd445lcy3swGqdgEABLMM30NjlyyVr9xehb6tAdjgcd/RMChmAJptmkZSVEbeRTMq3lmJe2bHLic1kQADsXw+VgmuXS7BbCjbxnVn7vj/S845QfAmAHhr29sxfpWS3EZi9T+7nazfvo6MUpNwTADOzA0Mudnv2Q+ibxy/i9IJp0jTv0EvzL+MlD5rZHZveKglJnHE+SUM9wCEZgBWZgl+GyHj97cln2Lr6DoQzewAxjUiwqPfdgA0Zglcu3Q5Dk2WXZbN1e/O/06taX/Y4IW5n32p4grpixWr3xV0ROt7Gq3sqak4UgjAw0OPiqhlTe5326ceqOAJiADRjlSgaScrYQmz2fzZOF8KW25xjvYtCwLyfcFD1xPZIt/GfzAJ7v9OkJ4AsiYzX+UgGsz/JB2cEALDQh4sV8v2EIgHlbiEWfmKIm8UoNDfCC+URQw9RWftT3NG1lHZ2a7PaGWlNv5eOmksvomxArLP44cTAfJw6MEIiJP99tq2f++0AJQQ0F+yr50j7xgXsF8RWKF9H9wH1yvZALe1pxZZWC3UO0wkrlsW1yGZKPCdxuK+qg4sUKvdlobfL5oI4Dt5BkxVpbW0ehvAqzTE/JBkFMqTWPbXNWve4rqlRrqGR65fjJ5HIGeRwqIVZRBiZVsNf1/1IRY16WFnViIIKmrIigg7VO+r6Zy5iULXuu+4IQYpXSVNUFOn5N22IVtpyX/kfNldk+hXTj+7Kbtf1GD5X45GxBUkEJsSXSV3xm6/gF1bolIqaSvotcW9HcGdbAI1b6FCLirP5fL/3e05oNvlJX0FQUQmwJFWMmipQnRcgzAqFe5PTHYiAnbMvBEiCBvUi4IT2aRciH0uNjxYgjVsdC74tKiC2swEiInFqRsFjHCwVKnYCqUrwxxGBBEKRzOVuRZJlHBQCPBbBXXEDeGclr0fmt+m2zSGjVsf8p7bZQee4jQUiq7vq6zlhZCe+jnyEy6gXcZF3Dy9aHyYgMwOlISgUfAlX5EX9B23GdZ/l3s2TvkuwWTcdp52SUUiQJSQWINz7zkmGBOUYAj1ONrhHYDbquRiDzikLzVjwdX9Qx6yXbdNwkK2gTgV+JvA5ekDBRa/JTZUft//8BZ4i8rsJvCjcAAAAASUVORK5CYII=","[zip]":"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","[restore]":"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","[ignore]":"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","[ignore all]":"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","[full preview]":"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","[truncated preview]":"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","[skip preview]":"iVBORw0KGgoAAAANSUhEUgAAAGQAAABkCAYAAABw4pVUAAAABGdBTUEAALGPC/xhBQAAACBjSFJNAAB6JgAAgIQAAPoAAACA6AAAdTAAAOpgAAA6mAAAF3CculE8AAAAUGVYSWZNTQAqAAAACAACARIAAwAAAAEAAQAAh2kABAAAAAEAAAAmAAAAAAADoAEAAwAAAAEAAQAAoAIABAAAAAEAAABkoAMABAAAAAEAAABkAAAAAD1m8F8AAAHLaVRYdFhNTDpjb20uYWRvYmUueG1wAAAAAAA8eDp4bXBtZXRhIHhtbG5zOng9ImFkb2JlOm5zOm1ldGEvIiB4OnhtcHRrPSJYTVAgQ29yZSA1LjQuMCI+CiAgIDxyZGY6UkRGIHhtbG5zOnJkZj0iaHR0cDovL3d3dy53My5vcmcvMTk5OS8wMi8yMi1yZGYtc3ludGF4LW5zIyI+CiAgICAgIDxyZGY6RGVzY3JpcHRpb24gcmRmOmFib3V0PSIiCiAgICAgICAgICAgIHhtbG5zOmV4aWY9Imh0dHA6Ly9ucy5hZG9iZS5jb20vZXhpZi8xLjAvIj4KICAgICAgICAgPGV4aWY6Q29sb3JTcGFjZT4xPC9leGlmOkNvbG9yU3BhY2U+CiAgICAgICAgIDxleGlmOlBpeGVsWERpbWVuc2lvbj40MDA8L2V4aWY6UGl4ZWxYRGltZW5zaW9uPgogICAgICAgICA8ZXhpZjpQaXhlbFlEaW1lbnNpb24+NDAwPC9leGlmOlBpeGVsWURpbWVuc2lvbj4KICAgICAgPC9yZGY6RGVzY3JpcHRpb24+CiAgIDwvcmRmOlJERj4KPC94OnhtcG1ldGE+CrGGhQcAABCPSURBVHgB7Z1rjFXVGYb3HC5yhxnlMlxkQLmIEoZhwKohDTowpIkmtNhfbRpNQRvTVn80TaCGNEYT44/SNqZWkl7S/qqIiUYjF8VqlAjDMBOrMqggKAygMsAgILfp+6zuNd1zZp8z+3L2mX3krGRn37/1rfdd37eue+0KpwTCgQMHhnR0dIwfMGBA9YULFyZnMplZXV1d9VJ9VkVFRbWOR5IMHXfquF2HbTpuunLlStvgwYM/v3z5cntlZeWxadOmnee5NIeKNCrX0tIy6dKlS7UDBw5cJDDrBPIM6VmtbZQABnhH1x0B7uie2UgH19lEmCPyzHURyK3T2tp17yNtzdre1dZaW1t7mJtpCqkgRKBmWltb5wngRh0vFVi1ArVq0KBBBnQ/8IOCKFk9SIKsixcvIveE4mrR/a26tnnevHmtOr4SVG5Sz/UrISJhmkBZIcDvFRh1yv2DyfWyDkNEUolGLsTIAs1eVnRBejTLqp6THi+InANJxp1Pdr8QsmfPnjuk1GqBcLc4qMQCIEHn+XRN7J5IMOTg5sRNh85fUmTPzp8//+3EIs0huKiENDc3N0iPR7Q1iogB+HcsIk0By5FuEHNZxLyqTLK+rq5uW7F0LAohu3fvXqDEPapE3aNyoQIi+ssaggKL1UCMyhvM9kXp+9iCBQt2B30/6nOJEqIyYpxc0RrlulUiYtg333yTeiKygYSYa665BmLOypo3qNx5QmXM8eznCnWeGCG7du1aifLKZTMgIm2uKSyAuDKIkXV/RCZbuHDhxrAygjxfcELeeeedqiFDhjyhnPUAiaCK+W0KtiouF/bn8+fPr7n99ttPFDJ9BSVk586dC6XwBm3zStE9BQXW48ZaleFWLVq0aFfQd/t6rmCEyEX9WC7qD6o6jqHQvhoChb6q7Cflwn4hF/aPQqQ5E1eITLeiqanpN7KKv0nWVUMGuLkZbwxpBwOw4HqcEEvA9u3bB44aNWq9cspDlBWlXnBHBZKyUqRA0NOnT59+eMmSJZeiyopMyPvvvz9Y5cSfRMb93+byIiiwtlwRKX9RbexnN998cyS/HcllYRmqYTyjiO/XvuTaFkFBDvOc3JUDFi4mz4BRmPfts6EJwU+OGDFivSK+79y5c1ZOee8iACZgA0ZRypTQhKgbZK3aGQ/hpsrBHwGwASOw8n8i99VQZYjaGT8S+39XNS+DiZZDbgQoU9QMuCJyfqJ2yj9zP9nzTmBC6CBUbYJezzF0l6clUMOx+tB9nqaaHvoonJRODUE7JgMR8tZbb1UOGzbs36razU1Tow8yPvvsM0dtADMqqEQ7U6ZMSRUpNB7VJHjv7Nmz3128eHFHXxk5UBkydOjQJ+UTU0UGLuHMmTPO66+/7hw+fNgQo5qNuca9tAQyMNiBYRCd+iRErur7soyfUqVLU8A61Ahzvv76azPaR8OM487OTjMsmyZdwQ4MwbIvvfISohG+sSq8n6L6ltZC3GsN3uO+El7M+2DnYvgUmOaLOy8hKozWytSmq1aVT0b5XgAEwBAswTTf4zkJ0dyo+XILq8vtjXzwhbsHlmAKtrne9CUE81LN4Lfye0PTVI3MlYhSuQ6WYAq2YOynty8h8nNL1Kj5XpqquH7Kl+I1MAVbMPbTvxchMCcmf6WXBujY753ytRgIgCnYgrGflfQiRP7tNr3QULaOGKj38aprJQ0aZb0t+9FehIi5B+XnBpatIxuqwp2DLRira+XBbKk9CJFfm6qH7ylbRzZMhT8HY7AGc6/0HoToxg/UzB9NbaAckkUAjMEazL0xdRPCCJce+mGxyaB1HWTzKh3lOEgcxW7pgzWYe0cXu4cZhw8ffosUqmOyQtKBfig2O+vddp/7xYu/5Vn5XL/bga/hIgAgH+h0l6tCYz72ccEKLD/Kg2AN5mCv91uQ0U2IEr1cg0+DkuxEBAy2L7/80jl06JBz/Phx0ztLtwLA+wWAGT9+vHPnnXf63Q587c033zTxQa5fQC9IFzjOuHHjnOuvv9657rrrjF65dPOTE+YacuW2wHy53vs/IbpRoZ7IZSQ+qQAQkK2qntPW1maOLUH54sR6NBaT75FA9+gFPnHihMn9+V4ApI8//tjRNyzO7Nmznfr6ejOnNylsXLnLFO+TwqPLWMiOHTsmaiClNqlORICnH2fbtm3Op59+akDBNQQJAMT7cQMyyBS5LCRbPi4OUk6ePOksXbrUWA+6FDq4mNfCgWQfNvYLGQKoMqlcAAgkTl/TGh9tASaB3nKE4+wNhbkWNwSNx4KOjmSa/fv3G92DEhlWTzAHezjgXZtNbyXyJCyEhJ06dcr58MMPTQKtwijC8GZ1dbUzZsyYnK6E5zQ70r4WeY/7mThxYk4LgTB9eu0cPXrUTBG1BIALus+ZM8fR1J6cZV1kxfSii/2tOnzZEjLf5ow4gv3epebCEKvGlLtBB2RI0JRLZ8KECTlB8sqLayVz5871ivM9Ri90feONN8xoJKSQoRgqPnLkiHPTTTclkmld7E2XfIaP8nVhZtwE+6bQvfjFF1/0yFkkVN9VOJMnTzbXibuvLZ/8IPf6ks99gJk6darRzbpVK5s0JBXcuGfCRYYVEhRRNbkjiYBcxr5tAq11TJo0KZHcFjcNuG0yChZsMUF3Cnd7HjeO7PddudVwkVHjZKJy7IikXBaRefvGiIe6Pn4zqTizExzmHJ1oj1DV9urn9j2FERX4WeKBA5eLzEQpkOgkBm/C0NJaS2CN++FB3GqxgpsJKhQnxpGZXQoAFQuc/ooHDuCCbFBPoVIO/YuAy0E9A1Gzkiqs4iTRzTFGBCYdV0flvm5XmcYMSPrgYqASznpTcbBL5F1A27t3r2lU1tTUmAZkVCBpC9GOOHjwoKN1s5wbbrghUNsnkYTlEAoHcIGFmMW/cjzXL5epgWkkzdEkbxP/Bx984DQ0NDgQE7Y3AVl02dCPRuMUy6NfTWtlhZaVJBiuUYwsXlUiRGpQ7tixY+YNqqD0Er/22mtmQjUABw08Szc/E7IhAVnIpnvEBSCoqKI9l1GO6STXpC3MmDGju9sb/8+nYuRyXA8uiIDe2brbc9tlA5G8iwz8tMZ8HGSnLbhp6eRLKJa+S5V+lBXTp083g1IACJAASp/S5s2bnfb2dkMKoFvdyfE8wzU2iNuyZYuZEe8l46677nK09mJBepALCRrpgAsspA2F0xYggZzMSKFG1QwpAA0pW7duNS6N3mJ0t+6HY65BGNbEs5YMTXR2IOPGG2+MXWNLAiv0NFxIeBMJTWPAUqgRUaDTlQFJ6ErfGLmf7nKv7hwzKggZPMM5MuiqQQZWF7WmljQ+bjqaMkrkXpvDko40inxqVTWqXTFqx3gEgKI8ZFAL4xxzZ+OYa5YozkeOHGnepRc3bA0tir5R34EDuICQI+rU6iJBaQ0AybeDy5YtM4NVAI2J88UUxzbwHNe4x/XRo0c7jY2Npvc2zWSAPRzARUZVwSM6OJNmQgAcQBldXL58uWncAbifzlzjXlVVlSGDAbA0k0Ha0BkO4CLDis+61k6uSnsAaKbokOuvvfbaHtZhdecZpu/wDM9ynvbgYt+uoe5jGVUBz4uhfW6hknbdDcBewL25n2PmcOUjLI0JBHs40JD2eWsWezCbUglel8ToHkSw2XKG/qpSsAyLt4v9Hs5tP8S73pxmH0zzHsCZjUKZ8sknnxhVqSLTZiklMlDcxf5djg0h8mF7dLFD+8TmZhFZoYMKQtMVcsstTI11TDuFa6UUKD9c7I2FGJelJbX5xUNLmI67tCSa+jsWwZbm9lQuvFzMW1wOHEOIfBgDIlvc0j7Xu+XrCSDgYr7F5eB/hBCPTP1VdVFfLKXCPQF8iioSrMEc7G3EtpZFC/c/MvlmxgzKoTgIuOMzzWBvY+wmhJU0ZT7/KrstC03ye7AGc+8qpt2EuNE/r9G5U2VSikMGWCum572x9SBE/8k4KL/2ImMK5ZAsAmAM1mDujakHIdxQ9fEZ9TxeosAph2QQAFswBuvsGHoRojXMd6ihsq1QVkLk2eTSZkhzsG0br47ZafDeC3sMtmAM1tnv9iJEEXepDHlKL/DLn+znQ58jw/uNIOeM5jGTpBDyQyvUxwuUn0yKQEdvWcoQcCH0RQbYgrGOe02I60UI+sqvbddLrxTCSkgUU/ttK5pzPsDkw09aqZyjZBo2dKHnlQl66IhOBHSnw5L7cYNrHa+AsZ8s27nY4x7MaRGadfJzDVIi1ppZJIYucW9iSChf49LvxKQDcl9/B/TEMvbt29frm0J0Jw02U0XVFTnC9JzaH+vA2E9OXp+k5VfXC6xfomjUAPh8W7Fp0yYz1m2JIXFsTEDApdnrUeOJ+x6Zg+FfOwSM3gTKOwbDVqxYYWa0xCGFjCcsf69PrR/Opa+vhdiHBdLjEnC3XEvkdRdJAIrIRM3sQ85JrN2Y3gkIaQjo5B2os7qiO2mQG4+sJu5ZWO4H03xC8loIL7K0qYRtlDKxPuohsSx4LHkm12ERXEtjgAgsBnJYOICN86iBdArDLmG4Uos9b8onJxAiAvJZ5ZBVcV0XijHxWb/TM8tcyJ8at5UWYqxF0MdEmaHf4zk1NTVGR+5FDa6r2iBiV/clI6/Lsi+LiF8LtO+ohhB5dWsSxMZkNYZav/rqK7PmCRPbcFlxcqDVM84ei6U8Y7bK2LFjzR5i4raZqFWpiv8eGAbRL5CFIEiupmCL8WMRdrNEBVE26WeydYpjFejqlkeFX4zfAlH+XYVFou895KrcCP27ilAtHf6DIb+/DjMkwnLwRwBswAiswvw7BGmhUZUZ85u8P6qgeojuj3LojQAzX1RmPK1C/OciJ1RtIJSFEDURaJr/wxp6/Cu1h3LoiQCYgA0YhSUDSaEtxEbPb/NkIfyp7T4pYGpQ9t7VuMdN8XGReiWK/9s8AOc/feoRZbH+p/GXVBuv1kDawQAsND/3gaj/MAS/yBZiwadMUZV4rWoULDCfiVtvt3JLZU/VVtZxRa3wdWqFPx7FTXnTGpsQK6z8c+LC/Jy4YIRATPn33TZ7Rt8XlBDUUGFfJV96VfzgXoX4GpUX6f3BvTdfyIWtVLnyhAq7GdTC+ruvyqtblGMKbrcW9ZHKizUaD98YRU5f7xTcQrwRqld3HMorMavUUTcMYuL2D3nlF+PYVmfV6j6rTLWBTKZe4ONJxZ0oIVZpOiaVsEd1fo+IqUhydTYbZ9w9RFCVFRG0tF9URnos6N8648RdFEKsglpQpkHHj2hrVGIHQEzaXJltU0g35ipt1vY7jRjyy9mihKISYlOkRZXv0PFq5bq7RUwlbRe5tn5zZ1iDXJHpLhcRHTp/Sfo9q2823rY6F2vfL4TYxKmMmSZSVoiQewVCncgZjMVATtKWgyVAAnuRcEF6NKuR95z0eEFlxAGrY7H3/UqITazAyIiceSKhUcdLBUqtgKpixA5isCD2uhfaiiTLDBUAPK1q9ioXkHdC8lp0f6uubRYJrTqOPnBuExNznwpCstOgOWGTZCWsR79IZNQJuJl6ZoK2UTIiA7AfSdngQ6AyP+JPazuq+3z+3SzZOyW7RYuYHeZmmkIqCckGiBWfWWRYYFYL4MnK0bMEdr2emyWQWaLQrIqn404d871km46bZAVtIvBzkdfOAgnT9E1+tuy0nf8Xb4lnjqaR6qgAAAAASUVORK5CYII="}})
var .M = Dictionary
/*
⚫️⚫️🔴⚫️⚫️🔴⚫️⚫️🔴⚫️⚫️

Update the settings file.
*/
getFile(picker: false, path: "${.P.key(Settings Path)}", error: false) >> getFile
setValue(key: "MyName", value: "${.SC.key(MyName)}", dictionary: File) >> setValue
setValue(key: "MyBuild", value: "${.SC.key(MyBuild)}", dictionary: Dictionary) >> setValue 1
setValue(key: "RoutineHub ID", value: "${.SC.key(RoutineHub ID)}", dictionary: Dictionary) >> setValue 2
date() >> Current Date
setValue(key: "Start Time", value: "${Date}", dictionary: Dictionary) >> setValue 3
// Determine if the 'Restore Folders' list used previously includes some entries that are not in the current folder list. This would normally occur if: 1) the user added custom folders to the list, 2) after the folder additions, the user installed a new version of this shortcut.
keysFrom(dictionary: File) >> keysFrom 5
var RF.Previous = Dictionary Value
// Combine the folders in the Folder List (above) with the folders in the folders text file.
var RF.Combined = RF.List action
getFile(picker: false, path: "${.P.key(Restore Folders Path)}", error: false) >> getFile 1
splitText(text: File) >> splitText
//Unable to get shortcuts action is.workflow.actions.appendvariable
//Unable to get shortcuts action is.workflow.actions.setvariable
repeatEach(RF.Previous) {
var found = Variable
	repeatEach(RF.Combined) {
		if(Repeat Item 2 == ""${Repeat Item}"") {
var found = Variable
		} >> IFResult 5
	} >> RepeatResult 1
	if(found != ""${.SC.key(Ints.1)}"") {
//Unable to get shortcuts action is.workflow.actions.appendvariable
	} >> IFResult 6
} >> RepeatResult 2
if(missing != nil) {
	count(input: missing) >> count
	if(Count false 2) {
		text(text: "The current version of ${.SC.key(MyName)} does not include the following shortcut folder that was defined in the previous version. In the entry below, designate if you want to continue to use this folder.")
	} else {
		text(text: "The current version of ${.SC.key(MyName)} does not include the following shortcut folders that were defined in the previous version. In the list below, designate which folders you want to continue to use.")
	} >> IFResult 7
var 1694E450-E952-4649-8F00-0CD08F72E163 = """The 𝗥𝗲𝘀𝘁𝗼𝗿𝗲 𝙛𝙧𝙤𝙢 𝙨𝙚𝙡𝙚𝙘𝙩𝙚𝙙 𝙛𝙤𝙡𝙙𝙚𝙧 Operation uses a list of designated shortcut folders.

￼"""
text("${1694E450-E952-4649-8F00-0CD08F72E163}")
	repeatEach(missing) {
var 31850AE2-A6F6-4690-B8F7-166494AC848D = """BEGIN:VCARD
VERSION:3.0
N;CHARSET=utf-8:￼;;;;
ORG:;
PHOTO;ENCODING=b:￼
END:VCARD
"""
text("${31850AE2-A6F6-4690-B8F7-166494AC848D}")
	} >> RepeatResult 3
	combineText(text: Repeat Results) >> combineText
	setName(input: Combined Text, name: "Menu.vcf") >> setName
	choose(list: Renamed Item, prompt: "${Prompt}", multiple: true, all: true) >> Chosen Folders
	if(Chosen Folders != nil) {
//Unable to get shortcuts action is.workflow.actions.appendvariable
		text(text: "${Chosen Folders}") >> text 2
		getFile(picker: false, path: "${.P.key(Restore Folders Path)}", error: false) >> getFile 2
		if(File == nil) {
			number(value: 0)
		} else {
			count(type: Lines, input: File) >> count 1
		} >> Count of File Folders
		if(File != nil) {
			prependFile(path: "${.P.key(Restore Folders Path)}") >> prependFile
		} else {
			saveFile(input: Text, ask: false, path: "${.P.key(Restore Folders Path)}", overwrite: false) >> saveFile
		} >> IFResult 8
// Based on the folder count already in the text file (if any) and the folder count that the user selected above, compose the appropriate alert.
		count(input: Chosen Folders) >> Count of Chosen Folders
		if(Count of Chosen Folders > 0) {
			if(Count of Chosen Folders == 1) {
				if(Count of File Folders false 1) {
var 6E75D1FB-F443-4381-8763-9627081D92DC = """The folder name you selected was saved in the following new configuration file:

￼/￼

This file can be deleted at any time if you no longer want to use the folder you selected."""
text("${6E75D1FB-F443-4381-8763-9627081D92DC}")
				} else {
					if(Count of File Folders == 1) {
var 71FAAEB4-45D9-430B-AAD9-8EDB824CC247 = """The folder name you selected was added to the following configuration file:

￼/￼

This file now includes 2 folder names. This file can modified or deleted at any time if you no longer want to use one or both of the folders."""
text("${71FAAEB4-45D9-430B-AAD9-8EDB824CC247}")
					} else {
						math(input: Count of File Folders, operand: "1") >> math
var 7EEAF6E8-7C6B-4904-B8F0-5E9EA4893EAF = """The folder name you selected was added to the following configuration file:

￼/￼

This file now includes ￼ folder names. This file can modified or deleted at any time if you no longer want to one or more of the folders."""
text("${7EEAF6E8-7C6B-4904-B8F0-5E9EA4893EAF}")
					}
				} >> IFResult 9
			} else {
				if(Count of File Folders false 1) {
var DA66E502-E554-4484-A3C1-2791D70F6AEA = """The ￼ folder names you selected were saved in the following new configuration file:

￼/￼

This file can modified or deleted at any time if you no longer want to use one or both of the folders."""
text("${DA66E502-E554-4484-A3C1-2791D70F6AEA}")
				} else {
					math(input: Count of Chosen Folders, operand: Count of File Folders) >> math 1
var 6AD2FB69-961D-440B-B6EE-A1E8865C23C9 = """The ￼ folder names you selected were added to the following configuration file:

￼/￼

This file now includes ￼ folder names. This file can modified or deleted at any time if you no longer want to use one or more of the folders."""
text("${6AD2FB69-961D-440B-B6EE-A1E8865C23C9}")
				}
			} >> IFResult 10
			alert(alert: "${If Result}", title: "", cancel: false)
		} >> IFResult 11
	} >> IFResult 12
} >> IFResult 13
setValue(key: "Restore Folders", value: "${RF.Combined}", dictionary: Dictionary) >> setValue 4
saveFile(input: Dictionary, ask: false, path: "${.P.key(Settings Path)}", overwrite: true) >> saveFile 1
/*
⚫️⚫️🔴⚫️⚫️🔴⚫️⚫️🔴⚫️⚫️

Check the settings file for 'Shortcuts to Restore'. If shortcuts are included, present an option to restore an item in the list.
*/
getFile(picker: false, path: "${.P.key(Settings Path)}") >> Settings File
keysFrom(dictionary: Settings File) >> Shortuts to Restore
count(input: Shortuts to Restore) >> Count Shortcuts to Restore
if(Count Shortcuts to Restore > 0) {
var mode = Variable
var task = Variable
	repeat(Count Shortcuts to Restore) {
		if(task == ""${.tasks.key(null)}"") {
			getItemFromList(list: Shortuts to Restore, type: Item At Index, index: Repeat Index) >> First Shortcut to Potentially Restore
			if(Repeat Index == Count Shortcuts to Restore) {
var B253B89F-F283-4B74-99B6-0069CEA3B8CC = """BEGIN:VCARD
VERSION:3.0
N;CHARSET=utf-8:Restore This Shortcut;;;;
ORG:;
PHOTO;ENCODING=b: ￼
END:VCARD

BEGIN:VCARD
VERSION:3.0
N;CHARSET=utf-8:Ignore This Shortcut;;;;
ORG:;
PHOTO;ENCODING=b: ￼
END:VCARD"""
text("${B253B89F-F283-4B74-99B6-0069CEA3B8CC}")
var menu = Text
var 63C474B7-ECF1-4428-B4EF-42285BEFA9B8 = """The following shortcut is set to be restored:

￼"""
text("${63C474B7-ECF1-4428-B4EF-42285BEFA9B8}")
			} else {
var 8411DC8D-8740-4A50-B1DA-806DFB776FB2 = """BEGIN:VCARD
VERSION:3.0
N;CHARSET=utf-8:Restore This Shortcut;;;;
ORG:;
PHOTO;ENCODING=b: ￼
END:VCARD

BEGIN:VCARD
VERSION:3.0
N;CHARSET=utf-8:Ignore This Shortcut￼;;;;
ORG:;
PHOTO;ENCODING=b: ￼
END:VCARD

BEGIN:VCARD
VERSION:3.0
N;CHARSET=utf-8:Ignore All Shortcuts;;;;
ORG:;
PHOTO;ENCODING=b: ￼
END:VCARD"""
text("${8411DC8D-8740-4A50-B1DA-806DFB776FB2}")
var menu = Text
				math(input: Count Shortcuts to Restore, operation: -, operand: Repeat Index) >> math 2
				if(Calculation Result false 2) {
var 5FF59D28-8221-4600-A6FF-1D12A0E4E075 = """The following shortcut is set to be restored:

￼

After this shortcut, there is 1 additional shortcut queued to be restored."""
text("${5FF59D28-8221-4600-A6FF-1D12A0E4E075}")
				} else {
var 36548C09-D459-482D-BEE2-ABA92A1FD378 = """The following shortcut is set to be restored:

￼

After this shortcut, there are ￼ additional shortcuts queued to be restored."""
text("${36548C09-D459-482D-BEE2-ABA92A1FD378}")
				} >> IFResult 14
			} >> Prompt
			setName(input: menu, name: "Menu.vcf") >> setName 1
			choose(list: Renamed Item, prompt: "${Prompt}") >> choose
			text(text: "${Chosen Item}") >> Chosen Item [Text]
			if(Chosen Item [Text] == "Restore This Shortcut") {
				getItemFromList(list: Shortuts to Restore, type: Items in Range, startIndex: Repeat Index) >> getItemFromList
var shortcuts = Item from List
var task = Variable
			} else {
				if(Chosen Item [Text] == ""Ignore This Shortcut${.SC.key(Invisible Character)}"") {
				} else {
var task = Variable
var mode = Variable
				}
			}
		} >> IFResult 15
	} >> RepeatResult 4
} >> IFResult 16
if(Count Shortcuts to Restore > 0) {
	number(value: 0)
	if(mode == ""${.modes.key(interactive)}"") {
		number(value: 1)
	} >> IFResult 17
	if(Count Shortcuts to Restore false 2) {
		number(value: 1)
	} >> IFResult 18
	if(If Result != 0) {
// Update the setting file by removing the 'Shortcut to Restore' key.
		dictionary({})
var UpdatedSettings = Dictionary
		keysFrom(dictionary: Settings File) >> keysFrom 6
		repeatEach(Dictionary Value) {
			if(Repeat Item == "Shortcuts to Restore") {
			} else {
				keysFrom(dictionary: Settings File) >> keysFrom 7
				setValue(key: "${Repeat Item}", value: "${Dictionary Value}", dictionary: Updated Settings) >> setValue 5
var UpdatedSettings = Dictionary
			}
		} >> RepeatResult 5
		saveFile(input: Updated Settings, ask: false, path: "${.P.key(Settings Path)}", overwrite: true)
	} >> IFResult 19
} >> IFResult 20
if(mode != ""${.modes.key(settings)}"") {
	getShortcuts() >> getShortcuts 1
var my_safe_shortcuts = My Shortcuts
	deviceDetails(detail: System Version) >> deviceDetails 1
	splitText(text: System Version, separator: Custom, customSeparator: ".") >> splitText 1
	count(input: Split Text) >> count 2
	if(Count false 3) {
		number(value: System Version)
	} else {
		getItemFromList(list: Split Text) >> First Item from List
		getItemFromList(list: Split Text, type: Item At Index, index: "2") >> Item 2 from List
		getItemFromList(list: Split Text, type: Item At Index, index: "3") >> Item 3 from List
		text(text: "${First Item from List}.${ActionOutput}${Item 2 from List}") >> text 3
		number(value: Text)
	} >> System Version [decimal]
	if(System Version [decimal] false 14.5) {
	} else {
		getFile(picker: false, path: "${.P.key(Exceptions Path)}", error: false) >> getFile 3
		if(File != nil) {
			splitText(text: File) >> splitText 2
			count(input: Split Text) >> count 3
var exception_count = Count
			repeatEach(Split Text) {
				filterFiles() >> filterFiles 1
var my_safe_shortcuts = Files
			}
		}
	} >> IFResult 21
}
// Main Menu (in Contact format)
var 95FB132D-9FEE-4DB3-8796-4DAEAF132B82 = """BEGIN:VCARD
VERSION:3.0
N;CHARSET=utf-8:Save Snapshot of My Shortcuts;;;;
ORG:to '￼/' folder;
PHOTO;ENCODING=b: ￼
END:VCARD

BEGIN:VCARD
VERSION:3.0
N;CHARSET=utf-8:Back Up Selected;;;;
ORG:to '￼/' folder;
PHOTO;ENCODING=b: ￼
END:VCARD

BEGIN:VCARD
VERSION:3.0
N;CHARSET=utf-8:Archive All;;;;
ORG:to '￼/' folder;
PHOTO;ENCODING=b: ￼
END:VCARD

BEGIN:VCARD
VERSION:3.0
N;CHARSET=utf-8:Archive Selected;;;;
ORG:to '￼/' folder;
PHOTO;ENCODING=b: ￼
END:VCARD

BEGIN:VCARD
VERSION:3.0
N;CHARSET=utf-8:Restore￼;;;;
ORG:from a selected folder;
PHOTO;ENCODING=b: ￼
END:VCARD

BEGIN:VCARD
VERSION:3.0
N;CHARSET=utf-8:Restore￼￼;;;;
ORG:from a zip archive;
PHOTO;ENCODING=b: ￼
END:VCARD

BEGIN:VCARD
VERSION:3.0
N;CHARSET=utf-8:Restore￼￼￼;;;
ORG:from an unarchive folder;
PHOTO;ENCODING=b: ￼
END:VCARD

BEGIN:VCARD
VERSION:3.0
N;CHARSET=utf-8:Restore One;;;
ORG:from a file browse;
PHOTO;ENCODING=b: ￼
END:VCARD

BEGIN:VCARD
VERSION:3.0
N;CHARSET=utf-8:Help;;;;
ORG:view full documentation;
PHOTO;ENCODING=b: ￼
END:VCARD

BEGIN:VCARD
VERSION:3.0
N;CHARSET=utf-8:Exit;;;;
ORG:exit this shortcut;
PHOTO;ENCODING=b: ￼
END:VCARD"""
text("${95FB132D-9FEE-4DB3-8796-4DAEAF132B82}")
setName(input: Text, name: "Menu.vcf") >> Menu
/*
⭕️▫️▫️  ▫️⭕️▫️  ▫️⭕️▫️  ⭕️⭕️▫️
⭕️▫️▫️  ⭕️▫️⭕️  ⭕️▫️⭕️  ⭕️▫️⭕️ 
⭕️▫️▫️  ⭕️▫️⭕️  ⭕️▫️⭕️  ⭕️⭕️▫️
⭕️▫️▫️  ⭕️▫️⭕️  ⭕️▫️⭕️  ⭕️▫️▫️
⭕️⭕️⭕️  ▫️⭕️▫️  ▫️⭕️▫️  ⭕️▫️▫️
*/
repeat(Dictionary) {
/*
There are two situations when the main menu should not be displayed:

1] mode = settings : above there was a check in the settings file for 'Shortcuts to Restore'. If one or more was found and the user specified to restore one, then the main menu will not be presented.

2] mode = input : if this shortcut is run from another and passed a Dictionary via the 'Shortcut Input.'
*/
	if(mode == ""${.modes.key(interactive)}"") {
		choose(list: Menu, prompt: "Select a Shortcut Operation:") >> choose 1
		changeCase(text: Chosen Item) >> changeCase 2
var operation = Updated Text
/*
Variables (that will depend on the 'Selected Menu Item'

select = 0 | 1
task = backup | archive | restore
source = shortcuts in My Shortcuts | shortcuts in zip or folder
shortcut = specified or selected shortcut
shortcuts = specified or selected shortcuts
*/
var select = Variable
var task = Variable
var source = Variable
//Unable to get shortcuts action is.workflow.actions.setvariable
//Unable to get shortcuts action is.workflow.actions.setvariable
		if(exception_count > 0) {
			number(value: .SC) >> number 2
		} else {
			number(value: .SC) >> number 3
		} >> IFResult 22
var skipping = If Result
	} else {
// When mode = input, operation is set via Input Dictionary.
	} >> IFResult 23
/*
🔴▫️▫️▫️🔴  ▫️🔴🔴🔴▫️
🔴🔴▫️🔴🔴  ▫️▫️🔴▫️▫️
🔴▫️🔴▫️🔴  ▫️▫️🔴▫️▫️
🔴▫️▫️▫️🔴  ▫️▫️🔴▫️▫️
🔴▫️▫️▫️🔴  ▫️🔴🔴🔴▫️

*/
	if(operation .contains "SNAPSHOT") {
		count(input: my_safe_shortcuts) >> My Shortcuts Count
		if(Supress Notifications != 1) {
			if(skipping == 1) {
				sendNotification(body: "${My Shortcuts Count} shortcuts are being saved (skipping ${ActionOutput}).", title: "", sound: false, attachment: My Shortcuts Count)
			} else {
				sendNotification(body: "${My Shortcuts Count} shortcuts are being saved.", title: "", sound: false)
			} >> IFResult 24
		} >> IFResult 25
		url(url: .P) >> url
		getFileOfType(input: URL, type: "public.directory") >> getFileOfType
		deleteFile(input: File of Type, confirm: false)
		createFolder(path: "${.P.key(Snapshot Folder)}")
var shortcuts = Variable
		saveFile(input: my_safe_shortcuts, ask: false, path: "${.P.key(Snapshot Folder)}") >> saveFile 2
		if(skipping == 1) {
			alert(alert: "${.P.key(App Root)} shortcuts in 𝗠𝘆 𝗦𝗵𝗼𝗿𝘁𝗰𝘂𝘁𝘀 were saved (${Variable.key(App Root)} skipped*) to:

${exception_count}/${Variable}/

All shortcuts previously in this folder were deleted.

*skipped:  ${.P.key(Snapshot Folder)}/${Variable.key(Snapshot Folder)}", title: "", cancel: false)
		} else {
			alert(alert: "All ${My Shortcuts Count} shortcuts in 𝗠𝘆 𝗦𝗵𝗼𝗿𝘁𝗰𝘂𝘁𝘀 were saved to:

${ActionOutput}/${.P.key(App Root)}/

All shortcuts previously in this folder were deleted.", title: "", cancel: false)
		} >> IFResult 26
	} >> IFResult 27
/*
🔴▫️▫️▫️🔴  ▫️🔴🔴🔴▫️
🔴🔴▫️🔴🔴  ▫️▫️🔴▫️▫️
🔴▫️🔴▫️🔴  ▫️▫️🔴▫️▫️
🔴▫️▫️▫️🔴  ▫️▫️🔴▫️▫️
🔴▫️▫️▫️🔴  ▫️🔴🔴🔴▫️
*/
	if(operation == "BACK UP SELECTED") {
var task = Variable
var source = Variable
var shortcuts = Variable
var select = Variable
	} >> IFResult 28
/*
🔴▫️▫️▫️🔴  ▫️🔴🔴🔴▫️
🔴🔴▫️🔴🔴  ▫️▫️🔴▫️▫️
🔴▫️🔴▫️🔴  ▫️▫️🔴▫️▫️
🔴▫️▫️▫️🔴  ▫️▫️🔴▫️▫️
🔴▫️▫️▫️🔴  ▫️🔴🔴🔴▫️
*/
	if(operation == "ARCHIVE ALL") {
		if(Supress Notifications != 1) {
			count(input: my_safe_shortcuts) >> count 4
			if(skipping == 1) {
				sendNotification(body: "${Count} shortcuts are being archived (skipping ${ActionOutput}).", title: "", sound: false, attachment: Count)
			} else {
				sendNotification(body: "${Count} shortcuts are being archived.", title: "", sound: false)
			} >> IFResult 29
		} >> IFResult 30
var task = Variable
var source = Variable
var shortcuts = Variable
	} >> IFResult 31
/*
🔴▫️▫️▫️🔴  ▫️🔴🔴🔴▫️
🔴🔴▫️🔴🔴  ▫️▫️🔴▫️▫️
🔴▫️🔴▫️🔴  ▫️▫️🔴▫️▫️
🔴▫️▫️▫️🔴  ▫️▫️🔴▫️▫️
🔴▫️▫️▫️🔴  ▫️🔴🔴🔴▫️
*/
	if(operation == "ARCHIVE SELECTED") {
var task = Variable
var source = Variable
var shortcuts = Variable
var select = Variable
	} >> IFResult 32
/*
🔴▫️▫️▫️🔴  ▫️🔴🔴🔴▫️
🔴🔴▫️🔴🔴  ▫️▫️🔴▫️▫️
🔴▫️🔴▫️🔴  ▫️▫️🔴▫️▫️
🔴▫️▫️▫️🔴  ▫️▫️🔴▫️▫️
🔴▫️▫️▫️🔴  ▫️🔴🔴🔴▫️
*/
	if(operation == ""RESTORE${.SC.key(Invisible Character)}"") {
// Restore from a selected folder.
var task = Variable
var D305618D-9E3F-4453-B5F8-9105A0D5DB56 = """Select a folder (in /iCloud Drive/Shortcuts/) that contains shortcut files:

Note: Folders can be (optionally) added to this list by changing a 𝗟𝗶𝘀𝘁 action in the shortcut."""
text("${D305618D-9E3F-4453-B5F8-9105A0D5DB56}")
		getFile(picker: false, path: "${.P.key(Settings Path)}") >> getFile 1
		keysFrom(dictionary: File) >> Restore Folders from Settings
		count(input: Folder List in Settings) >> count 5
		if(Count false 1) {
			alert(alert: "No folders have been specified in the 𝗟𝗶𝘀𝘁 action. See the Help for more information.", title: "", cancel: false)
		} else {
			if(Count false 2) {
				text(text: "${Folder List in Settings}")
			} else {
// Build a menu that, for each folder, includes a folder icon, and folder name.
				repeatEach(Folder List from Settings) {
var 082DF6E7-FA5B-4353-B98B-B0C2A9C1D610 = """BEGIN:VCARD
VERSION:3.0
N;CHARSET=utf-8:￼;;;;
ORG:shortcut folder;
PHOTO;ENCODING=b: ￼
END:VCARD
"""
text("${082DF6E7-FA5B-4353-B98B-B0C2A9C1D610}")
				} >> RepeatResult 6
				combineText(text: Repeat Results) >> combineText 1
				setName(input: Combined Text, name: "Menu.vcf") >> setName 2
				choose(list: Renamed Item, prompt: "${Text}") >> choose 2
				text(text: "${Chosen Item}")
			} >> Chosen Folder
			getFile(picker: false, path: "${Chosen Folder}") >> getFile 2
			if(File == nil) {
				alert(alert: "${.P.key(App Root)}/${Variable.key(App Root)} is empty.", title: "", cancel: true)
			} else {
				if(Chosen Folder == ""${.P.key(Develop Folder)}/"") {
//Unable to get shortcuts action is.workflow.actions.comment
					filterFiles() >> Shortcut Files Sorted
				} else {
					filterFiles()
				} >> IFResult 33
				count(type: If Result, input: Shortcut Files Sorted) >> count 6
				if(Count false 2) {
var 95E98D9B-76E6-4CA4-93AC-C802DF4EDCC1 = """To restore the shortcut, select it below:

*from folder: ￼/￼"""
text("${95E98D9B-76E6-4CA4-93AC-C802DF4EDCC1}")
				} else {
var 8EE2504A-B21D-48C6-A0F7-45653BE3509B = """Select one or more of the ￼ shortcuts* to restore:

*from folder: ￼/￼"""
text("${8EE2504A-B21D-48C6-A0F7-45653BE3509B}")
				} >> IFResult 34
				choose(list: If Result, prompt: "${If Result}", multiple: true) >> Chosen Shortcuts
				repeatEach(Chosen Shortcuts) {
					text(text: "${Repeat Item 2}${Variable}") >> text 4
//Unable to get shortcuts action is.workflow.actions.appendvariable
				} >> RepeatResult 7
			} >> IFResult 35
		} >> IFResult 36
	} >> IFResult 37
/*
🔴▫️▫️▫️🔴  ▫️🔴🔴🔴▫️
🔴🔴▫️🔴🔴  ▫️▫️🔴▫️▫️
🔴▫️🔴▫️🔴  ▫️▫️🔴▫️▫️
🔴▫️▫️▫️🔴  ▫️▫️🔴▫️▫️
🔴▫️▫️▫️🔴  ▫️🔴🔴🔴▫️ 
*/
	if(operation == ""RESTORE${.SC.key(Invisible Character)}${Variable.key(Invisible Character)}"") {
/*
Restore from a zip archive.

Note: As of iOS 13.5.1, shortcuts cannot return the name of subfolders in a folder. Thus as the unarchive folders are created below, their names are written to the settings file.
*/
var task = Variable
		getFile(picker: false, path: "${.P.key(Archive Folder)}", error: false) >> getFile 3
		if(File == nil) {
			alert(alert: "No zip files were found in the archive folder:

${.P.key(App Root)}/${Variable.key(App Root)}/

Create at least one archive before using this option.", title: "", cancel: false)
		} else {
			filterFiles() >> Files Sorted
			count(input: Files Sorted) >> count 7
			if(Count false 2) {
// No need to present a choice to the user. Just select the one zip file.
				getFile(picker: false, path: "${.P.key(Archive Folder)}") >> getFile 4
				filterFiles() >> filterFiles 2
			} else {
				if(Count > 10) {
var 3CF2D2F0-6CCB-4EA8-B2D6-6AC40087AADE = """
Note: Unneeded zip files can be deleted using the 𝙁𝙞𝙡𝙚𝙨 app."""
text("${3CF2D2F0-6CCB-4EA8-B2D6-6AC40087AADE}")
				} else {
					text()
				} >> IFResult 38
var 62FF9AA4-C24E-4AD4-8A74-6DFA7FBAD7C2 = """Select one of the archives* to unzip:

*from folder: ￼/￼/￼"""
text("${62FF9AA4-C24E-4AD4-8A74-6DFA7FBAD7C2}")
				repeatEach(Files Sorted) {
var B067003E-524D-4379-83D9-CAD57C8AEB1C = """BEGIN:VCARD
VERSION:3.0
N;CHARSET=utf-8:￼.zip;;;;
ORG:zip archive of shortcut files;
PHOTO;ENCODING=b: ￼
END:VCARD
"""
text("${B067003E-524D-4379-83D9-CAD57C8AEB1C}")
				} >> RepeatResult 8
				combineText(text: Repeat Results) >> combineText 2
				setName(input: Combined Text, name: "Menu.vcf") >> setName 3
				choose(list: Renamed Item, prompt: "${Prompt}") >> choose 3
				getFile(picker: false, path: "${.P.key(Archive Folder)}/${Variable.key(Archive Folder)}")
			} >> Specified Archive
			getName() >> Unarchive Folder
			if(Supress Notifications != 1) {
				sendNotification(body: "Unarchiving ${Specified Archive}.zip.", title: "", sound: false)
			} >> IFResult 39
			createFolder(path: "${Unarchive Folder}/${ActionOutput}")
			extractArchive(input: Specified Archive) >> extractArchive
			saveFile(input: Files, ask: false, path: "${Unarchive Folder}/${ActionOutput}", overwrite: true) >> saveFile 3
			wait(seconds: .SC)
			getFile(picker: false, path: "${Unarchive Folder}/${ActionOutput}") >> getFile 5
			filterFiles() >> Shortcut Files Sorted
			count(input: Shortcut Files Sorted) >> count 8
// Update Settings if the 'Unarchive Subfolder' is not already included included in the 'Unarchive Subfolders' dictionary (Key = subfolder name, Value = file count). 
			getFile(picker: false, path: "${.P.key(Settings Path)}") >> getFile 6
			keysFrom(dictionary: File) >> keysFrom 8
			keysFrom(dictionary: Dictionary Value) >> All Keys
// If the 'Unarchive Subfolder' is not already in the 'Unarchive Subfolders (Keys)' list is the settings, add it to the list.
var found = Variable
			repeatEach(All Keys) {
				if(Repeat Item 2 == ""${Unarchive Folder}"") {
var found = Variable
				} >> IFResult 40
			} >> RepeatResult 9
			if(found == .SC) {
				setValue(key: "${Unarchive Folder}", value: "${Count}", dictionary: Dictionary Value) >> setValue 6
				setValue(key: "Unarchive Folders", value: "${Dictionary}", dictionary: File) >> setValue 7
				saveFile(input: Dictionary, ask: false, path: "${.P.key(Settings Path)}", overwrite: true) >> saveFile 4
			} >> IFResult 41
			if(Count false 2) {
var 6C6E3675-4C1F-45E9-B483-322302574537 = """To restore the shortcut, select it below:

*from folder: ￼/￼/￼/"""
text("${6C6E3675-4C1F-45E9-B483-322302574537}")
			} else {
var 18BE1185-2BE2-4B25-B39A-04417E047A87 = """Select one or more of the ￼ shortcuts* to restore:

*from folder: ￼/￼/￼/"""
text("${18BE1185-2BE2-4B25-B39A-04417E047A87}")
			} >> IFResult 42
			choose(list: Shortcut Files Sorted, prompt: "${If Result}", multiple: true) >> Chosen Shortcuts
			repeatEach(Chosen Shortcuts) {
				text(text: "${.P.key(Unarchive Parent Folder)}/${Variable.key(Unarchive Parent Folder)}/${Repeat Item 2}") >> text 5
//Unable to get shortcuts action is.workflow.actions.appendvariable
			}
		} >> IFResult 43
	} >> IFResult 44
/*
🔴▫️▫️▫️🔴  ▫️🔴🔴🔴▫️
🔴🔴▫️🔴🔴  ▫️▫️🔴▫️▫️
🔴▫️🔴▫️🔴  ▫️▫️🔴▫️▫️
🔴▫️▫️▫️🔴  ▫️▫️🔴▫️▫️
🔴▫️▫️▫️🔴  ▫️🔴🔴🔴▫️
*/
	if(operation == ""RESTORE${.SC.key(Invisible Character)}${Variable.key(Invisible Character)}${.SC.key(Invisible Character)}"") {
// Restore from an unarchive folder
var task = Variable
// Open the settings file and read the 'Unarchive Folders'. If any of the folders are no longer present (or if any of the folders have not shortcuts -- in which case, delete the subfolder), update the settings file.
		getFile(picker: false, path: "${.P.key(Settings Path)}", error: false) >> Settings File
		keysFrom(dictionary: Settings File) >> keysFrom 9
		if(Dictionary Value == nil) {
			alert(alert: "There are no unarchive folders in:

${.P.key(App Root)}/${Variable.key(App Root)}/

Unarchive folders are created when the 𝗥𝗲𝘀𝘁𝗼𝗿𝗲 𝙛𝙧𝙤𝙢 𝙖 𝙯𝙞𝙥 𝙖𝙧𝙘𝙝𝙞𝙫𝙚 operation is used.", title: "", cancel: false)
		} else {
			dictionary({})
var UpdatedUnarchiveFolders = Dictionary
			keysFrom(dictionary: Dictionary Value) >> All Keys
			filterFiles() >> All Keys Sorted
			count(input: All Keys Sorted) >> count 9
			if(Supress Notifications != 1) {
				sendNotification(body: "Searching ${.P.key(Unarchive Parent Folder)}/ for subfolders with shortcuts.", title: "", sound: false)
			} >> IFResult 45
//Unable to get shortcuts action is.workflow.actions.setvariable
			repeatEach(All Keys Sorted) {
				getFile(picker: false, path: "${.P.key(Unarchive Parent Folder)}/${Variable.key(Unarchive Parent Folder)}", error: false) >> getFile 7
				getName() >> getName
				count(input: Name) >> count 10
				if(Count false 1) {
// Ideally it would be nice to delete the empty folder but, as of iOS 14 there is no way to delete a folder in shortcuts.
				} else {
					setValue(key: "${Repeat Item 2}", value: "${Count}", dictionary: Updated Unarchive Folders) >> setValue 8
var UpdatedUnarchiveFolders = Dictionary
var 64C324FD-A2B8-4677-A03A-96371C32BC93 = """BEGIN:VCARD
VERSION:3.0
N;CHARSET=utf-8:￼;;;;
ORG:folder contains ￼ shortcuts;
PHOTO;ENCODING=b: ￼
END:VCARD"""
text("${64C324FD-A2B8-4677-A03A-96371C32BC93}")
				} >> IFResult 46
			} >> RepeatResult 10
			combineText(text: Repeat Results) >> combineText 3
			if(Updated Unarchive Folders != nil) {
				setValue(key: "Unarchive Folders", value: "${Updated Unarchive Folders}", dictionary: Settings File) >> setValue 9
				saveFile(input: Dictionary, ask: false, path: "${.P.key(Settings Path)}", overwrite: true) >> saveFile 5
				keysFrom(dictionary: Updated Unarchive Folders) >> All Keys
				count(input: All Keys) >> count 11
				if(Count false 2) {
					text(text: "${All Keys}")
				} else {
var 319035EE-4C97-4AA4-9454-80220DF92EC9 = """Select one of the ￼ unarchive folders:

Unarchive folders are created when the 𝗥𝗲𝘀𝘁𝗼𝗿𝗲 𝙛𝙧𝙤𝙢 𝙖 𝙯𝙞𝙥 𝙖𝙧𝙘𝙝𝙞𝙫𝙚 operation is used."""
text("${319035EE-4C97-4AA4-9454-80220DF92EC9}")
					setName(input: Combined Text, name: "Menu.vcf") >> setName 4
					choose(list: Renamed Item, prompt: "${Text}")
				} >> Specified Unarchive Folder
				getFile(picker: false, path: "${Specified Unarchive Folder}/${ActionOutput}") >> getFile 8
				filterFiles() >> Files Sorted
				count(input: Files Sorted) >> count 12
				if(Count false 2) {
var CB28342F-C19F-4E8E-8211-84646D224089 = """To restore the shortcut, select it below:

*from folder: ￼/￼/￼/"""
text("${CB28342F-C19F-4E8E-8211-84646D224089}")
				} else {
var B11D7AB5-72D5-47E1-9E53-B0B6DF7C952D = """Select one or more of the ￼ shortcuts* to restore:

*from folder: ￼/￼/￼/"""
text("${B11D7AB5-72D5-47E1-9E53-B0B6DF7C952D}")
				} >> IFResult 47
				choose(list: Files Sorted, prompt: "${If Result}", multiple: true) >> choose 4
				repeatEach(Chosen Item) {
					text(text: "${.P.key(Unarchive Parent Folder)}/${Variable.key(Unarchive Parent Folder)}/${Repeat Item 2}") >> text 6
//Unable to get shortcuts action is.workflow.actions.appendvariable
				} >> RepeatResult 11
			} else {
// Delete Key: Unarchive Folders
				dictionary({})
var UpdatedSettings = Dictionary
				keysFrom(dictionary: Settings File) >> keysFrom 10
				repeatEach(Dictionary Value) {
					if(Repeat Item 2 == "Unarchive Folders") {
					} else {
						keysFrom(dictionary: Settings File) >> keysFrom 11
						setValue(key: "${Repeat Item 2}", value: "${Dictionary Value}", dictionary: Updated Settings) >> setValue 10
var UpdatedSettings = Dictionary
					}
				} >> RepeatResult 12
				saveFile(input: Updated Settings, ask: false, path: "${.P.key(Settings Path)}", overwrite: true) >> saveFile 6
				alert(alert: "There are no unarchive folders in:

${.P.key(App Root)}/${Variable.key(App Root)}/

Unarchive folders are created when the 𝗥𝗲𝘀𝘁𝗼𝗿𝗲 𝙛𝙧𝙤𝙢 𝙖 𝙯𝙞𝙥 operation is used.", title: "", cancel: false)
			} >> IFResult 48
		} >> IFResult 49
	} >> IFResult 50
/*
🔴▫️▫️▫️🔴  ▫️🔴🔴🔴▫️
🔴🔴▫️🔴🔴  ▫️▫️🔴▫️▫️
🔴▫️🔴▫️🔴  ▫️▫️🔴▫️▫️
🔴▫️▫️▫️🔴  ▫️▫️🔴▫️▫️
🔴▫️▫️▫️🔴  ▫️🔴🔴🔴▫️
*/
	if(operation == "RESTORE ONE") {
// Restore One from file browse
var task = Variable
		selectFile(multiple: false) >> selectFile
		count(input: File) >> Selected File Count
		filterFiles() >> Filtered Files
		count(input: Filtered Files) >> Filtered File Count
		if(Filtered File Count == 1) {
var shortcut = Filtered Files
		} else {
			if(Selected File Count == 1) {
				getName() >> getName 1
				fileDetail(input: File, property: File Extension) >> fileDetail
				alert(alert: "The selected a file (${Name}.${ActionOutput}) is not a shortcut.", title: "", cancel: false)
			}
		} >> IFResult 51
	} >> IFResult 52
/*
🔴▫️▫️▫️🔴  ▫️🔴🔴🔴▫️
🔴🔴▫️🔴🔴  ▫️▫️🔴▫️▫️
🔴▫️🔴▫️🔴  ▫️▫️🔴▫️▫️
🔴▫️▫️▫️🔴  ▫️▫️🔴▫️▫️
🔴▫️▫️▫️🔴  ▫️🔴🔴🔴▫️
*/
	if(operation == "HELP") {
var 03EB1EF0-FAD4-4798-A668-A9398D4968CD = """---

> This version of __BART__ has been tested with iPadOS 14.5 and 14.6 beta 2.
>
> Unfortunately, with iOS 14.5 (and thus far persisting with 14.6 betas), Apple introduced a new bug that generates an error when some shortcuts are written to the local iCloud Drive. If your *backups* and *archives* generate an error (specifically **An error occurred in the destination for the data.**), refer to the **iOS 14.5 Write Error** section below.

---

<center>![](https://i.imgur.com/F0tbZvS.png)</center>

###  Overview

__BART__ is a shortcut that can back up, archive, and restore shortcuts in the _Shortcuts_ app _Library_, also known as _My Shortcuts_. It is designed to be full-featured, yet simple and fast to use. In fact, most of the information below can be easily discovered by simply running the shortcut*. However if you prefer to read instructions and/or learn some of the finer points of __BART__, the following is for you.

\* There are a few significant exceptions. For example, running __BART__ from another shortcut, a very powerful yet easy to use feature, is not discoverable (unless you peer into the actions of the __BART__ 😀 ). Therefore, even if you have used the interactive features of __BART__, you'll find some very useful information beginning with the section __Running BART From Another Shortcut__.

_A video overview of [BART](https://routinehub.co/shortcut/4069) is available [here](https://www.youtube.com/playlist?list=PL5PEwdyatL4KtxN5kU3gJRyZyRjG5YSXa). Changes for __Version 2.0__ are highlighted in [this video](https://youtu.be/Yb1SwY7N7xo)._

---

###  So what's the point?

_Short answer:_ __It's always good to back up your work!__

_Long answer:_ _Stuff_ happens! On occasion, the iOS _Shortcuts_ app will display an error indicating that the database is corrupt. If _iCloud Sync_ (one of the _Shortcuts_ app settings) is set, the _Shortcuts_ app attempts to recreate _My Shortcuts_ after the error dialog is dismissed. Depending on the circumstances, this restoration can range from a _complete recovery_ to a _complete loss_ of all of the shortcuts in _My Shortcuts_. If not a _complete recovery_, shortcut backups are indispensable. Backups are also valuable during more common and frequent events, e.g., if a shortcut is mistakenly modified or deleted.

In addition to shortcut _protection_, backups can be employed to _manage_ shortcuts. For example, a user might find a group of shortcuts that are useful occasionally, but not want to clutter _My Shortcuts_ with these rarely used shortcuts. Such shortcuts could be _archived_ and _restored_ when needed.

---

### BART Main Menu
This section includes a short description for each _Shortcut Operation_ on the __BART__ main menu.

<center>![](https://i.imgur.com/Xo8Gl9E.png)</center>

![](https://i.imgur.com/nGEPr9N.png)  __Save Snapshot of My Shortcuts__ saves a copy of all shortcuts in _My Shortcuts_ to the _snapshot_ folder: /iCloud Drive/Shortcuts/__BART/Snapshot/__. All files previously in this folder are deleted before the shortcuts are copied to this folder. This is the fastest and simplest way to _back up_ _My Shortcuts_.

![](https://i.imgur.com/tZoJmhU.png) __Back Up Selected__ saves copy of one or more selected shortcuts in _My Shortcuts_ to the _backup_ folder: /iCloud Drive/Shortcuts/__BART/Backup/__. Shortcuts files in the folder __are written over__ if the selection includes shortcuts with the same names. 

Shortcuts previously backed up to the _backup_ folder and later deleted from _My Shortcuts_ are __not__ automatically deleted from the _backup_ folder. Thus over time, the _backup_ folder will likely contain a superset of shortcuts from _My Shortcuts_. 

![](https://i.imgur.com/QgoP3qB.png) __Archive All__ creates a zip archive of the shortcuts in _My Shortcuts_ and saves the file to the _archive_ folder: /iCloud Drive/Shortcuts/__BART/Archive/__. The archive is named based on the date/time and \#_x_ (where _x_ is the number of shortcuts in the new zip archive). For example, the following archive would include _102_ shortcuts: 2019-12-10-073522\_\#102.zip.

![](https://i.imgur.com/I4QdpVw.png) __Archive Selected__ creates a zip archive of one or more _selected_ shortcuts in _My Shortcuts_ and saves the file to the _archive_ folder: /iCloud Drive/Shortcuts/__BART/Archive/__. The archive is named based on the date/time and either: a) \#_x_ (where _x_ is a number _2_ to _n_ indicating the number of contained shortcuts), or b) _shortcutname_ (if only _one_ shortcut is selected). For example, the following archive would include _102_ shortcuts: 2019-12-10-073522\_\#102.zip and the following would include one shortcut named _xyz_: 2019-12-10-073522_xyz.zip.

![](https://i.imgur.com/Cs2yfeU.png) __Restore__ _(from a selected folder)_ displays a list of _specified_ folders that contain shortcut files. Once the user selects one of the folders, a second selection list is displayed with all of the shortcuts within the folder. If the user selects one or more of these shortcuts, they are restored to _My Shortcuts_.

By default, the folder list contains three folders in /iCloud Drive/Shortcuts/:

- __BART/Snapshot/__
- __BART/Backup/__
- __BART/Develop/__

Any other folder in __/iCloud Drive/Shortcuts/__ can be added to the list by adding it to a _List action_ within __BART__. This could be useful for users that have used another means to backup and/or organize shortcut backup files. __Note: All folder entries are case-sensitive!__

![](https://i.imgur.com/HhYFzW8.png) __Restore__ _(from a zip archive)_ displays a list of zip archives in the _archive_ folder: /iCloud Drive/Shortcuts/__BART/Archive/__. If a user selects one of the zip archives, the file is _unzipped_ into a new subfolder in the _unarchive_ folder: /iCloud Drive/Shortcuts/__BART/Unarchive/__. For example, if the user selected 2019-12-10-073522\_\#102.zip the archive would be unzipped into the following: /iCloud Drive/Shortcuts/BART/Unarchive/2019-12-10-073522\_\#102/. After the archive is unzipped, a second selection list is displayed with all of the shortcuts within the subfolder. If the user selects one or more shortcuts, they are restored to _My Shortcuts_.

![](https://i.imgur.com/o9BxY0B.png) __Restore__ _(from an unarchive folder)_ displays a list of subfolders in the _unarchive_ folder. If a user selects one of the subfolders, a second selection list is displayed with all of the shortcuts within the subfolder. If the user selects one or more shortcuts, they are restored to _My Shortcuts_.

This restoration operation would be used to recover a shortcut that was previously archived (using __Archive All__ or __Archive Selected__) and then subsequently unzipped using the __Restore__ _(from a zip archive)_ operation.

![](https://i.imgur.com/6fgDrvZ.png) __Restore One__ _(from a file browse)_ will open a file selection dialog to allow the user to select a shortcut file. The selected shortcut will be restored to _My Shortcuts_.

This restoration operation would likely be used infrequently as it is intended for files that were backed up prior to using __BART__. This method has the advantage of being more flexible in that the shortcut file can be located anywhere, not limited to _/iCloud Drive/Shortcuts/_. The disadvantage of this method is that only one shortcut can be selected per file browse.

![](https://i.imgur.com/HWlCWwX.png) __Help__ displays this information.

---

### Segregating Saved Files by iOS Device

By default, all files created by __BART__ are saved exactly as described in the above sections. This is appropriate if:

- only one iOS device is being used, or 
- if multiple devices are being used and [iCloud Sync](https://support.apple.com/guide/shortcuts/sync-shortcuts-apdb3a4240b0/ios) is ON for all devices (that use __BART__).

Conversely in cases where multiple iOS devices are being used and _iCloud Sync_ is not being used, it is recommended to segregate the __BART__ files. This change can be made when __BART__ is first downloaded or at anytime later using __Settings__ -> __Customize Shortcut__.

If _segregation_ is selected, the BART root folder becomes: /iCloud Drive/Shortcuts/BART/_device_name_. For example, if the device name is __My iPhone__, the folders mentioned in the previous section would be subfolders of __/iCloud Drive/Shortcuts/__:

- __BART/My iPhone/Snapshot/__
- __BART/My iPhone/Backup/__
- __BART/My iPhone/Archive/__
- __BART/My iPhone/Unarchive/__
- __BART/My iPhone/Develop/__

---

### Shortcut and Workflow Files
Shortcut files saved to _iCloud Drive_ by __BART__ include a _shortcut_ extension (e.g., xyz.shortcut). 

The _Shortcuts_ app is an updated version of _Workflow_, a third-party iOS app that Apple acquired in 2017. Although similar, this app included _workflows_, not _shortcuts_. Workflow files included a _wflow_ extension and, like shortcut files, can be restored using __BART__.

---

### Restoring Shortcuts

With iOS 13.x, the _Shortcuts_ app cannot restore/import a shortcut file directly from _iCloud Drive_. (This limitation did not exist with the iOS _Workflow_ app, but may have been added by Apple for security reasons.) Therefore to restore/import a shortcut, the shortcut file must first be uploaded to iCloud (in a public area established by Apple that is reserved for shortcuts). Once uploaded, a shortcut file can then be restored/imported within Safari by opening an iCloud link (to the uploaded shortcut file).

__BART__ automates the process described above. However once the link is opened in Safari, a user must complete the final step by selecting blue _Get Shortcut_ button that appears on the shorcut's Safari page. Because of a limitation with the _Shortcuts_ app, this final step cannot be completed if a shortcut is still running. Due to these constraints, only one shortcut can be automatically restored/imported _for each run_ of __BART__ (or any similar restoration shortcut). Therefore if the user selects more than one shortcut to restore, the first one will be restored during that run of __BART__; shortcuts 2 to _n_ will be queued up and ready to be restored, one at a time, with each subsequent run of __BART__.

---

###  Optional Management of iCloud Folders

As mentioned above, _snapshot_, _backup_, and _archive_ files are saved to _/iCloud Drive/Shortcuts/_ subfolders, specifically __BART/Snapshot/__, __BART/Backup/__, and __BART/Archive/__, respectively. In addition, __BART/Develop/__ houses copies of shortcuts that are modified using the __Develop__ operation. 

In general, the contents of these folders are managed automatically by __BART__, but in some cases the contents can be managed manually using the iOS _Files_ app or the macOS _Finder_. Specifically:

- Shortcuts no longer needed but previously backed up to __BART/Backup/__ can be manually deleted.

- Shortcuts files (\*.shortcut), and even old Workflow files (\*.wflow), can be manually added to __BART/Backup/__. These shortcuts (or workflows) can be restored using the __Restore__ _(from a selected folder)_ operation.

- As an alternative to the above bullet, old _Shortcuts_ app (or _Workflow_ app) backups could be managed in a separate folder(s) within _/iCloud Drive/Shortcuts/_. Files in this folder(s) can be restored using :

    1. __Restore One__ _(from a file browse)_.
    2. __Restore__ (from a selected folder). In this case, the _/iCloud Drive/Shortcuts/_ subfolder(s) would need to be added to the folder list using the _List_ action within the shortcut. This list appears near the top of __BART__ and includes a preceding comment. __Note: All folder entries are case-sensitive!__
    
- Unneeded zip archive files in __BART/Archive/__ can be deleted when they are no longer needed.

- Unneeded copies of shortcuts in __BART/Develop/__ can be deleted when they are no longer needed; however, older copies will be _automatically_ purged per the __Copies__ value when using the _Develop__ operation. See __Protection While Developing or Modifying Other Shortcuts__ for more information.)

- Older zip archives that include _shortcuts_ (or even _workflows_), that may have been created by some other means, can be manually added to __BART/Archive/__. __BART__ could then be used to process these archives just as it does for the archives that it creates.

- Unarchive subfolders in __BART/Unarchive/__ can be deleted (e.g., BART/Unarchive/2019-12-12-131131\_#109). Also, shortcuts no longer needed can be individually deleted from these subfolders.

- Note: Shortcuts files can be copied _from_ __BART/Snapshot/__, but since this folder is automatically managed by __BART__, the folder contents should not be modified.

---

### Running BART From Another Shortcut

__BART__ can be optionally started from another shortcut. This is also known as running __BART__ in _Input_ mode. This mode is useful because routine tasks can be automated and run consistently and quickly without user interaction with the __BART__ main menu. 

Before continuing, download these simple, example shortcuts:

1. [Snapshpt ➤ BART](https://www.icloud.com/shortcuts/2c17a3efcd204cb4838c024546141230) 
2. [Archive ALL ➤ BART](https://www.icloud.com/shortcuts/30f1a26563d34f408a08a1f8bde01c16)
3. [Back Up ➤ BART](https://www.icloud.com/shortcuts/422a8dafff1541b9b61800cf2bae8faa)
2. [Archive ➤ BART](https://www.icloud.com/shortcuts/11f1f074cc7542ba89e59e042f235bbf)

__Snapshpt ➤ BART__ and __Archive ALL ➤ BART__ can be used as is. For the other two, _Duplicate_ them to create a copy that can be modified for your use. For example, copy __Archive ➤ BART__ and name it __Archive (My Stuff) ➤ BART__. Then open __Archive (My Stuff) ➤ BART__ and continue reading.

To run __BART__ in this mode, the _calling_ shortcut needs two actions: __Dictionary__ and __Run Shortcut__. 

This __Dictionary__ information is used by __BART__ to determine the desired __Operation__ (in lieu of  user interaction with the __BART__ main menu). Depending on the __BART Operation__, the __Dictionary__ action must have _one_ or _two_ __Dictionary Items__: [_item 1:_ Key = __Operation__] or [_item 1:_ Key = __Operation__; _item 2:_ Key = __Shortcut__].

The following _one-item_ __BART__ __*Operations*__ are supported:

- __Dictionary__[_item 1:_ Key = __Operation__, Text = __Snapshot__]
- __Dictionary__[_item 1:_ Key = __Operation__, Text = __Archive All__]

And the following _two-item_ __BART__ __*Operations*__ are also supported:

- __Dictionary__[_item 1:_ Key = __Operation__, Text = __Back Up__; _item 2:_ Key = __Shortcut__, Text = _shortcut_name_]
- __Dictionary__[_item 1:_ Key = __Operation__, Text = __Archive__; _item 2:_ Key = __Shortcut__, Text = _shortcut_name_]]

As mentioned above, the above __Dictionary__ action must precede the __Run Shortcut__ action (specifically __Run[BART]__).

Note 1: In the second group of __BART Operations__, a third key [Key = __Shortcuts__] can  replace the second key [Key = __Shortcut__]. This must be employed when _backing up_ or _archiving_ more than _one_ shortcut with a single __Dictionary__/__Run[BART]__ pair. In this case, the __Dictionary__ _item_ must be an __Array__, with Key = __Shortcuts__, and the _shortcut_names_ are entered as separate __Text__ array _items_.

Note 2: If the __Dictionary__ includes __Shortcut__ (Text Key for __1__ _shortcut_name_) and __Shortcuts__ (Array Key for __1 or more__ _shortcut_names_), all _shortcut names_ will be used by __BART__.

---

### Shortcut Automation

The shortcuts mentioned in the previous section, __Running BART From Another Shortcut__, are great candidates for the _Shortcuts_ app __Automation__, also known as [personal automation](https://support.apple.com/guide/shortcuts/intro-to-personal-automation-apd690170742/ios) in the [Shortcuts User Guide](https://support.apple.com/guide/shortcuts/welcome/ios). As an example in the two following videos, __Archive ➤ BART__ is used to demonstrate how a full archive can be executed at 11:30/pm everyday.

- [Configuring BART Automation](https://youtu.be/JP7yBttYIXs)
- [Running BART Automation](https://youtu.be/_vWkivP_EZc)

---

### Protection While Developing or Modifying Other Shortcuts

__BART__ _Input_ mode _operations_ are discussed in a section above: __Running BART From Another Shortcut__. __BART__ includes one additional _operation_: __Develop__. This operation, however, is unique in that it is _not available_ when running __BART__ interactively.

__Develop__ is used to save a copy of a shortcut to the _develop_ folder (/iCloud Drive/Shortcuts/__BART/Develop/__) and then open the shortcut in the _Shortcut_ app editor. Then, if needed (e.g., if a large block of actions is mistakenly deleted during the editing session), the saved copy can be restored using __BART__ interactively (using __Restore from selected folder__).

Before continuing, with the following shortcut, download, _Duplicate_, and open your copy: 

* [Develop ➤ BART](https://www.icloud.com/shortcuts/ce4de6396e9f43c8be587254ba1929b2)

Note that this is an example that specifies three shortcuts: __Brush Teeth Timer__, __Log Water__, __Tea Timer__, selected in the example simply because they are available in the _Shortcuts_ app _Gallery_. In the __Dictionary__ action:

* _item 1:_ Key = __Operation__, Text = __Develop__ 
* _item 2:_ Key = __Shortcut__, Text = __Log Water__
* _item 3:_ Key = __Shortcuts__ (an _Array_), _item 1:_ = __Log Water__
* _item 4:_ Key = __Copies__, Number = _n_
* _item 5:_ Key = __Notify__, Number = __0__ or __1__ (for __No__ or __Yes__)

__BART__ combines the single name in __Shortcut__ key with the one or more names in __Shortcuts__ key. After the keys are combined, if the list contains more than one shortcut name, __BART__ will generate a __Choose from List__ so that the  shortcut of interest at that particular time can be selected. This is helpful if there is a set of shortcuts that are regularly opened in the _Shortcuts_ app editor.

If only one shortcut name is specified, then __BART__ will copy the shortcut and open it in the editor, i.e., the __Choose from List__ will not appear.

_PRO Tip: One can specify commonly edited shortcuts in the __Shortcuts__ key. Then in a case where there will be many editing sessions with one shortcut, the __Shortcut__ key could be used and the __Shortcuts__ key could be renamed to __xShortcuts__. That way, the __Choose from List__ would be bypassed during the focused work on the single shortcut._

The __Copies__ key defines how many copies of a shortcut will be retained in the _develop_ folder. If this key is not specified, the default value (defined in __BART__) will be used. Older copies in excess of this setting will be automatically deleted from the _develop_ folder.

The __Notify__ key determines if __BART__ will generate a notification when the shortcut is copied. If this key is not specified, __BART__ will use its __Suppress Notifications?__ Configuration Parameter to determine if a notification should be generated. 

---

### iOS 14.5 Write Error

With iOS 14.5, Apple introduced a new bug that generates an error when some shortcuts are written to the local *iCloud Drive*:

> **An error occurred in the destination for the data.**
> The data couldn't be written because of a error in the destination for the data.

If this error is observed during **BART** bakups and archives, download and run [Identify iOS 14.5 Problematic Shortcuts](https://routinehub.co/shortcut/9007/). When all of the problematic shortcuts are identified, the names will be written to a file named **Shortcuts • Error Saving.txt** (folder: **/iCloud Drive/Shortcuts/
Identify iOS 14.5 Problematic Shortcuts/**). Once this file is created, **BART** will use it and exclude the problematic shortcuts.

Since entries in  **Shortcuts • Error Saving.txt** will not be saved by **BART**, you might want to manually back up these shortcuts using [Copy iCloud Link](https://support.apple.com/guide/shortcuts/share-shortcuts-apdf01f8c054/ios) and saving the links for use in the event it becomes necessary to restore one of the problematic shortcuts.

If/when Apple addresses this bug, **BART** will be modified to ignore **Shortcuts • Error Saving.txt**.

---

###  Shortcut Testing

[BART](https://routinehub.co/shortcut/4069), Version ￼, has been tested with the following:

* iOS ￼
* iPhone 8 Plus
* iPad Pro 10.5"
* _Shortcuts_ app Libraries exceeding 1000 shortcuts 

---

### Shortcut Development and Acknowledgments

- __BART__ is available exclusively at [RoutineHub.co](https://routinehub.co). Versions obtained elsewhere might be out-of-date.

- The framed screenshots were created using the shortcut __Apple Frames (iOS)__ from the [MacStories Shortcuts Archive](https://www.macstories.net/shortcuts/).

- The menus in this shortcut use Apple [SF Symbols](https://developer.apple.com/design/human-interface-guidelines/sf-symbols/overview/) that were encoded using another shortcut [SF Symbol for vCard Menu](https://routinehub.co/shortcut/4254). That shortcut uses the _Create Icon_ action included in the premium version of [Toolbox Pro](https://toolboxpro.app).

- __BART__ checks for updates of itself every 7 days using [Embed-a-Update](https://routinehub.co/shortcut/2672) (Version: 1.1.2, Updated: 10/13/19)."""
text("${03EB1EF0-FAD4-4798-A668-A9398D4968CD}")
		richTextFromMarkdown(markdown: Markdown Text) >> richTextFromMarkdown
		htmlFromRichText(text: Rich Text from Markdown, fullDocument: false) >> htmlFromRichText
var 638BE8EF-98B6-4B7F-B923-3F40F33BF5B4 = """/* For the entire document, set to an easy to read font. */ 
html {
	font-family: sans-serif;
}
body {
	margin-left: 3%;
	margin-right: 3%;
	color: #636774;
}
h1, h2, h3, h4 {
	color: black;
}
/* For iPhones up to Xs Max size, increase the font size when in portrait mode. */
@media only screen and (max-device-width : 414px) and (orientation : portrait) {
	html {
	font-size: 200%;
	}
}"""
text("${638BE8EF-98B6-4B7F-B923-3F40F33BF5B4}")
var 77B46FAE-2854-4C56-B255-D6FA439D6739 = """<!DOCTYPE html>
<html>
<head>
<meta name="format-detection" content="telephone=no">
<meta http-equiv="content-type" content="text/html; charset=UTF-8">
<title>￼ Help</title>
<style>￼</style>
<body>
<h2 align="center">￼ Help</h2>
<p align="center"><i>￼ • ￼ </i></p>
￼
</body>
</html>"""
text("${77B46FAE-2854-4C56-B255-D6FA439D6739}")
		decode(input: Text) >> decode
		url(url: "data:text/html;base64,${Base64 Encoded}") >> url 1
		openURL(url: URL)
		output(result: "${URL}")
	} >> IFResult 53
/*
🔴▫️▫️▫️🔴  ▫️🔴🔴🔴▫️
🔴🔴▫️🔴🔴  ▫️▫️🔴▫️▫️
🔴▫️🔴▫️🔴  ▫️▫️🔴▫️▫️
🔴▫️▫️▫️🔴  ▫️▫️🔴▫️▫️
🔴▫️▫️▫️🔴  ▫️🔴🔴🔴▫️
*/
	if(operation == "EXIT") {
		exit()
	} >> IFResult 54
/*
▫️🟢🟢   🟢▫️🟢   🟢🟢▫️
🟢▫️▫️   🟢▫️🟢   🟢▫️🟢
▫️🟢▫️   🟢▫️🟢   🟢🟢▫️
▫️▫️🟢   🟢▫️🟢   🟢▫️🟢
🟢🟢▫️   🟢🟢🟢.  🟢🟢▫️
*/
	if(select == "1") {
/*
⚫️⚫️🔴⚫️⚫️🔴⚫️⚫️🔴⚫️⚫️

Select a subset of shortcuts.
*/
		text(text: "𝗠𝘆 𝗦𝗵𝗼𝗿𝘁𝗰𝘂𝘁𝘀") >> Shortcut Selection Set Label
		filterFiles() >> Shortcut Selection Set (sorted)
		count(type: Items, input: Shortcut Selection Set (sorted)) >> count 13
		if(skipping == 1) {
			text(text: "Choose 1 to ${task} shortcuts (${Variable} excluded) to ${exception_count}:") >> text 7
		} else {
			text(text: "Choose 1 to ${task} shortcuts to ${Variable}:") >> text 8
		} >> Prompt
		if(Count false 1) {
			if(Supress Notifications != 1) {
				sendNotification(body: "No shortcuts found in ${Shortcut Selection Set Label}.", title: "", sound: false)
			} >> IFResult 55
			nothing()
		} else {
			if(Count false 2) {
				if(Supress Notifications != 1) {
					sendNotification(body: "1 shortcut found in ${Shortcut Selection Set Label}.", title: "", sound: false)
				} >> IFResult 56
				filterFiles() >> filterFiles 3
			} else {
				if(Supress Notifications != 1) {
					if(skipping == 1) {
						sendNotification(body: "${Shortcut Selection Set Label} shortcuts found (minus ${ActionOutput} excluded) in ${exception_count}.", title: "", sound: false)
					} else {
						sendNotification(body: "${Shortcut Selection Set Label} shortcuts found in ${ActionOutput}.", title: "", sound: false, attachment: Prompt)
					} >> IFResult 57
					wait(seconds: 2)
				} >> IFResult 58
var EB7A5395-ECEB-4B52-9EC2-6DCE6D70839C = """𝖲𝗉𝖾𝖼𝗂𝖿𝗒 𝗈𝗇𝖾 𝗈𝖿 𝘁𝗵𝗿𝗲𝗲 𝗼𝗽𝘁𝗶𝗼𝗻𝘀:
➀ 𝗹𝗲𝗮𝘃𝗲 𝗯𝗹𝗮𝗻𝗸 ➙ 𝘢𝘭𝘭 𝘴𝘩𝘰𝘳𝘵𝘤𝘶𝘵𝘴, 𝗮𝗹𝗹 𝗉𝗋𝖾𝗌𝖾𝗅𝖾𝖼𝗍𝖾𝖽
➁ 𝗮 𝘀𝗽𝗮𝗰𝗲 ➙ 𝘢𝘭𝘭 𝘴𝘩𝘰𝘳𝘵𝘤𝘶𝘵𝘴, 𝗻𝗼𝗻𝗲 𝗉𝗋𝖾𝗌𝖾𝗅𝖾𝖼𝗍𝖾𝖽
➂ 𝙩𝙚𝙭𝙩 ➙ 𝘴𝘩𝘰𝘳𝘵𝘤𝘶𝘵𝘴 𝗐𝗂𝗍𝗁 𝖺 𝗇𝖺𝗆𝖾 𝖼𝗈𝗇𝗍𝖺𝗂𝗇𝗂𝗇𝗀 𝙩𝙚𝙭𝙩"""
text("${EB7A5395-ECEB-4B52-9EC2-6DCE6D70839C}")
				askForInput(prompt: "${Text}", type: Text) >> Specified Shortcut Name Filter
				count(type: Characters, input: Specified Shortcut Name Filter) >> count 14
				if(Count false true) {
// ➀ 𝗹𝗲𝗮𝘃𝗲 𝗯𝗹𝗮𝗻𝗸 ➙ 𝘢𝘭𝘭 𝘴𝘩𝘰𝘳𝘵𝘤𝘶𝘵𝘴, 𝗮𝗹𝗹 𝗉𝗋𝖾𝗌𝖾𝗅𝖾𝖼𝗍𝖾𝖽
					choose(list: Shortcut Selection Set (sorted), prompt: "${Prompt}", multiple: true, all: true) >> choose 5
				} else {
					replaceText(input: "${Specified Shortcut Name Filter}", find: "^[ \s]+|[ \s]+$", isRegex: true, caseSensitive: false) >> Specified Shortcut Name Filter [trimmed]
					count(type: Characters, input: Specified Shortcut Name Filter [trimmed]) >> count 15
					if(Count == "0") {
// ➁ 𝗮 𝘀𝗽𝗮𝗰𝗲 ➙ 𝘢𝘭𝘭 𝘴𝘩𝘰𝘳𝘵𝘤𝘶𝘵𝘴, 𝗻𝗼𝗻𝗲 𝗉𝗋𝖾𝗌𝖾𝗅𝖾𝖼𝗍𝖾𝖽
						choose(list: Shortcut Selection Set (sorted), prompt: "${Prompt}", multiple: true) >> choose 6
					} else {
// ➂ 𝙩𝙚𝙭𝙩 ➙ 𝘴𝘩𝘰𝘳𝘵𝘤𝘶𝘵𝘴 𝗐𝗂𝗍𝗁 𝖺 𝗇𝖺𝗆𝖾 𝖼𝗈𝗇𝗍𝖺𝗂𝗇𝗂𝗇𝗀 𝙩𝙚𝙭𝙩
//Unable to get shortcuts action is.workflow.actions.setvariable
						repeatEach(Shortcut Selection Set (sorted)) {
							getName() >> getName 2
							replaceText(input: "${Name}", find: "${Specified Shortcut Name Filter [trimmed]}", isRegex: false, caseSensitive: false) >> replaceText 1
							if(Updated Text != ""${Name}"") {
//Unable to get shortcuts action is.workflow.actions.appendvariable
							}
						} >> RepeatResult 13
						count(type: Items, input: matchedSCs) >> count 16
						if(Count false true) {
							alert(alert: "No shortcuts in ${Shortcut Selection Set} match your specification (${ActionOutput}).", title: "", cancel: false)
							nothing()
						} else {
// One or more matches.
							if(Count false 2) {
								text(text: "1 match. Choose to ${task}:") >> text 9
							} else {
								text(text: "${Count} matches. Choose 1 or more to ${ActionOutput}:")
							} >> IFResult 59
							choose(list: matchedSCs, prompt: "${If Result}", multiple: true, all: true)
						}
					}
				} >> IFResult 60
			} >> IFResult 61
		} >> IFResult 62
var shortcuts = If Result
var skipping = Variable
	} >> IFResult 63
/*
▫️🟢🟢   🟢▫️🟢   🟢🟢▫️
🟢▫️▫️   🟢▫️🟢   🟢▫️🟢
▫️🟢▫️   🟢▫️🟢   🟢🟢▫️
▫️▫️🟢   🟢▫️🟢   🟢▫️🟢
🟢🟢▫️   🟢🟢🟢.  🟢🟢▫️
*/
	if(task == "backup") {
		count(input: shortcuts) >> shortcuts Count
		if(shortcuts Count > 0) {
/*
Seconds for iCloud Refresh

(This number produces a delay below. 'Repeat 1 time' loop below for more information.)
*/
			number(value: .SC) >> number 4
			if(Number false 4) {
				text(text: "")
			} else {
var 8E8CAD1C-F23A-4EAC-8285-C0802BED2875 = """

Note: The backup process will take at least ￼ seconds."""
text("${8E8CAD1C-F23A-4EAC-8285-C0802BED2875}")
			} >> Performance Note
			getFile(picker: false, path: "${.P.key(Backup Folder)}", error: false) >> getFile 9
			filterFiles() >> Shortcut Files
			count(input: Shortcut Files) >> Start Count
			if(Start Count false 1) {
				text(text: "")
			} else {
				if(Start Count false 2) {
var 15D49A42-4BC2-405B-8149-91E806FD55E9 = """

This backup folder already contains 1 shortcut file.

‼️ ALERT ‼️
IF YOU CONTINUE, THIS SHORTCUT FILE WILL BE WRITTEN OVER (IF THE SHORTCUT LIST INCLUDES A SHORTCUT WITH THE SAME NAME.)"""
text("${15D49A42-4BC2-405B-8149-91E806FD55E9}")
				} else {
					if(Start Count <= shortcuts Count) {
						number(value: Start Count)
					} else {
						number(value: shortcuts Count)
					} >> IFResult 64
var 885526A9-6073-4718-97A8-2840B5E8A89B = """

This backup folder already contains ￼ shortcut files.

‼️ ALERT ‼️
IF YOU CONTINUE, UP TO ￼ SHORTCUT FILES WILL BE WRITTEN OVER (IF THE SHORTCUT LIST INCLUDES SHORTCUTS WITH THE SAME NAMES)."""
text("${885526A9-6073-4718-97A8-2840B5E8A89B}")
				}
			} >> Directory Status
			if(shortcuts Count == 1) {
				alert(alert: "1 shortcut will be backed up to:

${Performance Note}/${ActionOutput}/${Directory Status}${ActionOutput}", title: "", cancel: true)
				if(Supress Notifications != 1) {
					sendNotification(body: "1 shortcut is being backed up.", title: "", sound: false)
				} >> IFResult 65
			} else {
				if(skipping == 1) {
					alert(alert: "${.P.key(App Root)} shortcuts will be backed up (skipping ${Variable.key(App Root)}*) to:

${.P.key(Exceptions Path)}/${Variable.key(Exceptions Path)}/${.P.key(App Root)}${Variable.key(App Root)}

*skipped: ${exception_count}/${Variable}", title: "", cancel: true)
				} else {
					alert(alert: "${shortcuts Count} shortcuts will be backed up to:

${ActionOutput}/${.P.key(Backup Folder)}/${Variable.key(Backup Folder)}${.P.key(App Root)}", title: "", cancel: true)
				} >> IFResult 66
				if(Supress Notifications != 1) {
					if(skipping == 1) {
						sendNotification(body: "${exception_count} shortcuts are being backed up (skipping ${Variable}).", title: "", sound: false)
					} else {
						sendNotification(body: "${shortcuts Count} shortcuts are being backed up.", title: "", sound: false, attachment: If Result)
					} >> IFResult 67
				} >> IFResult 68
			} >> IFResult 69
			createFolder(path: "${.P.key(Backup Folder)}")
			saveFile(input: shortcuts, ask: false, path: "${.P.key(Backup Folder)}", overwrite: true)
/*
Counts below can sometimes be incorrect if there is no delay between writing the files (action above) and counting the entries in the folder (below this 'Repeat 1 time' loop.) 

All of the statements in the following Repeat loop (1 time) are added to maximize the probability that the counts are correct when the 'full accounting' is reported.

If the accounting below is not reliable try increasing 'Backup (secs for iCloud refresh)' (a Number in the main shortcut Dictionary).
*/
			repeat($0) {
				repeat(.SC) {
					createFolder(path: "${.P.key(Backup Folder)}")
					getFile(picker: false, path: "${.P.key(Backup Folder)}")
					wait()
				} >> RepeatResult 14
				if(shortcuts Count false 2) {
					text(text: "1 shortcut was backed up to:")
				} else {
					if(skipping == 1) {
						text(text: "${exception_count} shortcuts were backed up (${Variable} skipped) to:")
					} else {
						text(text: "${shortcuts Count} shortcuts were backed up to:")
					}
				} >> IFResult 70
				if(skipping == 1) {
					alert(alert: "${If Result}

${ActionOutput}/${.P.key(Backup Folder)}/

*skipped: ${Variable.key(Backup Folder)}/${.P.key(Exceptions Path)}

Select OK to view the full accounting.", title: "", cancel: false)
				} else {
					alert(alert: "${If Result}

${ActionOutput}/${.P.key(Backup Folder)}/

Select OK to view the full accounting.", title: "", cancel: false)
				} >> IFResult 71
			} >> RepeatResult 15
			getFile(picker: false, path: "${.P.key(Backup Folder)}", error: false) >> getFile 10
			count(input: File) >> End All File Types Count
			filterFiles() >> Shortcut Files
			count(input: Shortcut Files) >> End Shortcut File Count
			math(input: End Shortcut File Count, operation: -, operand: shortcuts Count) >> Untouched Shortcut File Count
			math(input: Untouched Shortcut File Count, operation: -, operand: Start Count) >> math 3
			math(input: Calculation Result, operation: *, operand: "-1") >> Written Over Shortcut File Count
			if(Written Over Shortcut File Count false 1) {
				text(text: "")
			} else {
				if(Written Over Shortcut File Count false 2) {
var FC6E683E-F138-4901-857D-1D6C07CEC5A3 = """

1 existing shortcut file in the folder was written over."""
text("${FC6E683E-F138-4901-857D-1D6C07CEC5A3}")
				} else {
var D83F6253-EDE5-4867-9FA2-972E0A5E90B0 = """

￼ existing shortcut files in the folder were written over."""
text("${D83F6253-EDE5-4867-9FA2-972E0A5E90B0}")
				}
			} >> Written Over Shortcut File Footnote
			if(Untouched Shortcut File Count false 1) {
				text(text: "${Written Over Shortcut File Footnote}")
			} else {
				if(Untouched Shortcut File Count false 2) {
var 1C629C4F-BEDC-4E97-9390-390BD0489F06 = """￼
1 existing shortcut file (with a different shortcut name) was untouched and remains in the folder."""
text("${1C629C4F-BEDC-4E97-9390-390BD0489F06}")
				} else {
var 38DDA159-E0A0-4616-8F65-A96B8F2F0AE6 = """￼
￼ existing shortcut files (with different shortcut names) were untouched and remain in the folder."""
text("${38DDA159-E0A0-4616-8F65-A96B8F2F0AE6}")
				}
			} >> Shortcut Accounting
			if(End All File Types Count false 1) {
var FA907787-4AB4-4A0A-B057-1BA764A8063D = """

The folder includes 0 files."""
text("${FA907787-4AB4-4A0A-B057-1BA764A8063D}")
			} else {
				if(End All File Types Count false 2) {
var 338F8DF1-2BA3-41D6-8747-878D94B4A311 = """

The folder includes only one 1 file."""
text("${338F8DF1-2BA3-41D6-8747-878D94B4A311}")
				} else {
var 7380B348-1534-4298-99CD-B6932787559B = """

The folder includes a total of ￼ files."""
text("${7380B348-1534-4298-99CD-B6932787559B}")
				}
			} >> All File Types Accounting
			alert(alert: "${If Result}

${ActionOutput}/${Shortcut Accounting}/${ActionOutput}${.P.key(Backup Folder)}", title: "", cancel: false)
		} >> IFResult 72
	} >> IFResult 73
/*
▫️🟢🟢   🟢▫️🟢   🟢🟢▫️
🟢▫️▫️   🟢▫️🟢   🟢▫️🟢
▫️🟢▫️   🟢▫️🟢   🟢🟢▫️
▫️▫️🟢   🟢▫️🟢   🟢▫️🟢
🟢🟢▫️   🟢🟢🟢.  🟢🟢▫️
*/
	if(task == ""${.tasks.key(archive)}"") {
		count(input: shortcuts) >> shortcuts Count
		if(shortcuts Count > 0) {
			if(shortcuts Count == 1) {
				text(text: "${shortcuts}")
			} else {
				text(text: "#${shortcuts Count}")
			} >> Suffix
			formatDate(date: "${CurrentDate}", dStyle: Custom, custom: "yyyy-MM-dd-HHmmss") >> formatDate
			createFolder(path: "${.P.key(Archive Folder)}")
			makeArchive(input: shortcuts) >> makeArchive
			saveFile(input: Archive, ask: false, path: "${Formatted Date}/${ActionOutput}_${.P.key(Archive Folder)}") >> saveFile 7
			if(shortcuts Count false 2) {
				text(text: "1 shortcut was archived to:")
			} else {
				if(skipping == 1) {
					text(text: "${exception_count} shortcuts were archived (${Variable} skipped*) to:")
				} else {
					text(text: "${shortcuts Count} shortcuts were archived to:")
				}
			} >> IFResult 74
			if(skipping == 1) {
				alert(alert: "${If Result}

${ActionOutput}_${.P.key(App Root)}.zip

in ${Variable.key(App Root)}/${.P.key(Exceptions Path)}/

*skipped: ${Variable.key(Exceptions Path)}/${.P.key(Archive Folder)}", title: "", cancel: false)
			} else {
				alert(alert: "${.P.key(App Root)}

${Variable.key(App Root)}_${Formatted Date}.zip

in ${ActionOutput}/${If Result}/", title: "", cancel: false)
			} >> IFResult 75
		} >> IFResult 76
	} >> IFResult 77
/*
▫️🟢🟢   🟢▫️🟢   🟢🟢▫️
🟢▫️▫️   🟢▫️🟢   🟢▫️🟢
▫️🟢▫️   🟢▫️🟢   🟢🟢▫️
▫️▫️🟢   🟢▫️🟢   🟢▫️🟢
🟢🟢▫️   🟢🟢🟢.  🟢🟢▫️
*/
	if(task == ""${.tasks.key(develop)}"") {
		count(input: shortcuts) >> Count Shortcuts
		if(Count Shortcuts > 1) {
			filterFiles() >> Shortcuts Sorted
var 2A7B3560-C80B-45B7-AAEF-9895AE08BD1A = """⚙︎ 𝗗𝗲𝘃𝗲𝗹𝗼𝗽 𝗦𝗲𝘁𝘁𝗶𝗻𝗴𝘀 ⚙︎
Copies to be Retained: ￼
iOS Notification When Copied: ￼
┈ ┈ ┈ ┈ ┈ ┈ ┈ ┈ ┈ ┈ ┈ ┈
Choose 1 of the ￼ shortcuts to Develop:"""
text("${2A7B3560-C80B-45B7-AAEF-9895AE08BD1A}")
			choose(list: Shortcuts Sorted, prompt: " ${Text}") >> choose 7
		} else {
//Unable to get shortcuts action is.workflow.actions.appendvariable
		} >> IFResult 78
		getName() >> Name
		formatDate(date: "${CurrentDate}", dStyle: Custom, custom: "MMdd-HHmm-ss") >> Formatted Current Date (MMdd-HHmm-ss)
		text(text: "${Name}➤${ActionOutput}") >> Shortcut Name_Date
		createFolder(path: "${.P.key(Develop Folder)}")
		getFile(picker: false, path: "${.P.key(Develop Folder)}") >> getFile 11
		filterFiles() >> filterFiles 4
		count(input: Files) >> count 17
		math(input: Count, operation: -, operand: If Result) >> math 4
		math(input: Calculation Result, operand: "1") >> math 5
		if(Calculation Result > 0) {
			repeat(Calculation Result) {
				getItemFromList(list: Files, type: Item At Index, index: Repeat Index 2) >> getItemFromList 1
				deleteFile(input: Item from List, confirm: false)
			} >> RepeatResult 16
		} >> IFResult 79
		saveFile(input: If Result, ask: false, path: "${.P.key(Develop Folder)}/${Variable.key(Develop Folder)}.shortcut") >> saveFile 8
		if(Notify == 1) {
			sendNotification(body: "/Shortcuts/${Shortcut Name_Date}/${ActionOutput} created.", title: "", sound: false, attachment: Saved File)
			wait(seconds: 3)
		} >> IFResult 80
		encodeURL(url: "${Name}") >> encodeURL
		text(text: "shortcuts://open-shortcut?name=${URL Encoded Text}") >> text 10
		output(result: "${Text}")
	}
/*
▫️🟢🟢   🟢▫️🟢   🟢🟢▫️
🟢▫️▫️   🟢▫️🟢   🟢▫️🟢
▫️🟢▫️   🟢▫️🟢   🟢🟢▫️
▫️▫️🟢   🟢▫️🟢   🟢▫️🟢
🟢🟢▫️   🟢🟢🟢.  🟢🟢▫️
*/
	if(task == ""${.tasks.key(restore)}"") {
		count(input: shortcut) >> Count shortcut
		count(input: shortcuts) >> Count shortcuts
		math(input: Count shortcut, operand: Count shortcuts) >> Count Both
		if(Count Both false 1) {
var task = Variable
		} else {
			deviceDetails(detail: System Version) >> deviceDetails 2
			if(Count shortcut > 0) {
				getName() >> getName 3
var shortcutname = Name
// Add action (with null) is a work-around since the iOS 13 version of the Shortcuts app no longer has a 'Get Variable' action. 
//Unable to get shortcuts action is.workflow.actions.appendvariable
			} else {
				if(Count shortcuts >= 2) {
// Determine if a restore alert should be displayed based on the number of days that have elapsed since it was last displayed.
					number(value: .SC) >> number 5
					if(Number > 0) {
						getFile(picker: false, path: "${.P.key(Settings Path)}") >> getFile 12
						keysFrom(dictionary: File) >> keysFrom 12
						getDateFrom(input: Dictionary Value) >> getDateFrom
						if(Dates != nil) {
							getDateFrom(input: Dictionary Value)
						} else {
							date(date: January 1, 2000) >> date
							formatDate(date: "${Date}")
						} >> IFResult 81
						getTimeBetween(first: "${If Result}", second: "${CurrentDate}", interval: Days) >> getTimeBetween
						math(input: Time Between Dates, operation: …, scientific: abs(x)) >> math 6
						if(Calculation Result >= .SC) {
							math(input: Count shortcuts, operation: -, operand: "1") >> math 7
/*
2020-09-18: Currently this is set to work with iOS 14. Unlike iOS 14 DB1, a shortcut file CANNOT be opened directly. 😔

Assuming the ability to open a *.shortcut will return, this system check has been added and the 14 text will only include the third paragraph.
*/
							if(System Version false 14) {
var 3F4C6935-8709-4588-B4CA-020535BABAA9 = """𝖳𝗁𝖾 𝖲𝗁𝗈𝗋𝗍𝖼𝗎𝗍𝗌 𝖺𝗉𝗉 𝖼𝖺𝗇𝗇𝗈𝗍 𝗋𝖾𝗌𝗍𝗈𝗋𝖾/𝗂𝗆𝗉𝗈𝗋𝗍 𝖺 𝗌𝗁𝗈𝗋𝗍𝖼𝗎𝗍 𝖿𝗂𝗅𝖾 𝖽𝗂𝗋𝖾𝖼𝗍𝗅𝗒 𝖿𝗋𝗈𝗆 𝖺𝗇 𝗂𝖢𝗅𝗈𝗎𝖽 𝖣𝗋𝗂𝗏𝖾. (𝖳𝗁𝗂𝗌 𝗆𝖺𝗒 𝖻𝖾 𝖿𝗈𝗋 𝗌𝖾𝖼𝗎𝗋𝗂𝗍𝗒 𝗋𝖾𝖺𝗌𝗈𝗇𝗌.) 𝖳𝗈 𝗋𝖾𝗌𝗍𝗈𝗋𝖾/𝗂𝗆𝗉𝗈𝗋𝗍 𝖺 𝗌𝗁𝗈𝗋𝗍𝖼𝗎𝗍 𝖿𝗂𝗅𝖾, 𝗍𝗁𝖾 𝗌𝗁𝗈𝗋𝗍𝖼𝗎𝗍 𝖿𝗂𝗅𝖾 𝗆𝗎𝗌𝗍 𝖿𝗂𝗋𝗌𝗍 𝖻𝖾 𝗎𝗉𝗅𝗈𝖺𝖽𝖾𝖽 𝗍𝗈 𝗂𝖢𝗅𝗈𝗎𝖽 (𝖺 𝗉𝗎𝖻𝗅𝗂𝖼 𝖺𝗋𝖾𝖺 𝗋𝖾𝗌𝖾𝗋𝗏𝖾𝖽 𝖿𝗈𝗋 𝗌𝗁𝗈𝗋𝗍𝖼𝗎𝗍𝗌). 𝖮𝗇𝖼𝖾 𝗎𝗉𝗅𝗈𝖺𝖽𝖾𝖽, 𝗂𝗍 𝖼𝖺𝗇 𝗍𝗁𝖾𝗇 𝖻𝖾 𝗋𝖾𝗌𝗍𝗈𝗋𝖾𝖽/𝗂𝗆𝗉𝗈𝗋𝗍𝖾𝖽 𝗂𝗇 𝖲𝖺𝖿𝖺𝗋𝗂 𝖻𝗒 𝗈𝗉𝖾𝗇𝗂𝗇𝗀 𝖺𝗇 𝗂𝖢𝗅𝗈𝗎𝖽 𝗅𝗂𝗇𝗄 (𝗍𝗈 𝗍𝗁𝖾 𝗎𝗉𝗅𝗈𝖺𝖽𝖾𝖽 𝗌𝗁𝗈𝗋𝗍𝖼𝗎𝗍 𝖿𝗂𝗅𝖾).

𝖳𝗁𝗂𝗌 𝗌𝗁𝗈𝗋𝗍𝖼𝗎𝗍 𝖺𝗎𝗍𝗈𝗆𝖺𝗍𝖾𝗌 𝗍𝗁𝖾 𝗉𝗋𝗈𝖼𝖾𝗌𝗌 𝖽𝖾𝗌𝖼𝗋𝗂𝖻𝖾𝖽 𝖺𝖻𝗈𝗏𝖾. 𝖧𝗈𝗐𝖾𝗏𝖾𝗋 𝗈𝗇𝖼𝖾 𝗍𝗁𝖾 𝗅𝗂𝗇𝗄 𝗂𝗌 𝗈𝗉𝖾𝗇𝖾𝖽 𝗂𝗇 𝖲𝖺𝖿𝖺𝗋𝗂 𝖺 𝗎𝗌𝖾𝗋 𝗆𝗎𝗌𝗍 𝖼𝗈𝗆𝗉𝗅𝖾𝗍𝖾 𝗍𝗁𝖾 𝖿𝗂𝗇𝖺𝗅 𝗌𝗍𝖾𝗉 𝖻𝗒 𝗌𝖾𝗅𝖾𝖼𝗍𝗂𝗇𝗀 𝗍𝗁𝖾 𝖻𝗅𝗎𝖾 '𝖦𝖾𝗍 𝖲𝗁𝗈𝗋𝗍𝖼𝗎𝗍' 𝖻𝗎𝗍𝗍𝗈𝗇 𝗍𝗁𝖺𝗍 𝖺𝗉𝗉𝖾𝖺𝗋𝗌 𝗂𝗇 𝖲𝖺𝖿𝖺𝗋𝗂. 𝖡𝖾𝖼𝖺𝗎𝗌𝖾 𝗈𝖿 𝖺 𝗅𝗂𝗆𝗂𝗍𝖺𝗍𝗂𝗈𝗇 𝗐𝗂𝗍𝗁 𝗍𝗁𝖾 𝖲𝗁𝗈𝗋𝗍𝖼𝗎𝗍𝗌 𝖺𝗉𝗉, 𝗍𝗁𝗂𝗌 𝖿𝗂𝗇𝖺𝗅 𝗌𝗍𝖾𝗉 𝖼𝖺𝗇𝗇𝗈𝗍 𝖻𝖾 𝖼𝗈𝗆𝗉𝗅𝖾𝗍𝖾𝖽 𝗂𝖿 𝖺 𝗌𝗁𝗈𝗋𝗍𝖼𝗎𝗍 𝗂𝗌 𝗌𝗍𝗂𝗅𝗅 𝗋𝗎𝗇𝗇𝗂𝗇𝗀. 𝖣𝗎𝖾 𝗍𝗈 𝗍𝗁𝖾𝗌𝖾 𝖼𝗈𝗇𝗌𝗍𝗋𝖺𝗂𝗇𝗍𝗌, 𝗈𝗇𝗅𝗒 𝗈𝗇𝖾 𝗌𝗁𝗈𝗋𝗍𝖼𝗎𝗍 𝖼𝖺𝗇 𝖻𝖾 𝖺𝗎𝗍𝗈𝗆𝖺𝗍𝗂𝖼𝖺𝗅𝗅𝗒 𝗋𝖾𝗌𝗍𝗈𝗋𝖾𝖽/𝗂𝗆𝗉𝗈𝗋𝗍𝖾𝖽 𝖿𝗈𝗋 𝖾𝖺𝖼𝗁 𝗋𝗎𝗇 𝗈𝖿 𝗍𝗁𝗂𝗌 𝗌𝗁𝗈𝗋𝗍𝖼𝗎𝗍.

𝖲𝗂𝗇𝖼𝖾 𝗒𝗈𝗎 𝗌𝖾𝗅𝖾𝖼𝗍𝖾𝖽 ￼ s𝗁𝗈𝗋𝗍𝖼𝗎𝗍𝗌, 𝗍𝗁𝖾 𝖿𝗂𝗋𝗌𝗍 𝗈𝗇𝖾 𝗐𝗂𝗅𝗅 𝖻𝖾 𝗋𝖾𝗌𝗍𝗈𝗋𝖾𝖽/𝗂𝗆𝗉𝗈𝗋𝗍𝖾𝖽 𝖽𝗎𝗋𝗂𝗇𝗀 𝗍𝗁𝗂𝗌 𝗋𝗎𝗇 𝗈𝖿 𝗍𝗁𝗂𝗌 𝗌𝗁𝗈𝗋𝗍𝖼𝗎𝗍 𝖺𝗇𝖽 𝗍𝗁𝖾 𝗋𝖾𝗆𝖺𝗂𝗇𝗂𝗇𝗀 ￼ 𝗐𝗂𝗅𝗅 𝖻𝖾 𝗊𝗎𝖾𝗎𝖾𝖽 𝗎𝗉 𝖺𝗇𝖽 𝗋𝖾𝖺𝖽𝗒 𝗍𝗈 𝖻𝖾 𝗋𝖾𝗌𝗍𝗈𝗋𝖾𝖽, 𝗈𝗇𝖾 𝖺𝗍 𝖺 𝗍𝗂𝗆𝖾, 𝗐𝗂𝗍𝗁 𝖾𝖺𝖼𝗁 𝗌𝗎𝖻𝗌𝖾𝗊𝗎𝖾𝗇𝗍 𝗋𝗎𝗇 𝗈𝖿 𝗍𝗁𝗂𝗌 𝗌𝗁𝗈𝗋𝗍𝖼𝗎𝗍."""
text("${3F4C6935-8709-4588-B4CA-020535BABAA9}")
							} else {
var 98C354B7-5D47-4660-801E-A4E9B02F8645 = """𝖳𝗁𝖾 𝖲𝗁𝗈𝗋𝗍𝖼𝗎𝗍𝗌 𝖺𝗉𝗉 𝖼𝖺𝗇𝗇𝗈𝗍 𝗋𝖾𝗌𝗍𝗈𝗋𝖾/𝗂𝗆𝗉𝗈𝗋𝗍 𝖺 𝗌𝗁𝗈𝗋𝗍𝖼𝗎𝗍 𝖿𝗂𝗅𝖾 𝖽𝗂𝗋𝖾𝖼𝗍𝗅𝗒 𝖿𝗋𝗈𝗆 𝖺𝗇 𝗂𝖢𝗅𝗈𝗎𝖽 𝖣𝗋𝗂𝗏𝖾. (𝖳𝗁𝗂𝗌 𝗆𝖺𝗒 𝖻𝖾 𝖿𝗈𝗋 𝗌𝖾𝖼𝗎𝗋𝗂𝗍𝗒 𝗋𝖾𝖺𝗌𝗈𝗇𝗌.) 𝖳𝗈 𝗋𝖾𝗌𝗍𝗈𝗋𝖾/𝗂𝗆𝗉𝗈𝗋𝗍 𝖺 𝗌𝗁𝗈𝗋𝗍𝖼𝗎𝗍 𝖿𝗂𝗅𝖾, 𝗍𝗁𝖾 𝗌𝗁𝗈𝗋𝗍𝖼𝗎𝗍 𝖿𝗂𝗅𝖾 𝗆𝗎𝗌𝗍 𝖿𝗂𝗋𝗌𝗍 𝖻𝖾 𝗎𝗉𝗅𝗈𝖺𝖽𝖾𝖽 𝗍𝗈 𝗂𝖢𝗅𝗈𝗎𝖽 (𝖺 𝗉𝗎𝖻𝗅𝗂𝖼 𝖺𝗋𝖾𝖺 𝗋𝖾𝗌𝖾𝗋𝗏𝖾𝖽 𝖿𝗈𝗋 𝗌𝗁𝗈𝗋𝗍𝖼𝗎𝗍𝗌). 𝖮𝗇𝖼𝖾 𝗎𝗉𝗅𝗈𝖺𝖽𝖾𝖽, 𝗂𝗍 𝖼𝖺𝗇 𝗍𝗁𝖾𝗇 𝖻𝖾 𝗋𝖾𝗌𝗍𝗈𝗋𝖾𝖽/𝗂𝗆𝗉𝗈𝗋𝗍𝖾𝖽 𝗂𝗇 𝖲𝖺𝖿𝖺𝗋𝗂 𝖻𝗒 𝗈𝗉𝖾𝗇𝗂𝗇𝗀 𝖺𝗇 𝗂𝖢𝗅𝗈𝗎𝖽 𝗅𝗂𝗇𝗄 (𝗍𝗈 𝗍𝗁𝖾 𝗎𝗉𝗅𝗈𝖺𝖽𝖾𝖽 𝗌𝗁𝗈𝗋𝗍𝖼𝗎𝗍 𝖿𝗂𝗅𝖾).

𝖳𝗁𝗂𝗌 𝗌𝗁𝗈𝗋𝗍𝖼𝗎𝗍 𝖺𝗎𝗍𝗈𝗆𝖺𝗍𝖾𝗌 𝗍𝗁𝖾 𝗉𝗋𝗈𝖼𝖾𝗌𝗌 𝖽𝖾𝗌𝖼𝗋𝗂𝖻𝖾𝖽 𝖺𝖻𝗈𝗏𝖾. 𝖧𝗈𝗐𝖾𝗏𝖾𝗋 𝗈𝗇𝖼𝖾 𝗍𝗁𝖾 𝗅𝗂𝗇𝗄 𝗂𝗌 𝗈𝗉𝖾𝗇𝖾𝖽 𝗂𝗇 𝖲𝖺𝖿𝖺𝗋𝗂 𝖺 𝗎𝗌𝖾𝗋 𝗆𝗎𝗌𝗍 𝖼𝗈𝗆𝗉𝗅𝖾𝗍𝖾 𝗍𝗁𝖾 𝖿𝗂𝗇𝖺𝗅 𝗌𝗍𝖾𝗉 𝖻𝗒 𝗌𝖾𝗅𝖾𝖼𝗍𝗂𝗇𝗀 𝗍𝗁𝖾 𝖻𝗅𝗎𝖾 '𝖦𝖾𝗍 𝖲𝗁𝗈𝗋𝗍𝖼𝗎𝗍' 𝖻𝗎𝗍𝗍𝗈𝗇 𝗍𝗁𝖺𝗍 𝖺𝗉𝗉𝖾𝖺𝗋𝗌 𝗂𝗇 𝖲𝖺𝖿𝖺𝗋𝗂. 𝖡𝖾𝖼𝖺𝗎𝗌𝖾 𝗈𝖿 𝖺 𝗅𝗂𝗆𝗂𝗍𝖺𝗍𝗂𝗈𝗇 𝗐𝗂𝗍𝗁 𝗍𝗁𝖾 𝖲𝗁𝗈𝗋𝗍𝖼𝗎𝗍𝗌 𝖺𝗉𝗉, 𝗍𝗁𝗂𝗌 𝖿𝗂𝗇𝖺𝗅 𝗌𝗍𝖾𝗉 𝖼𝖺𝗇𝗇𝗈𝗍 𝖻𝖾 𝖼𝗈𝗆𝗉𝗅𝖾𝗍𝖾𝖽 𝗂𝖿 𝖺 𝗌𝗁𝗈𝗋𝗍𝖼𝗎𝗍 𝗂𝗌 𝗌𝗍𝗂𝗅𝗅 𝗋𝗎𝗇𝗇𝗂𝗇𝗀. 𝖣𝗎𝖾 𝗍𝗈 𝗍𝗁𝖾𝗌𝖾 𝖼𝗈𝗇𝗌𝗍𝗋𝖺𝗂𝗇𝗍𝗌, 𝗈𝗇𝗅𝗒 𝗈𝗇𝖾 𝗌𝗁𝗈𝗋𝗍𝖼𝗎𝗍 𝖼𝖺𝗇 𝖻𝖾 𝖺𝗎𝗍𝗈𝗆𝖺𝗍𝗂𝖼𝖺𝗅𝗅𝗒 𝗋𝖾𝗌𝗍𝗈𝗋𝖾𝖽/𝗂𝗆𝗉𝗈𝗋𝗍𝖾𝖽 𝖿𝗈𝗋 𝖾𝖺𝖼𝗁 𝗋𝗎𝗇 𝗈𝖿 𝗍𝗁𝗂𝗌 𝗌𝗁𝗈𝗋𝗍𝖼𝗎𝗍.

𝖲𝗂𝗇𝖼𝖾 𝗒𝗈𝗎 𝗌𝖾𝗅𝖾𝖼𝗍𝖾𝖽 ￼ s𝗁𝗈𝗋𝗍𝖼𝗎𝗍𝗌, 𝗍𝗁𝖾 𝖿𝗂𝗋𝗌𝗍 𝗈𝗇𝖾 𝗐𝗂𝗅𝗅 𝖻𝖾 𝗋𝖾𝗌𝗍𝗈𝗋𝖾𝖽/𝗂𝗆𝗉𝗈𝗋𝗍𝖾𝖽 𝖽𝗎𝗋𝗂𝗇𝗀 𝗍𝗁𝗂𝗌 𝗋𝗎𝗇 𝗈𝖿 𝗍𝗁𝗂𝗌 𝗌𝗁𝗈𝗋𝗍𝖼𝗎𝗍 𝖺𝗇𝖽 𝗍𝗁𝖾 𝗋𝖾𝗆𝖺𝗂𝗇𝗂𝗇𝗀 ￼ 𝗐𝗂𝗅𝗅 𝖻𝖾 𝗊𝗎𝖾𝗎𝖾𝖽 𝗎𝗉 𝖺𝗇𝖽 𝗋𝖾𝖺𝖽𝗒 𝗍𝗈 𝖻𝖾 𝗋𝖾𝗌𝗍𝗈𝗋𝖾𝖽, 𝗈𝗇𝖾 𝖺𝗍 𝖺 𝗍𝗂𝗆𝖾, 𝗐𝗂𝗍𝗁 𝖾𝖺𝖼𝗁 𝗌𝗎𝖻𝗌𝖾𝗊𝗎𝖾𝗇𝗍 𝗋𝗎𝗇 𝗈𝖿 𝗍𝗁𝗂𝗌 𝗌𝗁𝗈𝗋𝗍𝖼𝗎𝗍."""
text("${98C354B7-5D47-4660-801E-A4E9B02F8645}")
							} >> IFResult 82
							alert(alert: "${If Result}", title: "", cancel: false)
							date() >> date 1
							formatDate(date: "${Date}", dStyle: Custom, custom: "yyyy-MM-dd") >> formatDate 1
							setValue(key: "Restore Alert", value: "${Formatted Date}", dictionary: File) >> setValue 11
							saveFile(input: Dictionary, ask: false, path: "${.P.key(Settings Path)}", overwrite: true)
						}
					}
// Update the settings file (in a list named: Shortcuts to Restore) with shortcuts 2 to N. During the next run of this shortcut (before the main menu is displayed), this shortcut will present the option to restore shortcut 2.
					getItemFromList(list: shortcuts, type: Items in Range, startIndex: "2") >> Shortcuts 2 to N
					getFile(picker: false, path: "${.P.key(Settings Path)}") >> getFile 13
					setValue(key: "Shortcuts to Restore", value: "${Shortcuts 2 to N}", dictionary: File) >> setValue 12
					saveFile(input: Dictionary, ask: false, path: "${.P.key(Settings Path)}", overwrite: true)
				} >> IFResult 83
				getItemFromList(list: shortcuts) >> First Shortcut
var shortcutname = First Shortcut
				getFile(picker: false, path: "${shortcut name}.shortcut") >> getFile 14
			} >> Shortcut File to Restore
			fileDetail(input: Shortcut File to Restore, property: File Size) >> fileDetail 1
			decode(input: Shortcut File to Restore) >> decode 1
			decode(input: Base64 Encoded) >> Base64 Decoded
			setName(input: Base64 Encoded, name: "tmp.plist") >> setName 5
			getTextFrom(input: Renamed Item) >> Source Code
			splitText(text: Source Code, separator: Custom, customSeparator: "WFWorkflowActionIdentifier") >> splitText 3
			count(input: Split Text) >> count 18
			math(input: Count, operation: -, operand: "1") >> math 8
			splitText(text: Source Code) >> splitText 4
			count(input: Split Text) >> count 19
			if(Count > .SC) {
var 4999EFCB-7CE5-4740-A6FC-0E84AA68D7C3 = """'￼' source code includes ￼ lines.

Action Count: ￼
File Size: ￼

Note: A 𝗙𝘂𝗹𝗹 𝗣𝗿𝗲𝘃𝗶𝗲𝘄 of some shortcuts can be problematic. If you encounter one that is rendered with very small text, try a 𝗧𝗿𝘂𝗻𝗰𝗮𝘁𝗲𝗱 𝗣𝗿𝗲𝘃𝗶𝗲𝘄."""
text("${4999EFCB-7CE5-4740-A6FC-0E84AA68D7C3}")
var EB8CA534-C7D3-4D13-B75E-D2E8496F8B91 = """BEGIN:VCARD
VERSION:3.0
N;CHARSET=utf-8:Full Preview;;;;
ORG:include all ￼ lines of source code;
PHOTO;ENCODING=b: ￼
END:VCARD

BEGIN:VCARD
VERSION:3.0
N;CHARSET=utf-8:Truncated Preview;;;;
ORG:include first ￼ lines of source code;
PHOTO;ENCODING=b: ￼
END:VCARD

BEGIN:VCARD
VERSION:3.0
N;CHARSET=utf-8:Skip Preview;;;;
ORG:restore without previewing;
PHOTO;ENCODING=b: ￼
END:VCARD"""
text("${EB8CA534-C7D3-4D13-B75E-D2E8496F8B91}")
				setName(input: Text, name: "Menu.vcf") >> setName 6
				choose(list: Renamed Item, prompt: "${Text}") >> choose 8
				text(text: "${Chosen Item}") >> Chosen Item [Text]
				if(Chosen Item [Text] == "Full Preview") {
var 2AF7FDDB-41BE-4361-85DD-53BF0C6995D5 = """￼
Read Carefully Before Confirming Restore

This information summarizes the shortcut file selected. Use it to determine if you want to continue with the shortcut restore. If you do not, touch 𝗖𝗮𝗻𝗰𝗲𝗹 when the next dialog appears.

Shortcut: ￼
Action Count: ￼
File Size: ￼

𝙎𝙤𝙪𝙧𝙘𝙚 𝘾𝙤𝙙𝙚:
￼"""
text("${2AF7FDDB-41BE-4361-85DD-53BF0C6995D5}")
					quicklook(input: Text)
				} else {
					if(Chosen Item [Text] == "Truncated Preview") {
						getItemFromList(list: Split Text, type: Items in Range, startIndex: "1", endIndex: .SC) >> Truncated Source Code
var 95F33DCF-ADC9-4056-8372-76029263B782 = """￼
Read Carefully Before Confirming Restore

This information summarizes the shortcut file selected. Use it to determine if you want to continue with the shortcut restore. If you do not, touch 𝗖𝗮𝗻𝗰𝗲𝗹 when the next dialog appears.

Shortcut: ￼
Action Count: ￼
File Size: ￼

𝙏𝙧𝙪𝙣𝙘𝙖𝙩𝙚𝙙 𝙎𝙤𝙪𝙧𝙘𝙚 𝘾𝙤𝙙𝙚 (lines 1 to ￼):
￼"""
text("${95F33DCF-ADC9-4056-8372-76029263B782}")
						quicklook(input: Text)
					}
				} >> IFResult 84
			} else {
var 72806A13-77CF-4D76-8430-851512E2ADEA = """￼
Read Carefully Before Confirming Restore

This information summarizes the shortcut file selected. Use it to determine if you want to continue with the shortcut restore. If you do not, touch 'Cancel' when the next dialog appears.

Shortcut: ￼
Action Count: ￼
File Size: ￼

𝙎𝙤𝙪𝙧𝙘𝙚 𝘾𝙤𝙙𝙚:
￼"""
text("${72806A13-77CF-4D76-8430-851512E2ADEA}")
				quicklook(input: Text)
			} >> Shortcut Preview
/*
2020-09-18: Currently this is set to work with iOS 14. Unlike iOS 14 DB1, a shortcut file CANNOT be opened directly. 😔

Assuming the ability to open a *.shortcut will return, this system check has been added and the 14 will include the 'Open in... (Shortcuts)'.
*/
			if(System Version false 14) {
				getFileLink(file: Shortcut File to Restore) >> getFileLink
				openURL(url: Link to File)
			} else {
				getFileLink(file: Shortcut File to Restore) >> getFileLink 1
				openURL(url: Link to File)
			} >> IFResult 85
			output(result: "${If Result}")
		} >> IFResult 86
	} >> IFResult 87
/*
⚫️⚫️🔴⚫️⚫️🔴⚫️⚫️🔴⚫️⚫️

--- END OF SUBS
*/
/*
⚫️⚫️🔴⚫️⚫️🔴⚫️⚫️🔴⚫️⚫️

If mode is input, exit the shortcut passing a Dictionary of shortcut metadata and run information.
*/
	if(mode == "input") {
		dictionary({"Shortcut":"${.SC.key(MyName)}","RoutineHub ID":"${.SC.key(RoutineHub ID)}","RoutineHub Version":"${.SC.key(RoutineHub Version)}","mode":"${mode}","Operation":"${operation}","Task":"${task}","shortcuts":"${shortcuts}"})
		output(result: "${Dictionary}")
	} >> IFResult 88
/*
⚫️⚫️🔴⚫️⚫️🔴⚫️⚫️🔴⚫️⚫️

Determine if a periodic check for update should be done based on the number of days that have elapsed since the last check.

0 = never check
n = days that must elapse before the check is made
*/
	if(mode != ""${.modes.key(settings)}"") {
/*
𝗧𝗵𝗲 𝗳𝗼𝗹𝗹𝗼𝘄𝗶𝗻𝗴 𝗰𝗵𝗲𝗰𝗸 𝗳𝗼𝗿 𝘂𝗽𝗱𝗮𝘁𝗲 𝗮𝗰𝘁𝗶𝗼𝗻𝘀 𝗮𝗿𝗲 𝗮𝗱𝗮𝗽𝘁𝗲𝗱 𝗳𝗿𝗼𝗺: 

[Eᴍʙᴇᴅ-ᴀ-Uᴘᴅᴀᴛᴇ], https://routinehub.co/shortcut/2672
*/
		number(value: .SC) >> number 6
		if(Number > 0) {
			getFile(picker: false, path: "${.P.key(Settings Path)}") >> getFile 2
			keysFrom(dictionary: File) >> keysFrom 13
			getDateFrom(input: Dictionary Value) >> getDateFrom 1
			if(Dates != nil) {
				getDateFrom(input: Dictionary Value)
			} else {
				date(date: January 1, 2000) >> date 2
				formatDate(date: "${Date}", dStyle: Custom, custom: "yyyy-MM-dd")
			} >> IFResult 89
			getTimeBetween(first: "${If Result}", second: "${CurrentDate}", interval: Days) >> getTimeBetween 1
			math(input: Time Between Dates, operation: …, scientific: abs(x)) >> math 9
			if(Calculation Result >= .SC) {
				getIP(type: IPv4) >> getIP
				count(input: Current IP Address) >> count 20
				if(Count == 0) {
// There is no network connection, thus an update check could not be made.
				} else {
					url(url: "https://routinehub.co/api/v1/shortcuts/${.SC.key(RoutineHub ID)}/versions/latest") >> url 2
					downloadURL(url: "${URL}") >> Contents of RoutineHub Page
					if(Contents of RoutineHub Page .contains "success") {
						dictionary({"Current":"${.SC.key(RoutineHub Version)}","Available":"${Contents of RoutineHub Page.as(Dictionary).key(Version)}"}) >> Version Dictionary
var 3750AF16-4B89-4673-9613-D7CB94EE6915 = """<html><head></head><body><script>
// 𝗔𝗱𝗮𝗽𝘁𝗲𝗱 𝗳𝗿𝗼𝗺: 𝗘𝗺𝗯𝗲𝗱-𝗮-𝗘𝗻𝗴𝗶𝗻𝗲 𝟭.𝟬, 𝗵𝘁𝘁𝗽𝘀://𝗿𝗼𝘂𝘁𝗶𝗻𝗲𝗵𝘂𝗯.𝗰𝗼/𝘀𝗵𝗼𝗿𝘁𝗰𝘂𝘁/𝟮𝟲𝟳𝟮 
function cmp (a, b) {
let pa = a.split('.');
let pb = b.split('.');
for (let i = 0; i < Math.max(pa.length, pb.length); i++) {
let na = Number(pa[i]);
let nb = Number(pb[i]);
if (isNaN(na)) na = 0;
if (isNaN(nb)) nb = 0;
if (na > nb) return "Older";
if (nb > na) return "Newer";
}
return "Same";
};
let dict = ￼;
document.write(cmp(dict.Current, dict.Available));
</script></body></html>"""
text("${3750AF16-4B89-4673-9613-D7CB94EE6915}")
						url(url: "data:text/html,${Compare Versions HTML}") >> url 3
						urlContents(url: "${URL}") >> Contents of Webpage
						if(Contents of Webpage == "Same") {
//Unable to get shortcuts action is.workflow.actions.comment
						} else {
							if(Contents of Webpage == "Older") {
var 33F04190-3777-48FC-8659-84B42FC622FC = """A rollback* is available: ￼ ↘ ￼

*The shortcut author has removed the version you are running."""
text("${33F04190-3777-48FC-8659-84B42FC622FC}")
							} else {
								text(text: "An update is available: ${Version Dictionary.key(Available)} → ${ActionOutput.key(Available)}") >> text 11
							} >> IFResult 90
var 49107FDD-B653-4E3C-857E-3F39DE818191 = """￼

￼

𝗥𝗲𝗹𝗲𝗮𝘀𝗲𝗱: ￼
𝗥𝗲𝗹𝗲𝗮𝘀𝗲 𝗡𝗼𝘁𝗲𝘀:
￼

𝖭𝗈𝗍𝖾: 𝖴𝗉𝖽𝖺𝗍𝖾 𝖼𝗁𝖾𝖼𝗄𝗂𝗇𝗀 𝖺𝖽𝖺𝗉𝗍𝖾𝖽 𝖿𝗋𝗈𝗆 [Eᴍʙᴇᴅ-ᴀ-Uᴘᴅᴀᴛᴇ]."""
text("${49107FDD-B653-4E3C-857E-3F39DE818191}")
							dictionary({"icons":{"Install":"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","View":"","Later":""}})
var 2F09F74B-0C39-4E56-8926-C44985977CD8 = """BEGIN:VCARD
VERSION:3.0
N;CHARSET=utf-8:Install;;;;
ORG:replace shortcut with version ￼;
PHOTO;ENCODING=b:￼
END:VCARD

BEGIN:VCARD
VERSION:3.0
N;CHARSET=utf-8:View More Information;;;;
ORG:open shortcut web page in Safari;
PHOTO;ENCODING=b:￼
END:VCARD

BEGIN:VCARD
VERSION:3.0
N;CHARSET=utf-8:Maybe Later;;;;
ORG:for now, continue with version ￼;
PHOTO;ENCODING=b:￼
END:VCARD"""
text("${2F09F74B-0C39-4E56-8926-C44985977CD8}")
							setName(input: Text, name: "Menu.vcf") >> setName 7
							choose(list: Renamed Item, prompt: "${Text}") >> choose 9
							text(text: "${Chosen Item}") >> Chosen Item [Text]
							if(Chosen Item [Text] .contains "Later") {
							} else {
								if(Chosen Item [Text] .contains "Install") {
									url(url: "https://routinehub.co/download/${Contents of RoutineHub Page.as(Dictionary).key(id)}") >> url 4
								} else {
									url(url: "https://routinehub.co/shortcut/${.SC.key(RoutineHub ID)}") >> url 5
								} >> IFResult 91
								openURL(url: If Result)
								output(result: "${URL}")
							}
						} >> IFResult 92
// Set 'Check for Update' in the settings file to today's date. During subsequent runs of this shortcut, this saved setting and 'Check for Update.Elapsed Days' will be used to determine if a periodic automatic update check should be executed.
						getFile(picker: false, path: "${.P.key(Settings Path)}") >> getFile 3
						date() >> date 3
						formatDate(date: "${Date}", dStyle: Custom, custom: "yyyy-MM-dd") >> formatDate 2
						setValue(key: "Check for Update", value: "${Formatted Date}", dictionary: File) >> setValue 13
						saveFile(input: Dictionary, ask: false, path: "${.P.key(Settings Path)}", overwrite: true) >> saveFile 9
					} else {
//Unable to get shortcuts action is.workflow.actions.comment
					} >> IFResult 93
				} >> IFResult 94
			}
		} >> IFResult 95
	} >> IFResult 96
} >> RepeatResult 17
