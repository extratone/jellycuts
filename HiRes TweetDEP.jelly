import Shortcuts
#Color: grayBlue, #Icon: star

/*
Twitter client to download media from public or private accounts at the highest quality, save to Photos or Files or share. It can also upload images at up to 8K.
2022-07-21 	v2.5.3 	u/gluebyte
https://routinehub.co/shortcut/7912
*/
var A1228A3D-A2BB-446F-A75C-98ECAFA62EA1 = """{
"version": "2022-07-21",
"prefversion": 5,
"filename": "HiRes Tweet.json",
"defaultpref": {
	"prefversion": 5,
	"users": {},
	"selection": [ 4, 3, 1, 1, 1, 2, 2, 1, 2, 3, 1 ]
},
"prefstring": [
	{
		"title": "Save gif as",
		"option": [ "mp4 [1/4]", "gif [2/4]", "Both mp4 and gif [3/4]", "Ask Always [4/4]" ]
	},
	{
		"title": "‚§∑ gif Quality",
		"option": [ "High (Requires a-Shell mini) [1/3]", "Low [2/3]", "Ask Always [3/3]" ]
	},
	{
		"title": "Quick Look",
		"option": [ "None [1/3]", "All Media [2/3]", "Only Videos and gifs [3/3]" ]
	},
	{ "title": "‚§∑ Ask to Continue after Quick Look" },
	{ "title": "Show List for Multiple Images" },
	{ "title": "Share" },
	{ "title": "Save to Files" },
	{ "title": "Save to Photos" },
	{ "title": "‚§∑ Open Photos after Save" },
	{
		"title": "Set Media Date to",
		"option": [ "Date Tweeted (Requires a-Shell mini) [1/3]", "Current Date [2/3]", "Ask Always [3/3]" ]
	},
	{ "title": "Show Notification" }
],
"option": [ "‚òëÔ∏è", "‚¨úÔ∏è"
],
"worker": "https://hirestweet.gluebyte.workers.dev/",
"shortcutpage": "https://routinehub.co/shortcut/7912/",
"downloadurl": "https://routinehub.co/api/v1/shortcuts/7912/versions/latest",
"‚Üíjpeg": "‚Üíjpeg",
"emptydict": {},
"emptytext": "",
"newline": "\n",
"0": 0,
"1": 1,
"false": false,
"true": true,
"onmy": "On My ",
"maxpixel": 8192,
"maxbyte": 5242880,
"threshold": 0.005,
"readme": "<!DOCTYPE html><html><head><title>HiRes Tweet</title>\n<meta charset=\"utf-8\"><meta name=\"viewport\" content=\"width=device-width\"><meta name=\"color-scheme\" content=\"light dark\">\n<style>body { font-family:system-ui; word-break:keep-all; line-height:2; }\na { color:#09f; text-decoration:none; }</style></head><body>\n<h2 style=\"line-height:0.5;\">Please Read</h2>\n\n<div style=\"text-align:right; font-size:1.5em; font-family:monospace; line-height:0.3; padding-right:20px;\">\n<p><a href=\"https://www.reddit.com/user/gluebyte/\">u/gluebyte</a></p>\n<p><a href=\"https://routinehub.co/user/gluebyte\">routinehub.co/user/gluebyte</a></p></div>\n\n<p><i>HiRes Tweet</i> can download media from public or <strong>private</strong> accounts at the highest quality, save to <i>Photos</i> or <i>Files</i> or share. It can also upload images at up to 8K.</p>\n\n<h3>Downloading Media</h3>\n\n<ul><li><strong>Long-press</strong> a tweet‚Äôs share button, then select <i>HiRes Tweet</i> from the list.\n<ul><li>Alternatively you can <i>tap</i> the share button, tap ‚ÄòShare via‚Äô, then select <i>HiRes Tweet</i>. This may not work on private tweets, though.</li></ul></li>\n<li>Images are downloaded at up to 8K (for comparison, the Twitter app is limited to 4K).</li>\n<li>gifs can be downloaded as gif and/or mp4.</li>\n<li>You can save media to <i>iCloud</i> or <i>On My Device</i> on iOS 15, or to <i>iCloud/Shortcuts</i> on iOS 14 or older.</li></ul>\n\n<h3>Uploading Image</h3>\n\n<ul><li>To compose a tweet with an image at up to 8K (for comparison, the Twitter app is limited to 4K), run <i>HiRes Tweet</i> from the <i>Shortcuts</i> app.</li>\n<li>Share your own tweet, and you can reply to it with an image.</li></ul>\n\n<h3>User Settings</h3>\n\n<ul><li>You can change user settings by running <i>HiRes Tweet</i> from the <i>Shortcuts</i> app.</li>\n<li>Connecting accounts enables you to download private media and upload images.</li>\n<li>To change folder or album, toggle the <i>Save to Files/Photos</i> option off and on.</li></ul>\n</body></html>",
"info": "‚ÑπÔ∏è  Show Instructions / Contact",
"connect": "üê§  Connect Twitter Account",
"disconnect": "‚úÇÔ∏è  Disconnect Account",
"settings": "‚öôÔ∏è  User Settings",
"upload": "üñº  Tweet Image",
"quit": "üîö  Quit",
"download": "‚≠êÔ∏è  Download Media",
"reply": "üñº  Tweet Image as Reply",
"getlink": "üìã Download Media from Copied Link",
"refresh": "refresh",
"goback": "‚Æê  Go Back",
"gotoweb": "üåè  Go to RoutineHub",
"dateoptions": [ "Always Date Tweeted", "Always Current Date", "Date Tweeted", "Current Date" ],
"gifoptions": [ "Always mp4 and gif", "Always gif", "Always mp4", "mp4 and gif", "gif", "mp4" ],
"gifqualityoptions": [ "Always Low", "Always High", "Low", "High" ],
"getashell": "üì≤  Get app from App Store",
"haveashell": "‚úÖ  a-Shell mini is installed",
"quicklookboth": "üîé  Quick Look Both",
"getbetter": "üî∏  Get Better Quality (",
"getbest": "üî∂  Get Best Quality (",
"getboth": "üíï  Get Both",
"continue": "üí´  Continue",
"moreimage": "üñº  Add Image",
"opentweet": "üê£  Open Tweet",
"showinfo": "üìô  Instructions",
"contact": "üêß  Contact gluebyte on RoutineHub",
"contact2": "üê¶  ",
"confirmdisconnect": "‚úÇÔ∏è  Disconnect",
"loginerror": "‚Ä¢32‚Ä¢89‚Ä¢",
"loginerror2": "‚Ä¢32‚Ä¢89‚Ä¢179‚Ä¢",
"copyerror": "üìã  Copy Error to Clipboard",
"openmenu": "üê§  Manage Accounts",
"downloadupdate": "üëæ  Download Update",
"notnow": "‚Æê  Not Now",
"folder": "‚Ä¢ Media Folder: ",
"album": "‚Ä¢ Media Album: ",
"recents": "Recents",
"msg": {
	"error": "An error occured. Please contact developer if problem persists.",
	"oldpref": "\nThis shortcut is older than the settings file. Please download the latest version.\n",
	"newpref": "User settings have been updated. Please review new settings.",
	"notweeturl": "Please share a tweet.",
	"onlyurls": "\nOnly links found in tweet:\n",
	"nomedia": "\nNo media attached to tweet.\n",
	"dateprompt": "\nChoose date of media. The free ‚Äòa-Shell mini‚Äô app is required for ‚ÄòDate Tweeted‚Äô:\n",
	"optionsaved": "\n‚ú® Option has been saved. To change settings, run ‚ÄòHiRes Tweet‚Äô from the Shortcuts app.\n",
	"gifprompt": "\nSave gif as:\n",
	"gifqualityprompt": "\nPlease select gif quality. Low is faster, High requires the free ‚Äòa-Shell mini‚Äô app:\n",
	"ashellprompt": "\nIs ‚Äòa-Shell mini‚Äô installed?\n",
	"gifprompt2": "\nNote: ‚ÄòBetter‚Äô may look better than ‚ÄòBest‚Äô if color changes and movements are small across frames.\n",
	"album": "\nPlease select photo album from the following list. You can change it later in ‚ÄòUser Settings‚Äô.\n",
	"accountprompt": "\nPlease choose account:\n",
	"tweet1": "\nPlease enter tweet status:\n",
	"photoready": "Ready to upload:",
	"tweet2": "Please confirm tweet status:",
	"tweeted": "\nTweet is uploaded:\n",
	"nouserprompt": "\nPlease connect Twitter account to upload photos or download protected media.\n",
	"userlistprompt": "Connected accounts: ",
	"connect1": "\nPlease confirm your active account and press ‚ÄòDone‚Äô in the next screen.\n",
	"connect2": "\nPlease authorize, copy PIN and press ‚ÄòDone‚Äô in the next screen.\n",
	"revokeapp1": "\nIn the next screen, press ‚ÄòDone‚Äô after confiming that the active account is ",
	"revokeapp2": "\nPlease ‚Äòrevoke access‚Äô if you see ‚ÄòHiRes Tweet Shortcut‚Äô in the next screen.\n",
	"enterpin": "\nPlease enter PIN:\n",
	"disconnectprompt": "\nChoose account you want to disconnect:\n",
	"settingprompt": "Tap any item to change option. To reset folder or album, turn the option off and on.",
	"locationprompt": "\nWhere do you want to save media?\n",
	"folderprompt1": "\nEnter folder name for media:\n",
	"folderprompt2": "\nEnter folder name for media. It will be created inside iCloud Drive/Shortcuts folder:\n",
	"noclipboard": "\nNo Twitter link in clipboard.\n",
	"newversion": "New Version Available",
	"mytweetprompt": "This tweet is from ",
	"loginerrorprompt": "Account error occured. If problem persists, please try disconnecting and reconnecting ",
	"protectederrorprompt": "Please connect an account that follows this protected account and try again:",
	"e34": "Account does not exist or has been deleted.",
	"e88": "Too many users are using the shortcut. Please try again later or connect an account.",
	"e144": "Tweet does not exist or has been deleted."
}
}"""
text("${A1228A3D-A2BB-446F-A75C-98ECAFA62EA1}")
getDictionaryFrom(input: Text) >> getDictionaryFrom
var mainDict = Dictionary
if(DeviceDetails ==) {
	number(value: 4) >> number
} else {
	deviceDetails(detail: System Version) >> deviceDetails
	replaceText(input: "${System Version}.0", find: "^(\d+)\.(\d).*", replace: "$1$2", isRegex: true) >> replaceText
	number(value: 3) >> number 1
	if(Updated Text false 150) {
		number(value: 2) >> number 2
		if(Updated Text false 143) {
			number(value: 1) >> number 3
			if(Updated Text false 140) {
				number(value: 0) >> number 4
			}
		}
	}
} >> IFResult
var OS = If Result
// ‚ó•‚ó§		CHECK INPUT
if(ShortcutInput != nil) {
	if(ShortcutInput .beginsWith "{"") {
var command = Variable
	} else {
		getItemFromList(list: ShortcutInput, type: Last Item) >> getItemFromList
		if(Item from List .contains "t.co/") {
			expandURL(url: "${Item from List}") >> expandURL
		} >> twurl
		if(twurl .contains "twitter.com/") {
			replaceText(input: "„ÖÅ${twurl}", find: "^.*/(\d{17,}).*$", replace: "$1", isRegex: true) >> ID
			if(ID .beginsWith "„ÖÅ") {
				alert(alert: "${twurl}
${ActionOutput}", cancel: false)
			} else {
var input = twurl
var command = Variable
			} >> IFResult 1
		} else {
			alert(alert: "${twurl}
${ActionOutput}", cancel: false)
		}
	} >> IFResult 2
} >> IFResult 3
// ‚ó•‚ó§		CHECK PREF
if(OS > 2) {
	setValue(key: "filename", value: "Shortcuts/${mainDict.key(filename)}", dictionary: mainDict) >> setValue
var mainDict = Dictionary
} >> IFResult 4
getFile(picker: false, path: "${mainDict.key(filename)}", error: false) >> getFile
if(File == nil) {
	if(OS > 2) {
		createFolder(path: "Shortcuts/")
	} >> IFResult 5
	getDictionaryFrom(input: mainDict) >> getDictionaryFrom 1
var pref = Dictionary
	saveFile(input: pref, ask: false, path: "${mainDict.key(filename)}", overwrite: true) >> saveFile
	richTextFromHTML() >> richTextFromHTML
	quicklook(input: Rich Text from HTML)
} else {
	getDictionaryFrom(input: File) >> getDictionaryFrom 2
var pref = Dictionary
	keysFrom(dictionary: pref) >> prefversion
	if(prefversion != mainDict) {
		if(prefversion > mainDict) {
			menu(, [) {
			case("mainDict (gotoweb)"):
				openURL(url: mainDict)
			} >> MenuResult
			exit()
		} >> IFResult 6
		combineText(text: pref, combine: Custom) >> combineText
		if(prefversion == 1) {
			replaceText(input: "${Combined Text}", find: "...$", replace: "2$0", isRegex: true) >> replaceText 1
		} >> IFResult 7
		if(prefversion false 3) {
			replaceText(input: "${If Result}", find: "^.", replace: "$03", isRegex: true) >> replaceText 2
		} >> IFResult 8
		if(prefversion false 4) {
			replaceText(input: "${If Result}", find: ".$", replace: "2$0", isRegex: true) >> replaceText 3
		} >> IFResult 9
		if(prefversion false 5) {
			replaceText(input: "${If Result}", find: "2(.)$", replace: "3$1", isRegex: true) >> replaceText 4
		} >> IFResult 10
		splitText(text: If Result, separator: Every Character) >> splitText
		setValue(key: "selection", value: "${Split Text.as(Number)}", dictionary: pref) >> setValue 1
		setValue(key: "prefversion", value: "${mainDict.key(prefversion)}", dictionary: Dictionary) >> setValue 2
var pref = Dictionary
		saveFile(input: pref, ask: false, path: "${mainDict.key(filename)}", overwrite: true) >> saveFile 1
	}
} >> IFResult 11
// ‚ó•‚ó§		CHECK ACCOUNTS
keysFrom(dictionary: pref) >> keysFrom
filterFiles() >> filterFiles
var users = Files
count(input: users) >> count
var usercount = Count
if(usercount != 0) {
	if(input != nil) {
		replaceText(input: "${twurl}", find: ".*twitter\.com/([^/]+)/.*", replace: "$1", isRegex: true) >> replaceText 5
var D4597B20-3CA8-419F-A234-B6047095D60E = """„ÖÅ
Ôøº"""
text("${D4597B20-3CA8-419F-A234-B6047095D60E}")
		replaceText(input: "${Text}", find: "(?ms).*^(${Updated Text})$.*", replace: "$1", isRegex: true, caseSensitive: false) >> TweetUser
		if(TweetUser .beginsWith "„ÖÅ") {
		} else {
			menu(, [) {
			case("mainDict (download)"):
			case("mainDict (reply)"):
var currentuser = TweetUser
var command = Variable
			}
		}
	} >> IFResult 12
} >> IFResult 13
repeat(20) {
// ‚ó•‚ó§		LOOP
	if(command != ""${mainDict.key(quit)}"") {
		if(command == ""${mainDict.key(download)}"") {
// ‚ó•‚ó§		DOWNLOAD
var command = Variable
			if(ShortcutInput .beginsWith "{"") {
				openApp(id: "com.atebits.Tweetie2")
				keysFrom(dictionary: ShortcutInput) >> filename
				if(ShortcutInput != nil) {
//Unable to get shortcuts action AsheKube.app.a-Shell-mini.GetFileIntent
					setName(input: File, name: "${filename}") >> setName
var media = Renamed Item
				}
//Unable to get shortcuts action AsheKube.app.a-Shell-mini.GetFileIntent
				setName(input: Better, name: "${filename}") >> Better
//Unable to get shortcuts action AsheKube.app.a-Shell-mini.GetFileIntent
				setName(input: Best, name: "${filename}") >> Best
var gifw = Best
var gifh = Best
				list(items: (
        {
        WFItemType = 0;
        WFValue =         {
            Value =             {
                attachmentsByRange =                 {
                    "{0, 1}" =                     {
                        OutputName = Better;
                        OutputUUID = "A1995D02-5615-4F3A-B21D-F9A21C08FD12";
                        Type = ActionOutput;
                    };
                };
                string = "\Ufffc";
            };
            WFSerializationType = WFTextTokenString;
        };
    },
        {
        WFItemType = 0;
        WFValue =         {
            Value =             {
                attachmentsByRange =                 {
                    "{0, 1}" =                     {
                        OutputName = Best;
                        OutputUUID = "662863E4-38B8-4552-A118-97808825AF6A";
                        Type = ActionOutput;
                    };
                };
                string = "\Ufffc";
            };
            WFSerializationType = WFTextTokenString;
        };
    }
)) >> list
var gifloop = Variable
				repeat(10) {
					if(gifloop ==) {
var gifloop = Variable
						menu(, [) {
						case("mainDict (quicklookboth)"):
var gifloop = Variable
							quicklook(input: List)
						case("mainDict (getbetter)Better (File Size))"):
//Unable to get shortcuts action is.workflow.actions.getvariable
						case("mainDict (getbest)Best (File Size))"):
//Unable to get shortcuts action is.workflow.actions.getvariable
						case("mainDict (getboth)"):
							list(items: (
        {
        WFItemType = 0;
        WFValue =         {
            Value =             {
                attachmentsByRange =                 {
                    "{0, 1}" =                     {
                        OutputName = Better;
                        OutputUUID = "3C33BDA3-E5F0-488A-BBB3-93E51427D2A8";
                        Type = ActionOutput;
                    };
                };
                string = "\Ufffc";
            };
            WFSerializationType = WFTextTokenString;
        };
    },
        {
        WFItemType = 0;
        WFValue =         {
            Value =             {
                attachmentsByRange =                 {
                    "{0, 1}" =                     {
                        OutputName = Best;
                        OutputUUID = "BB8B32C0-17D2-4A55-82BC-7A88C5F0367D";
                        Type = ActionOutput;
                    };
                };
                string = "\Ufffc";
            };
            WFSerializationType = WFTextTokenString;
        };
    }
))
						} >> MenuResult 1
					}
					nothing()
				} >> RepeatResult
//Unable to get shortcuts action is.workflow.actions.appendvariable
//Unable to get shortcuts action AsheKube.app.a-Shell-mini.ExecuteCommandIntent
			} else {
				setValue(key: " ", value: "${mainDict.key(emptydict)}", dictionary: pref) >> userdict
				list(items: (
        {
        WFItemType = 0;
        WFValue =         {
            Value =             {
                attachmentsByRange =                 {
                    "{0, 1}" =                     {
                        Type = Variable;
                        VariableName = users;
                    };
                };
                string = "\Ufffc";
            };
            WFSerializationType = WFTextTokenString;
        };
    },
    " "
)) >> list 1
				repeatEach(List) {
					if(break ==) {
					} else {
var currentuser = Variable
						keysFrom(dictionary: userdict) >> keysFrom 1
						downloadURL(url: "${mainDict.key(worker)}", method: POST, headers: , requestJSON: ) >> downloadURL
var tweetDict = Contents of URL
var error = Variable
						number(value: 1)
						if(error != nil) {
var error = Variable
							keysFrom(dictionary: mainDict) >> keysFrom 2
							number(value: 0)
							if(Dictionary Value .contains ""‚Ä¢${error.as(Dictionary).key(code)}‚Ä¢"") {
								number(value: 1)
							}
						} >> IFResult 14
var break = If Result
					}
				} >> RepeatResult 1
var version = Variable
				if(error == nil) {
					keysFrom(dictionary: tweetDict) >> Type
					if(Type == "url") {
						if(tweetDict != nil) {
							choose(list: tweetDict, prompt: "${mainDict.key(msg.onlyurls)}") >> choose
							openURL(url: Selected Item)
						} else {
							alert(alert: "${twurl}
${ActionOutput}", cancel: false)
						} >> IFResult 15
					} else {
						number(value: 0) >> number 5
						if(Type == "animated_gif") {
							math(input: pref, operation: -, operand: "1") >> math
							if(Calculation Result == 3) {
								repeatEach(mainDict) {
									setName(input: Repeat Index 2, name: "${Repeat Item 2}")
								} >> RepeatResult 2
								choose(list: Repeat Results, prompt: "${mainDict.key(msg.gifprompt)}") >> choose 1
								math(input: "6", operation: -, operand: Chosen Item) >> math 1
								if(Calculation Result > 2) {
									math(input: Calculation Result, operation: -, operand: "2") >> math 2
var newSelection = Calculation Result
									getItemFromList(list: pref, type: Items in Range, startIndex: "2") >> getItemFromList 1
//Unable to get shortcuts action is.workflow.actions.appendvariable
									setValue(key: "selection", value: "${newSelection}", dictionary: pref) >> setValue 3
var pref = Dictionary
									saveFile(input: pref, ask: false, path: "${mainDict.key(filename)}", overwrite: true) >> saveFile 2
									alert(alert: "${mainDict.key(msg.optionsaved)}", cancel: false)
									math(input: Calculation Result, operation: -, operand: "1")
								}
							} >> IFResult 16
						} >> toGIF
						number(value: 0) >> number 6
						if(OS != 0) {
							if(toGIF > 0) {
								math(input: "2", operation: -, operand: pref) >> math 3
								if(Calculation Result false 0) {
									repeatEach(mainDict) {
										setName(input: Repeat Index 2, name: "${Repeat Item 2}")
									} >> RepeatResult 3
									choose(list: Repeat Results, prompt: "${mainDict.key(msg.gifqualityprompt)}") >> choose 2
									math(input: Chosen Item, operation: -, operand: "3") >> math 4
									if(Calculation Result false 0) {
										math(input: "3", operation: -, operand: Chosen Item) >> math 5
										combineText(text: pref, combine: Custom) >> combineText 1
										replaceText(input: "${Combined Text}", find: "^(.).", replace: "$1${Calculation Result}", isRegex: true) >> replaceText 6
										splitText(text: Updated Text, separator: Every Character) >> splitText 1
										setValue(key: "selection", value: "${Split Text}", dictionary: pref) >> setValue 4
var pref = Dictionary
										saveFile(input: pref, ask: false, path: "${mainDict.key(filename)}", overwrite: true) >> saveFile 3
										alert(alert: "${mainDict.key(msg.optionsaved)}", cancel: false)
										math(input: Chosen Item, operation: -, operand: "1") >> math 6
									}
								}
							} >> IFResult 17
						} >> GIF Quality
						keysFrom(dictionary: pref) >> Media Date
						if(Media Date == 3) {
							repeatEach(mainDict) {
								setName(input: Repeat Index 2, name: "${Repeat Item 2}")
							} >> RepeatResult 4
							choose(list: Repeat Results, prompt: "${mainDict.key(msg.dateprompt)}") >> choose 3
							math(input: Chosen Item, operation: -, operand: "2") >> math 7
							if(Calculation Result false 1) {
								combineText(text: pref, combine: Custom) >> combineText 2
								replaceText(input: "${Combined Text}", find: ".(.)$", replace: "${Chosen Item}$1", isRegex: true) >> replaceText 7
								splitText(text: Updated Text, separator: Every Character) >> splitText 2
								setValue(key: "selection", value: "${Split Text}", dictionary: pref) >> setValue 5
var pref = Dictionary
								saveFile(input: pref, ask: false, path: "${mainDict.key(filename)}", overwrite: true) >> saveFile 4
								alert(alert: "${mainDict.key(msg.optionsaved)}", cancel: false)
//Unable to get shortcuts action is.workflow.actions.getvariable
							}
						} >> MediaDate
						if(pref == nil) {
							matchText(text: "${MediaDate}${ActionOutput}${toGIF}", regex: "^[12]1|1$") >> matchText
							if(Matches != nil) {
								menu(, [) {
								case("mainDict (getashell)"):
									openURL(url: "https://apps.apple.com/app/id1543537943")
									exit()
								case("mainDict (haveashell)"):
									setValue(key: "has a-Shell mini", value: "1", dictionary: pref) >> setValue 6
var pref = Dictionary
									saveFile(input: pref, ask: false, path: "${mainDict.key(filename)}", overwrite: true)
								}
							}
						} >> IFResult 18
						if(MediaDate == 1) {
							adjustDate(duration: , date: "1970-01-01 00:00:00Z") >> adjustDate
							formatDate(date: "${Adjusted Date}", dStyle: Custom, custom: "'-t 'yyyyMMddHHmm.ss") >> -t MediaDate
						} >> IFResult 19
						downloadURL(url: "${tweetDict.as(Dictionary).key(url)}") >> downloadURL 1
						if(Contents of URL .contains " / Error") {
							quicklook(input: Contents of URL)
						} else {
							if(Type == "video") {
								if(MediaDate == 2) {
									encodeMedia(media: Contents of URL) >> encodeMedia
									getFileOfType(input: Encoded Media, type: "public.mpeg-4") >> getFileOfType
								} >> IFResult 20
							}
							if(toGIF ==) {
								if(toGIF == 2) {
var media_ = Contents of URL
								} >> IFResult 21
								if(GIF Quality == 0) {
									math(input: "1", operation: /, operand: Contents of URL) >> math 8
									keysFrom(dictionary: tweetDict) >> w
									keysFrom(dictionary: tweetDict) >> h
									if(w > h) {
										makeGIF(content: Contents of URL, frameTime: Calculation Result, autoSize: false, height: w) >> makeGIF
									} else {
										makeGIF(content: Contents of URL, frameTime: Calculation Result, autoSize: false, width: h)
									} >> IFResult 22
								} else {
									setName(input: Contents of URL, name: "a.mp4") >> setName 1
//Unable to get shortcuts action AsheKube.app.a-Shell-mini.PutFileIntent
									imageDetail(detail: Frame Rate, image: Contents of URL) >> imageDetail
									replaceText(input: "${Frame Rate}", find: ",", replace: ".") >> Frame Rate
									setValue(key: "filename", value: "${tweetDict.as(Dictionary).key(user)} ${Variable.as(Dictionary).key(user)}") >> setValue 7
									if(toGIF == 2) {
										setValue(key: "mp4", value: "y", dictionary: Dictionary)
									} >> IFResult 23
									encodeURL(url: "${If Result}") >> encodeURL
var 6A1296F1-79C4-46F4-B48E-A3035C86B04F = """hideKeyboard
echo
echo
ffmpeg -v error -stats -i a.mp4 -filter_complex "[0:v]fps=Ôøº,split[a][b];[a]palettegen=reserve_transparent=0:stats_mode=diff[p];[b][p]paletteuse=dither=floyd_steinberg" -y Better.gif
echo
ffmpeg -v error -stats -i a.mp4 -filter_complex "[0:v]fps=Ôøº,split[a][b];[a]palettegen=reserve_transparent=0:stats_mode=single[p];[b][p]paletteuse=dither=floyd_steinberg:new=1" -y Best.gif
touch Ôøº a.mp4 Better.gif Best.gif
echo
open "shortcuts://run-shortcut?name=HiRes%20Tweet&input=Ôøº""""
text("${6A1296F1-79C4-46F4-B48E-A3035C86B04F}")
//Unable to get shortcuts action AsheKube.app.a-Shell-mini.ExecuteCommandIntent
									exit()
								} >> IFResult 24
							} >> IFResult 25
//Unable to get shortcuts action is.workflow.actions.appendvariable
							repeatEach(media_) {
								setName(input: Repeat Item 2, name: "${tweetDict.as(Dictionary).key(user)} ${Variable.as(Dictionary).key(user)}")
							} >> RepeatResult 5
var media = Repeat Results
							keysFrom(dictionary: pref) >> Quick Look
							if(Quick Look != 1) {
								if(Quick Look == 3) {
									if(Type == "photo") {
										number(value: 0)
									}
								} >> IFResult 26
								if(If Result ==) {
									if(Type == "photo") {
										if(OS == 0) {
											repeatEach(media) {
												math(input: Repeat Item 2, operation: *, operand: Repeat Item 2)
											} >> RepeatResult 6
											statistic(input: Repeat Results, operation: Maximum) >> statistic
											if(Maximum > 8600000) {
												continueInShortcuts()
											}
										} >> IFResult 27
									} >> IFResult 28
									quicklook(input: media)
									keysFrom(dictionary: pref) >> ‚§∑Ask after Quick Look
									if(‚§∑Ask after Quick Look == 1) {
										menu(, [) {
										case("mainDict (continue)"):
										case("mainDict (quit)"):
//Unable to get shortcuts action is.workflow.actions.setvariable
										}
									}
								} >> IFResult 29
							} >> IFResult 30
							if(toGIF == 0) {
								count(input: media) >> count 1
								if(Count > 1) {
									keysFrom(dictionary: pref) >> Select if Multiple
									if(Select if Multiple == 1) {
										choose(list: media, multiple: true, all: true) >> choose 4
var media = Chosen Item
									} >> IFResult 31
								} >> IFResult 32
							} >> IFResult 33
							if(OS != 0) {
								if(MediaDate == 1) {
//Unable to get shortcuts action AsheKube.app.a-Shell-mini.ExecuteCommandIntent
									repeatEach(media) {
//Unable to get shortcuts action AsheKube.app.a-Shell-mini.PutFileIntent
										text(text: "touch ${-t MediaDate} "${ActionOutput}.${Repeat Item 2.as(File).get(Name)}"") >> text
//Unable to get shortcuts action AsheKube.app.a-Shell-mini.ExecuteCommandIntent
//Unable to get shortcuts action AsheKube.app.a-Shell-mini.GetFileIntent
										setName(input: File, name: "${Repeat Item 2.as(File).get(Name)}")
									} >> RepeatResult 7
var media = Repeat Results
								} >> IFResult 34
							}
						}
					} >> IFResult 35
				}
			} >> IFResult 36
			if(media != nil) {
				keysFrom(dictionary: pref) >> Share
				if(Share == 1) {
					share(file: media)
				} >> IFResult 37
				keysFrom(dictionary: pref) >> Save to Files
				if(Save to Files == 1) {
					keysFrom(dictionary: pref) >> keysFrom 3
					if(OS > 2) {
						if(Dictionary Value == nil) {
							menu(, [) {
							case("mainDict (onmy)Device Details (Device Type)"):
								number(value: 1)
							case("iCloud Drive"):
								number(value: 2)
							case("iCloud Drive/Shortcuts"):
								number(value: 3)
							} >> MenuResult 2
							setValue(key: "folderlocation", value: "${Menu Result.as(Number)}", dictionary: pref) >> setValue 8
var pref = Dictionary
//Unable to get shortcuts action is.workflow.actions.getvariable
						} >> IFResult 38
					} >> IFResult 39
					if(If Result == 1) {
						file(file: $0) >> file 1
					} else {
						if(If Result == 2) {
							file(file: $0) >> file 2
						} else {
							file(file: $0) >> file 3
						}
					} >> IFResult 40
					if(pref == nil) {
						if(OS > 2) {
							keysFrom(dictionary: mainDict)
						} else {
							keysFrom(dictionary: mainDict) >> keysFrom 4
						} >> IFResult 41
						askForInput(prompt: "${If Result}") >> askForInput
						setValue(key: "savefolder", value: "${Provided Input}", dictionary: pref) >> setValue 9
var pref = Dictionary
						saveFile(input: pref, ask: false, path: "${mainDict.key(filename)}", overwrite: true) >> saveFile 5
						if(Provided Input != nil) {
							createFolder(path: "${pref.key(savefolder)}") >> createFolder
						}
					} >> IFResult 42
					saveFile(input: media, ask: false, path: "${pref.key(savefolder)}") >> saveFile 6
				} >> IFResult 43
				keysFrom(dictionary: pref) >> Save to Album
				if(Save to Album == 1) {
					keysFrom(dictionary: pref) >> album
					if(album == nil) {
						alert(alert: "${mainDict.key(msg.album)}", cancel: false)
						saveToCameraRoll(image: media, album: Ask) >> saveToCameraRoll
						getItemFromList(list: Saved Photo Media) >> getItemFromList 2
						text(text: "${Item from List}") >> text 1
						setValue(key: "album", value: "${Text}", dictionary: pref) >> setValue 10
var pref = Dictionary
						saveFile(input: pref, ask: false, path: "${mainDict.key(filename)}", overwrite: true)
					} else {
						if(album == ""${mainDict.key(emptytext)}"") {
							saveToCameraRoll(image: media) >> saveToCameraRoll 1
						} else {
							saveToCameraRoll(image: media, album: album) >> saveToCameraRoll 2
						}
					} >> IFResult 44
					keysFrom(dictionary: pref) >> ‚§∑Open Photos after Save
				} >> IFResult 45
				keysFrom(dictionary: pref) >> ‚§∑Show Notification
				if(‚§∑Show Notification == 1) {
					repeatEach(media) {
						if(Type == "photo") {
							replaceText(input: "${Repeat Item 2.get(File Size)} ${Variable.get(File Size)}x${Repeat Item 2.get(File Extension)} (${Variable.get(File Extension)})", find: " ", replace: "¬†")
						} else {
							replaceText(input: "${Repeat Item 2.get(File Size)} ${Variable.get(File Size)}${Repeat Item 2.get(File Extension)}x${Variable.get(File Extension)}${gifh} (${Variable})", find: " ", replace: "¬†")
						}
					} >> RepeatResult 8
					text(text: "${Repeat Results}") >> text 2
					replaceText(input: "${Text}", find: "\n", replace: ", ", isRegex: true) >> Size Info
				} >> IFResult 46
			}
// ‚ó¢‚ó£		DOWNLOAD
		} >> IFResult 47
		if(command == ""${mainDict.key(upload)}"") {
// ‚ó•‚ó§		UPLOAD
			if(currentuser == nil) {
				if(usercount == 1) {
//Unable to get shortcuts action is.workflow.actions.getvariable
				} else {
					choose(list: users, prompt: "${mainDict.key(msg.accountprompt)}")
				} >> IFResult 48
var currentuser = If Result
			} >> IFResult 49
			keysFrom(dictionary: pref) >> keysFrom 5
			askForInput(prompt: "	‚ù∞‚ù∞@${currentuser}‚ù±‚ù±${Variable}") >> askForInput 1
//Unable to get shortcuts action is.workflow.actions.setvariable
//Unable to get shortcuts action is.workflow.actions.setvariable
var loop = Variable
			repeat(4) {
				if(loop ==) {
//Unable to get shortcuts action is.workflow.actions.setvariable
//Unable to get shortcuts action is.workflow.actions.setvariable
//Unable to get shortcuts action is.workflow.actions.setvariable
					selectPhoto(types: Images) >> selectPhoto
var img = Photos
					if(img > img) {
						if(img > mainDict) {
							resizeImage(image: img, width: mainDict) >> resizeImage
var img = Resized Image
							text(text: "‚Üí${Resized Image.get(Width)}x${ActionOutput.get(Width)}") >> text 3
var newpixel = Text
						}
					} else {
						if(img > mainDict) {
							resizeImage(image: img, height: mainDict, width: ) >> resizeImage 1
var img = Resized Image
							text(text: "‚Üí${Resized Image.get(Width)}x${ActionOutput.get(Width)}") >> text 4
var newpixel = Text
						}
					} >> IFResult 50
					replaceText(input: "jpg jpeg", find: ".*${img.get(File Extension)}.*", isRegex: true, caseSensitive: false) >> replaceText 8
					if(Updated Text .contains " ") {
						replaceText(input: "png gif webp", find: ".*${img.get(File Extension)}.*", isRegex: true, caseSensitive: false) >> replaceText 9
						number(value: 0)
						if(Updated Text .contains " ") {
							number(value: 1)
						} else {
							if(img >) {
								number(value: 1)
							}
						}
					} >> IFResult 51
					if(If Result ==) {
var newext = Variable
						convertImage(image: img, metadata: false, quality: true) >> convertImage
var img = Converted Image
						text(text: "‚Üí${img.get(File Size)}") >> text 5
var newsize = Text
					} >> IFResult 52
					if(img >) {
var low = Variable
var high = Variable
var cont = Variable
						repeat(11) {
							if(cont ==) {
								math(input: high, operand: low) >> math 9
								math(input: Calculation Result, operation: *, operand: "500") >> math 10
								round(number: Calculation Result, roundTo: Ones Place, mode: Always Round Down) >> round
								math(input: Rounded Number, operation: /, operand: "1000") >> math 11
								convertImage(image: img, metadata: false, quality: Calculation Result) >> convertImage 1
								imageDetail(detail: File Size, image: Converted Image) >> imageDetail 1
								if(File Size >) {
var highsize = File Size
var high = Calculation Result
								} else {
var lowsize = File Size
var low = Calculation Result
								} >> IFResult 53
								math(input: high, operation: -, operand: low) >> math 12
								if(Calculation Result false mainDict) {
var cont = Calculation Result
								} >> IFResult 54
							} >> IFResult 55
						} >> RepeatResult 9
						convertImage(image: img, metadata: false, quality: low) >> convertImage 2
var img = Converted Image
						text(text: "‚Üí${img.as(Image).get(File Size)}") >> text 6
var newsize = Text
					} >> IFResult 56
					downloadURL(url: "${mainDict.key(worker)}", method: POST, requestJSON: ) >> downloadURL 2
					downloadURL(url: "https://upload.twitter.com/1.1/media/upload.json", method: POST, headers: , requestType: Form) >> downloadURL 3
					if(Contents of URL .contains "media_id_string") {
//Unable to get shortcuts action is.workflow.actions.appendvariable
						text(text: "${newpixel}: ${Variable}${Photos.get(File Extension)} (${ActionOutput.get(File Extension)}${newext}) ${Variable}x${Photos.get(Width)}${ActionOutput.get(Width)}") >> text 7
//Unable to get shortcuts action is.workflow.actions.appendvariable
						if(Repeat Index 2 false 4) {
							menu(, [) {
							case("mainDict (moreimage)"):
							case("mainDict (continue)"):
var loop = Variable
							}
						}
					} else {
var error = Contents of URL
//Unable to get shortcuts action is.workflow.actions.setvariable
var loop = Variable
					} >> IFResult 57
				} >> IFResult 58
			} >> RepeatResult 10
			if(mid != nil) {
var 636B234B-CA7B-425C-9568-FC3D5B801303 = """	‚ù∞‚ù∞@Ôøº‚ù±‚ù±
Ôøº
Ôøº

"""
text("${636B234B-CA7B-425C-9568-FC3D5B801303}")
				askForInput(prompt: "${mainDict.key(msg.tweet2)}${Variable.key(msg.tweet2)}", default: "${Provided Input}") >> askForInput 2
				combineText(text: mid, combine: Custom, separator: ",") >> combineText 3
				downloadURL(url: "${mainDict.key(worker)}", method: POST, requestJSON: ) >> downloadURL 4
var version = Contents of URL
				keysFrom(dictionary: Contents of URL) >> keysFrom 6
				if(Dictionary Value .contains "id_str") {
					menu(, [) {
					case("mainDict (opentweet)"):
						number(value: 1) >> Open Tweet
var command = Variable
					case("mainDict (continue)"):
					} >> MenuResult 3
					nothing()
				} else {
var error = Dictionary Value
				} >> IFResult 59
			}
			if(input != nil) {
var command = Variable
			}
// ‚ó¢‚ó£		UPLOAD
		} >> IFResult 60
		if(error != nil) {
// ‚ó•‚ó§		ERROR
			keysFrom(dictionary: mainDict) >> keysFrom 7
			keysFrom(dictionary: error) >> code
			if(Dictionary Value .contains ""‚Ä¢${code}‚Ä¢"") {
				if(code == 179) {
					keysFrom(dictionary: mainDict)
				} else {
					text(text: "${currentuser}‚ù∞‚ù∞@${Variable}‚ù±‚ù± (Error ${code})")
				} >> IFResult 61
				menu(, [) {
				case("mainDict (openmenu)"):
//Unable to get shortcuts action is.workflow.actions.setvariable
				case("mainDict (quit)"):
				}
			} else {
				keysFrom(dictionary: mainDict) >> keysFrom 8
				if(Dictionary Value != nil) {
var 9D245D51-BB7E-4996-AA73-08739A01B109 = """Ôøº
Ôøº"""
text("${9D245D51-BB7E-4996-AA73-08739A01B109}")
				} else {
var 658204AC-79AF-4BD9-96A6-BB8D72D21ECC = """Ôøº
Ôøº
Ôøº"""
text("${658204AC-79AF-4BD9-96A6-BB8D72D21ECC}")
				} >> IFResult 62
				menu(, [) {
				case("mainDict (copyerror)"):
					setClipboard(variable: If Result)
					getClipboard()
				case("mainDict (continue)"):
				}
			}
//Unable to get shortcuts action is.workflow.actions.setvariable
//Unable to get shortcuts action is.workflow.actions.setvariable
// ‚ó¢‚ó£		ERROR
		} >> IFResult 63
		if(command != ""${mainDict.key(quit)}"") {
//Unable to get shortcuts action is.workflow.actions.setvariable
			if(command == ""${mainDict.key(settings)}"") {
// ‚ó•‚ó§		SETTINGS
				number(value: 1) >> number 7
var menu = Number
				count(input: pref) >> count 2
				repeat(30) {
					if(menu ==) {
						keysFrom(dictionary: pref) >> keysFrom 9
						if(Dictionary Value != nil) {
							keysFrom(dictionary: pref) >> keysFrom 10
							if(Dictionary Value == 1) {
								text(text: "${mainDict.key(onmy)}${Variable.key(onmy)}")
							} else {
								if(Dictionary Value == 2) {
									text(text: "iCloud")
								} else {
									text(text: "iCloud Drive/Shortcuts")
								}
							} >> IFResult 64
var D5AA8C00-FD04-429C-9A72-98E34EB075D3 = """
Ôøº‚ÄòÔøº/Ôøº‚Äô"""
text("${D5AA8C00-FD04-429C-9A72-98E34EB075D3}")
						} >> folderpath
						keysFrom(dictionary: pref) >> keysFrom 11
						if(Dictionary Value != nil) {
							if(Dictionary Value == ""${mainDict.key(emptytext)}"") {
								keysFrom(dictionary: mainDict)
							} >> IFResult 65
var 7A7705D1-C70B-4121-BBFF-7FAA7178E2B7 = """
Ôøº‚ÄòÔøº‚Äô"""
text("${7A7705D1-C70B-4121-BBFF-7FAA7178E2B7}")
						} >> albumname
						repeatEach(mainDict) {
							keysFrom(dictionary: pref) >> keysFrom 12
							if(Repeat Item 3 != nil) {
								keysFrom(dictionary: Repeat Item 3) >> keysFrom 13
								text(text: "${Repeat Item 3.as(Dictionary).key(title)}„ÄÄ‚û§„ÄÄ${Variable.as(Dictionary).key(title)}") >> text 8
							} else {
								keysFrom(dictionary: mainDict) >> keysFrom 14
								text(text: "${Repeat Item 3.as(Dictionary).key(title)}  ${Variable.as(Dictionary).key(title)}")
							} >> IFResult 66
						} >> RepeatResult 11
						list(items: (
        {
        WFItemType = 0;
        WFValue =         {
            Value =             {
                attachmentsByRange =                 {
                    "{0, 1}" =                     {
                        OutputName = "Repeat Results";
                        OutputUUID = "C95EBCE8-24FC-4077-8E92-DE21D48EED53";
                        Type = ActionOutput;
                    };
                };
                string = "\Ufffc";
            };
            WFSerializationType = WFTextTokenString;
        };
    },
        {
        WFItemType = 0;
        WFValue =         {
            Value =             {
                attachmentsByRange =                 {
                    "{0, 1}" =                     {
                        Aggrandizements =                         (
                                                        {
                                DictionaryKey = goback;
                                Type = WFDictionaryValueVariableAggrandizement;
                            }
                        );
                        Type = Variable;
                        VariableName = mainDict;
                    };
                };
                string = "\Ufffc";
            };
            WFSerializationType = WFTextTokenString;
        };
    }
)) >> list 2
						choose(list: List, prompt: "${folderpath}${ActionOutput}${mainDict.key(msg.settingprompt)}") >> choose 5
						if(Chosen Item == ""${mainDict.key(goback)}"") {
							number(value: 0) >> number 8
var menu = Number
						} else {
							repeat(Count) {
								keysFrom(dictionary: mainDict) >> keysFrom 15
								if(Chosen Item .contains ""${Dictionary Value}"") {
									number(value: Repeat Index 3) >> number 9
								} >> IFResult 67
							} >> RepeatResult 12
							keysFrom(dictionary: pref) >> keysFrom 16
							text(text: "${Number}${ActionOutput}") >> text 9
							if(Text .between 17...18) {
var tempdict = Variable
								if(Text == 17) {
									filterFiles()
								} else {
									filterFiles() >> filterFiles 1
								} >> IFResult 68
								repeatEach(If Result) {
									keysFrom(dictionary: pref) >> keysFrom 17
									setValue(key: "${Repeat Item 3}", value: "${Dictionary Value}", dictionary: tempdict) >> setValue 11
var tempdict = Dictionary
								} >> RepeatResult 13
var pref = Variable
							} >> IFResult 69
							keysFrom(dictionary: mainDict) >> keysFrom 18
							if(Dictionary Value == nil) {
								keysFrom(dictionary: mainDict)
							} >> OptionString
							count(input: OptionString) >> count 3
							keysFrom(dictionary: pref) >> keysFrom 19
							math(input: Dictionary Value, operation: ‚Ä¶, scientific: Modulus) >> math 13
							math(input: Calculation Result, operand: "1") >> NewOption
							repeatEach(pref) {
								if(Repeat Index 3 == Number) {
//Unable to get shortcuts action is.workflow.actions.getvariable
								}
							} >> RepeatResult 14
							setValue(key: "selection", value: "${Repeat Results.as(Number)}", dictionary: pref) >> setValue 12
var pref = Dictionary
							saveFile(input: pref, ask: false, path: "${mainDict.key(filename)}", overwrite: true) >> saveFile 7
						} >> IFResult 70
					} >> IFResult 71
				} >> RepeatResult 15
// ‚ó¢‚ó£		SETTINGS
			}
			if(command != ""${mainDict.key(connect)}"") {
// ‚ó•‚ó§		MENU
var menu = Variable
//Unable to get shortcuts action is.workflow.actions.appendvariable
//Unable to get shortcuts action is.workflow.actions.appendvariable
				if(usercount == 0) {
					keysFrom(dictionary: mainDict)
				} else {
//Unable to get shortcuts action is.workflow.actions.appendvariable
//Unable to get shortcuts action is.workflow.actions.appendvariable
					replaceText(input: "${users}", find: "^", replace: "@", isRegex: true) >> replaceText 10
					text(text: "${Updated Text}${ActionOutput}") >> text 10
					replaceText(input: "${Text}", find: "\n", replace: "  ", isRegex: true) >> replaceText 11
				} >> IFResult 72
//Unable to get shortcuts action is.workflow.actions.appendvariable
//Unable to get shortcuts action is.workflow.actions.appendvariable
				choose(list: menu, prompt: "${If Result}") >> choose 6
var command = Chosen Item
// ‚ó¢‚ó£		MENU
			}
			if(command == ""${mainDict.key(getlink)}"") {
// ‚ó•‚ó§		GET CLIPBOARD
				getClipboard() >> getClipboard
				matchText(text: "${Clipboard}", regex: "twitter\.com/|t\.co/") >> matchText 1
				if(Matches != nil) {
					runShortcut(name: "HiRes Tweet", input: Clipboard) >> runShortcut
					exit()
				} else {
					alert(alert: "${Clipboard}", title: "${mainDict.key(msg.noclipboard)}", cancel: false)
				}
// ‚ó¢‚ó£		GET CLIPBOARD
			}
			if(command == ""${mainDict.key(info)}"") {
// ‚ó•‚ó§		INFO
				menu(, [) {
				case("mainDict (showinfo)"):
					richTextFromHTML() >> richTextFromHTML 1
					quicklook(input: Rich Text from HTML)
				case("mainDict (contact)"):
					openURL(url: mainDict)
					exit()
				case("mainDict (goback)"):
				} >> MenuResult 4
// ‚ó¢‚ó£		INFO
			} >> IFResult 73
			if(command == ""${mainDict.key(connect)}"") {
// ‚ó•‚ó§		CONNECT
				alert(alert: "${mainDict.key(msg.connect1)}", cancel: false)
				showWebPage(url: "https://twitter.com/account/switch") >> showWebPage
				alert(alert: "${mainDict.key(msg.connect2)}", cancel: false)
				downloadURL(url: "${mainDict.key(worker)}", method: POST, requestJSON: ) >> downloadURL 5
var version = Contents of URL
				if(Contents of URL .contains "oauth_callback_confirmed=true") {
					getDictionaryFrom(input: Contents of URL) >> getDictionaryFrom 3
					url(url: "https://api.twitter.com/oauth/authorize?oauth_token=${Dictionary.key(oauth_token)}") >> url
					showWebPage(url: "${URL}")
					askForInput(prompt: "${mainDict.key(msg.enterpin)}", type: Text, allowDecimal: false, allowNegative: false) >> askForInput 3
					count(type: Characters, input: Provided Input) >> count 4
					if(Count > 6) {
						downloadURL(url: "https://api.twitter.com/oauth/access_token?oauth_token=${Dictionary.key(oauth_token)}&oauth_verifier=${ActionOutput.key(oauth_token)}", method: POST, requestJSON: ) >> downloadURL 6
						if(Contents of URL .contains "screen_name") {
							replaceText(input: "${Contents of URL.as(Dictionary)}", find: " ") >> replaceText 12
							setValue(key: "token", value: "${Updated Text.as(Dictionary).key(oauth_token)}") >> setValue 13
							setValue(key: "tokensecret", value: "${Updated Text.as(Dictionary).key(oauth_token_secret)}", dictionary: Dictionary) >> setValue 14
							setValue(key: "${Updated Text.as(Dictionary).key(screen_name)}", value: "${Dictionary}", dictionary: pref) >> setValue 15
							setValue(key: "users", value: "${Dictionary}", dictionary: pref) >> setValue 16
var pref = Dictionary
var command = Variable
							nothing()
						} else {
var FB790CDD-88DF-4B4F-B4D6-320AE6D1B0E6 = """Ôøº (2)
Ôøº"""
text("${FB790CDD-88DF-4B4F-B4D6-320AE6D1B0E6}")
						} >> IFResult 74
					} else {
						nothing()
					} >> IFResult 75
				} else {
var 20805F3F-4AB8-4F53-A1C9-1E3B864AF3A3 = """Ôøº (1)
Ôøº"""
text("${20805F3F-4AB8-4F53-A1C9-1E3B864AF3A3}")
				} >> IFResult 76
				if(If Result != nil) {
					menu(, [) {
					case("mainDict (copyerror)"):
						setClipboard(variable: If Result)
						getClipboard()
					case("mainDict (continue)"):
					}
				}
// ‚ó¢‚ó£		CONNECT
			} >> IFResult 77
			if(command == ""${mainDict.key(disconnect)}"") {
// ‚ó•‚ó§		DISCONNECT
				if(usercount == 1) {
//Unable to get shortcuts action is.workflow.actions.getvariable
				} else {
					choose(list: users, prompt: "${mainDict.key(msg.disconnectprompt)}")
				} >> IFResult 78
				alert(alert: "${mainDict.key(msg.revokeapp1)}‚ù∞‚ù∞@${Variable.key(msg.revokeapp1)}‚ù±‚ù±", cancel: false)
				showWebPage(url: "https://twitter.com/account/switch")
				alert(alert: "${mainDict.key(msg.revokeapp2)}", cancel: false)
				if(usercount > 1) {
					dictionary({})
var tempdict = Dictionary
					filterFiles() >> filterFiles 2
					repeatEach(Files) {
						keysFrom(dictionary: pref) >> keysFrom 20
						setValue(key: "${Repeat Item 2}", value: "${Dictionary Value}", dictionary: tempdict) >> setValue 17
var tempdict = Dictionary
					} >> RepeatResult 16
					setValue(key: "users", value: "${tempdict}", dictionary: pref) >> setValue 18
				} else {
					setValue(key: "users", value: "${mainDict.key(defaultpref.users)}", dictionary: pref) >> setValue 19
				} >> IFResult 79
var pref = If Result
				showWebPage(url: "https://twitter.com/settings/connected_apps")
var command = Variable
// ‚ó¢‚ó£		DISCONNECT
			} >> IFResult 80
			if(command == ""${mainDict.key(refresh)}"") {
// ‚ó•‚ó§		REFRESH USER DATA
				saveFile(input: pref, ask: false, path: "${mainDict.key(filename)}", overwrite: true) >> saveFile 8
				keysFrom(dictionary: pref) >> keysFrom 21
				filterFiles() >> filterFiles 3
var users = Files
				count(input: users) >> count 5
var usercount = Count
// ‚ó¢‚ó£		REFRESH
			}
		} >> IFResult 81
		if(Update Menu Shown ==) {
// ‚ó•‚ó§		UPDATE
		} else {
			if(version .contains ""${mainDict.as(Dictionary).key(version)}"") {
				number(value: 1) >> Update Menu Shown
				menu(, [) {
				case("mainDict (gotoweb)"):
					openURL(url: mainDict)
					exit()
				case("mainDict (downloadupdate)"):
					downloadURL(url: "${mainDict.key(downloadurl)}") >> downloadURL 7
					expandURL(url: "https://routinehub.co/download/${Contents of URL.as(Dictionary).key(id)}/") >> expandURL 1
					replaceText(input: "${Expanded URL}", find: "^.+icloud.com/", replace: "shortcuts://", isRegex: true) >> replaceText 13
					openURL(url: Updated Text) >> openURL
					exit()
				case("mainDict (notnow)"):
				} >> MenuResult 5
			}
// ‚ó¢‚ó£		UPDATE
		}
// ‚ó¢‚ó£		NOT QUIT
	} >> IFResult 82
} >> RepeatResult 17
if(‚§∑Open Photos after Save == 1) {
	openApp(id: "com.apple.mobileslideshow")
} >> IFResult 83
if(Size Info != nil) {
	sendNotification(body: "${Updated Text}", sound: false) >> sendNotification
} >> IFResult 84
if(Open Tweet ==) {
	url(url: "https://twitter.com/${currentuser}/status/${Variable}") >> url 1
	openURL(url: URL)
} >> IFResult 85
