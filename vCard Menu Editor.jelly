import Shortcuts
#Color: green, #Icon: sliders

/*
vCard menu editor
2025-04-01 	v1.0.2
https://routinehub.co/user/gluebyte
https://bsky.app/profile/gluebyte.bsky.social
*/
randomNumber(min: 1, max: 2) >> randomNumber
if(Random Number == 1) { >> IFResult
	getIP() >> getIP
	if(Current IP Address != nil) {
		downloadURL(url: "https://update.gluebyte.workers.dev/?id=49E1F522") >> downloadURL
		if(Contents of URL .contains "2025-04-01") { >> IFResult 1
			menu(, [🌏  Go to RoutineHub, 👾  Download Update, ⮐  Not Now]) {
			case("🌏  Go to RoutineHub"): >> MenuResult
				openURL(url: "https://routinehub.co/shortcut/19228/") >> openURL
				exit()
			case("👾  Download Update"): >> MenuResult 1
				downloadURL(url: "https://routinehub.co/api/v1/shortcuts/19228/versions/latest") >> downloadURL 1
				matchText(text: "${Contents of URL}", regex: "(?<="id":\D?)\d+") >> matchText
				expandURL(url: "https://routinehub.co/download/${Matches}/") >> expandURL
				replaceText(input: "${Expanded URL}", find: "^.+icloud.com/", replace: "shortcuts://", isRegex: true) >> replaceText
				openURL(url: Updated Text) >> openURL 1
				exit()
			case("⮐  Not Now"):
			} >> MenuResult 2
		} >> IFResult 2
	} >> IFResult 3
} >> IFResult 4
list(items: (
    "{ \"empty dict\":{\"dict\":{},\"\\\\dict\":{\"Icon\":\"\"}}, \"escape dict\":{ \"icon sub\":[{\"Title\":[\";\"]},{\"Subtitle\":[\";\"]},{\"Notes\":[]}], \"sub option\":[{\"Title\":[\";\"]},{\"Subtitle\":[]},{\"Option\":[\":\",\";\",\",\"]},{\"Notes\":[]}], \"sub option2\":[{\"Title\":[\";\"]},{\"Option\":[\":\",\";\",\",\"]},{\"Notes\":[]}], \"option\":[{\"Title\":[]},{\"Option\":[\":\",\";\",\",\"]},{\"Notes\":[]}], }, \"type dict\":{\"Icon and multiline title\":\"icon sub\", \"Multiline title (no line break), complex menu building actions\":\"sub option\", \"Multiline title\":\"sub option2\", \"Multiline title, no subtitle\":\"option\"},  \"init menu\": \"BEGIN:VCARD\\nVERSION:3.0\\nN:Read menu from clipboard\\nORG:vCard action, List, Choose from Menu\\nPHOTO;BASE64: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\\nEND:VCARD\\nBEGIN:VCARD\\nVERSION:3.0\\nN:Create new menu\\nPHOTO;BASE64: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\\nEND:VCARD\",  \"type 1 menu\": \"BEGIN:VCARD\\nVERSION:3.0\\nN:Icon and multiline title\\nORG:Optional\\\\n2-line subtitle\\nPHOTO;BASE64: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\\nEND:VCARD\",  \"type 2 menu\": \"BEGIN:VCARD\\nVERSION:3.0\\nN:Multiline title (no line break), complex menu building actions\\nEMAIL;TYPE=Option:Non-empty\\\\n2-line subtitle\\nEND:VCARD\",  \"type 3 menu\": \"BEGIN:VCARD\\nVERSION:3.0\\nN:Multiline title\\nTEL;TYPE=Opton:Long+single;line,subtitle;<with,limited+characters>\\nEND:VCARD\",  \"type 4 menu\": \"BEGIN:VCARD\\nVERSION:3.0\\nEMAIL;TYPE=Option:Multiline title, no subtitle\\nEND:VCARD\",  \"icon menu\": \"BEGIN:VCARD\\nVERSION:3.0\\nN:Pick image from Photos\\nPHOTO;BASE64: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\\nEND:VCARD\\nBEGIN:VCARD\\nVERSION:3.0\\nN:Pick image from Files\\nPHOTO;BASE64:iVBORw0KGgoAAAANSUhEUgAAAF0AAABdCAYAAADHcWrDAAAABGdBTUEAALGPC/xhBQAAACBjSFJNAAB6JgAAgIQAAPoAAACA6AAAdTAAAOpgAAA6mAAAF3CculE8AAAAhGVYSWZNTQAqAAAACAAFARIAAwAAAAEAAQAAARoABQAAAAEAAABKARsABQAAAAEAAABSASgAAwAAAAEAAgAAh2kABAAAAAEAAABaAAAAAAAAAEgAAAABAAAASAAAAAEAA6ABAAMAAAABAAEAAKACAAQAAAABAAAAXaADAAQAAAABAAAAXQAAAAAo9EbvAAAACXBIWXMAAAsTAAALEwEAmpwYAAACyGlUWHRYTUw6Y29tLmFkb2JlLnhtcAAAAAAAPHg6eG1wbWV0YSB4bWxuczp4PSJhZG9iZTpuczptZXRhLyIgeDp4bXB0az0iWE1QIENvcmUgNi4wLjAiPgogICA8cmRmOlJERiB4bWxuczpyZGY9Imh0dHA6Ly93d3cudzMub3JnLzE5OTkvMDIvMjItcmRmLXN5bnRheC1ucyMiPgogICAgICA8cmRmOkRlc2NyaXB0aW9uIHJkZjphYm91dD0iIgogICAgICAgICAgICB4bWxuczp0aWZmPSJodHRwOi8vbnMuYWRvYmUuY29tL3RpZmYvMS4wLyIKICAgICAgICAgICAgeG1sbnM6ZXhpZj0iaHR0cDovL25zLmFkb2JlLmNvbS9leGlmLzEuMC8iPgogICAgICAgICA8dGlmZjpZUmVzb2x1dGlvbj43MjwvdGlmZjpZUmVzb2x1dGlvbj4KICAgICAgICAgPHRpZmY6UmVzb2x1dGlvblVuaXQ+MjwvdGlmZjpSZXNvbHV0aW9uVW5pdD4KICAgICAgICAgPHRpZmY6WFJlc29sdXRpb24+NzI8L3RpZmY6WFJlc29sdXRpb24+CiAgICAgICAgIDx0aWZmOk9yaWVudGF0aW9uPjE8L3RpZmY6T3JpZW50YXRpb24+CiAgICAgICAgIDxleGlmOlBpeGVsWERpbWVuc2lvbj45MzwvZXhpZjpQaXhlbFhEaW1lbnNpb24+CiAgICAgICAgIDxleGlmOkNvbG9yU3BhY2U+MTwvZXhpZjpDb2xvclNwYWNlPgogICAgICAgICA8ZXhpZjpQaXhlbFlEaW1lbnNpb24+OTM8L2V4aWY6UGl4ZWxZRGltZW5zaW9uPgogICAgICA8L3JkZjpEZXNjcmlwdGlvbj4KICAgPC9yZGY6UkRGPgo8L3g6eG1wbWV0YT4KaRLqXQAACepJREFUeAHtndlzHFcVxr/unk0zo33zvhEbg62QuCwMCamQ5IEqslBFgCqoIkUVfxIvvPAIVRTg4oEHKibEzmK7ghPH8RIvigNRbEuytpFGmrW7+U5LI40l2d231eOxpHurlBl3nz733l+fPvfcnntPjN8N2y50eawEzMdam67MI6ChN8EQNHQNvQkEmlCltnQNvQkEmlCltnQNvQkEmlCltnQNvQkEmlCltnQNvQkEmlCltnQNvQkEmlCltvQmQI+FqdMuzKA0PozK9BjswiycSplqnACqDBimBTOeQrytC8nevYi193nHAly8aUSUoDvlAop3b2Lm+lnkhz5BcfQLuPM5uJUKHNeBEQSLJdBbEOvYhsyBZ9F2+DlkvvEsb0JPkKs3hUxg6HYxj9nPz2LsvT9h7vo5lHOjcErzcF0bhspvT3JnRD6WRP7Wf5C/cRYdg6+j+/irSPbv3xRQ/ToRCLprVzxAI//8PaYu/5vWPQu3ZtYEqMK8JmxUSqjkRpC7NoXSxF1UJu+h54VfIL3rWzBiCb92b+jzgaCXRm5j/MO/YPqzd+EUZxc6rER6NSPvcrlh5RIKd6/j/ukcb8Io+l76NbIHT8BMpFZftEmO+EJ3nQpmbpxH7vK7HDRnHui2YZgenFi2C1a6nRa6tjrDdWHTsu25HGyOAXa1xHF3eeB1bQflybuYPP93VPNT6H3hl8h+8wTi7b0wzQWd67zHD7Q7zD8M06QrBQf99Qd8a1Oqa1VlahT52596UGqHPc9CF9Cy/Sl0HP0h0vufgZlugxVf2y24bK1D0AK0dHcIs7yJc19dhcunxpGesIhMheenP30bpftfofXgIJI7DyPR2Ue9LTAMq1b9Y/10jYWIy2LEZWVavWgrnumAkWCbLF98a7bV96ri2P9QGrkFh25AigecYV/LzkN0BW+h57mfIdG7h1BqTn7NehYOCtjcGGZvXcDE+ZPIXTyF8vQ9uHVWbxfnkf/iE96UK4hnuhjVdMNgh6OwsEe07JGnBK4ZT8JsySLZ3o/kjoPI7D+G7P6jsFp7lENeX+jVmXGUOMi5TnWpYVaqFW0DL6H7+z9Fsm/v0nHfL7wx8Y5+dB77EVK8LtG1HRNnT6I0ehsyWC8avafGZexfnh7xBltfvY9RQFyq1dqNzJ4jaH/6FXQOvqo8+PtC9yY/c/TldUTirZ1o3fc0Ej27QnVXLCe99yj6W36LeLrDG6QLX1/zQlBnhfOuqzZUXVFf5HI+4ubuI3flNIr3bqE8NYK+V35Dy/9OYIv3he5Wy3BsmXEuFlqrPGYmYZlWvHY01Geqbz96XvwV3dNu+vJTmL99EYURTrg4y13BPpT+qC+qGYTXNv6nNH4Hk+f+BpPjm8UxTca4IMUful3lo88JEF32ktUR9sMGzSCV1sskunag67tv0D8+Q1/+Mf39R6hwILVLeVp+0NcL9Rqj/S4DvEsG1flpBhP3GH0tG4TAF0ufvPAPBhMDSMnYFmCO4Qt9rS6IX1u6AWsJKB4zGQkkdxxConsXsoefZ2g5hSrDS6dcZGhpK2qLVtyDzqdd3jMVhq8gd/V9FL7+nM1aGOMEfOn+MCOyj9A+8DKSPbt9GxAKuq/WEAIS/RipDFL8A/bysXIYyssrBulWc4tEVzLQS1CRoEsce+cPfAfFiI4eQIpL91u8d5MBwZcbC/oqrDLxstY/EVmlN8SBhWA4BTOVRdfgayiN/dcLfd3ZyYUnnoZRpH8v83VGkPJk9CpIS58AGXkaU/37kHnqOGKtvcstInQ7P+25xOWDD/+moT+czZpnZKBM8PVEjLPSxamiJyevS8TNBCmhoHtuVsKZLVoseQWQ5F/9exj695qP98MSbiDlHZU3gqWxL/30b8rz5elRoFpZ1begZqgMXUKo0sQdjJ35I8On91ZVvBUOVBibFzmJc+reGan0Wxm6KK/OTmDm8mmVerRsHYFQPr3uev01BIFQlh7Ud4Voz4a5ZD1TNmXoEqvKtD3RuZ1hU1vdC5kNw2tdDZUfNeRH+vLkiLf8JIwyZehSSYLLJ7p/8HNkDxzjjGw99zxMk5t8DWfKBf7AMnHuJOaH+etXiME0FHQz28kfjwfRyWUTW9HV5Ph7cO7qGe/XsjAmFwq693LK4E9Y63yf3mSbDV29yQVTD0yMFDXp6EURWBTiGnoUFBV1aOiKwKIQ19CjoKioQ0NXBBaFuIYeBUVFHRq6IrAoxDX0KCgq6tDQFYFFIa6hR0FRUYeGrggsCnENPQqKijo0dEVgUYhr6FFQVNShoSsCi0JcQ4+CoqIODV0RWBTiGnoUFBV1aOiKwKIQ19CjoKioQ0NXBBaFuIYeBUVFHRq6IrAoxH2hu1xOJOtc6ou3gZUbsbZqkYRCss2zltfA4yCMVnB6GB9f6GaCSRZi8eXNtFxG50pynQq3G27R4nKrpU0GtZ1/3iovLrczuAgpSPGHLtkf4mkuFF1WJ1vXJVWIXcgvH9wi31ym1PL6zowd9VAkYYPBbE1Bii90K9MJi0nOUHcXZffw7M3z3gLK+rwtQSrc6DLz3D86c+PcwpbGxc7QASPOnDcxrvEMUnzXMiaZqSLFrHJzQxe8jUxi8A7Tg8xc/QCxdCePVZDZOwDZ/BTUpwVp2JMmIy5F8haMv/9n5C69gyqf9qWnnxu+4j07keSW+yDFF7rkcknv/jamLp2Cw+wPUmR5dIVpQcaZjEDShki2uZhkm+OC0pWDbpBGPOkykgalmp9E4c51zA59zE26dwTCUrMl5WFm9xEktx1YOvaoL77QY1wWLKmdMp8dwcy1DzhqL+6JZ6Wy92jq0r8wfeWMt1FAkjTIovlNVSRwYJ/t4hw/19hRx/6mCDtz6AT3l/YF6rovdNGSZS6TrsGfoMJt2IWRoVUL4aUxdkH+AtW5KYRqpiVPeMfxHzO/5PfAhGOB+hYIeoyZfLpOvIbK/BQmP/wrynQpNn2cGLU8ZcsPWqA6N6xQDbR0QMLDWFsfugi89/k3vQweQTsWCLooSzL7Q//Lb3lbtGcuvo15+rcqExJUJWxkJjpp0GbzLPUQxbBcJqO0uFPaynYw28UeptR6kSm13kR6z4DSWGao/r/rxI/PD19nytchWjyTqnFAlbidef9gSirSenOob/UG/i7Aub0NLtMVWgwNJW9ZettBpPcNeBYedFJUQ6AMvXahpJmSXWbeAENLd6ocYAV63ahek90MnyYz9LlMU2il0rBa2mAm06G3wAR2LyvBSTYISYIpf7qoEQg23Krp1NI+BDR0H0CNOK2hN4Kqj04N3QdQI05r6I2g6qNTQ/cB1IjTGnojqPro1NB9ADXitIbeCKo+OjV0H0CNOK2hN4Kqj04N3QdQI05r6I2g6qNTQ/cB1IjT/wcxOVc1FGqGQAAAAABJRU5ErkJggg==\\nEND:VCARD\\nBEGIN:VCARD\\nVERSION:3.0\\nN:Enter base64 text\\nPHOTO;BASE64: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\\nEND:VCARD\\nBEGIN:VCARD\\nVERSION:3.0\\nN:Leave empty\\nEND:VCARD\",  \"action menu\": \"BEGIN:VCARD\\nVERSION:3.0\\nN:Text action\\nORG:Easy to edit, merge\\nPHOTO;BASE64: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\\nEND:VCARD\\nBEGIN:VCARD\\nVERSION:3.0\\nN:Dictionary action\\nORG:Compact\\nPHOTO;BASE64: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\\nEND:VCARD\",  \"copy menu\": \"BEGIN:VCARD\\nVERSION:3.0\\nN:vCard action only\\nPHOTO;BASE64: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\\nEND:VCARD\\nBEGIN:VCARD\\nVERSION:3.0\\nN:vCard and all actions\\nORG:Set Name, Choose from List, etc.\\nPHOTO;BASE64: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\\nEND:VCARD\",  \"edit menu\": \"BEGIN:VCARD\\nVERSION:3.0\\nN:Delete\\nPHOTO;BASE64:\\nEND:VCARD\\nBEGIN:VCARD\\nVERSION:3.0\\nN:Insert new item above\\nPHOTO;BASE64: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\\nEND:VCARD\\nBEGIN:VCARD\\nVERSION:3.0\\nN:Insert new item below\\nPHOTO;BASE64:iVBORw0KGgoAAAANSUhEUgAAAF0AAABdCAYAAADHcWrDAAAABGdBTUEAALGPC/xhBQAAACBjSFJNAAB6JgAAgIQAAPoAAACA6AAAdTAAAOpgAAA6mAAAF3CculE8AAAAhGVYSWZNTQAqAAAACAAFARIAAwAAAAEAAQAAARoABQAAAAEAAABKARsABQAAAAEAAABSASgAAwAAAAEAAgAAh2kABAAAAAEAAABaAAAAAAAAAEgAAAABAAAASAAAAAEAA6ABAAMAAAABAAEAAKACAAQAAAABAAAAXaADAAQAAAABAAAAXQAAAAAo9EbvAAAACXBIWXMAAAsTAAALEwEAmpwYAAACyGlUWHRYTUw6Y29tLmFkb2JlLnhtcAAAAAAAPHg6eG1wbWV0YSB4bWxuczp4PSJhZG9iZTpuczptZXRhLyIgeDp4bXB0az0iWE1QIENvcmUgNi4wLjAiPgogICA8cmRmOlJERiB4bWxuczpyZGY9Imh0dHA6Ly93d3cudzMub3JnLzE5OTkvMDIvMjItcmRmLXN5bnRheC1ucyMiPgogICAgICA8cmRmOkRlc2NyaXB0aW9uIHJkZjphYm91dD0iIgogICAgICAgICAgICB4bWxuczp0aWZmPSJodHRwOi8vbnMuYWRvYmUuY29tL3RpZmYvMS4wLyIKICAgICAgICAgICAgeG1sbnM6ZXhpZj0iaHR0cDovL25zLmFkb2JlLmNvbS9leGlmLzEuMC8iPgogICAgICAgICA8dGlmZjpZUmVzb2x1dGlvbj43MjwvdGlmZjpZUmVzb2x1dGlvbj4KICAgICAgICAgPHRpZmY6UmVzb2x1dGlvblVuaXQ+MjwvdGlmZjpSZXNvbHV0aW9uVW5pdD4KICAgICAgICAgPHRpZmY6WFJlc29sdXRpb24+NzI8L3RpZmY6WFJlc29sdXRpb24+CiAgICAgICAgIDx0aWZmOk9yaWVudGF0aW9uPjE8L3RpZmY6T3JpZW50YXRpb24+CiAgICAgICAgIDxleGlmOlBpeGVsWERpbWVuc2lvbj45MzwvZXhpZjpQaXhlbFhEaW1lbnNpb24+CiAgICAgICAgIDxleGlmOkNvbG9yU3BhY2U+MTwvZXhpZjpDb2xvclNwYWNlPgogICAgICAgICA8ZXhpZjpQaXhlbFlEaW1lbnNpb24+OTM8L2V4aWY6UGl4ZWxZRGltZW5zaW9uPgogICAgICA8L3JkZjpEZXNjcmlwdGlvbj4KICAgPC9yZGY6UkRGPgo8L3g6eG1wbWV0YT4KaRLqXQAAExpJREFUeAHtXXtzG1cVP3q/LEtW/MzbcZykSfqkJZ3CJwAKFKYtU+AD8JGY4Qt06MCUlhb4AzrtFDKlQ2kezTu2k9iJHVu2JVnvB7/fdTasVmv7rrSy1BmdGUUrebX37m/PPe9z45lLX2nIgPYVAe++jjYYTCEwAL0HjDAAfQB6DxDowZADTh+A3gMEejDkgNMHoPcAgR4M6e/BmFpDNhrw2ep1qRWLUikU1bvUalJ/8vLg7x6fT8TrFY/XJ/5QULzhkPjCEfEFA/iufxdx34BOkBvVqlQyOSlnM3jPSjm3pcCuKdBLUqtWpF6tiTTqIjW8ALrH5xWv3y++AIAG6IFwWPzRiPjjQxIaHpZQchgPIypenNcv1HPQt4HOSmF1Fa+0lDMZKW1uShXgVwsFURzvEC0vHoY/EpXgSEKC8biEUkmJHDggodGUBGIxEY/H4RXdPb1noNdKJSk+XpX8w+VtwHFcBtCNWrXjO6QIKue4UrLqWn6sgODIiAI+PDEmsakJCSWS4vFDPPWAPPsd8CLYheXHknuwKFtLD6W4uiZ1fLdfUbcAxE5sYkJih6ckenBKwiOpfQd/30BvgPsKADg7f0+y9+5LCce1crkHfAbpglF9sSg4fkriR4/I0NHDEhiOQ+rsj9jpPuhQkBUoxOzCPcnMzUt+6ZFUYZHoEoGgePBBQXqpLKE0aZl48arhQUKrSr1cwTVLWDGwcnCsS4Q4AGVL0JMz0xKZmhRfKKT787bP6yroDZh8BcjqzZu3ZfPOHCySzJ6KkUowMBRTYAQTcSi+ISjFsALdFww+Ad2jgKfsbtQBeqUiDawaZVoW8rB+aAFlpbIOhYwHvJcy5pjh8TFJnJyRBMAPJobbBlTnh11TpLVySbbuL0n62nXZerAklOU7Ebk5EI/BykhJeHRUIngPAHCafD6Yf05sbnJ9eWtLKpsAPbOpRFoxnYbuSO84Bz68/EOswK08VmVWkqdPqXl0y8zsCqfT1CNnb1y9JnkozQbtahsi2CFwFRVaZHJSIhOjyqrwwdFxhSDaOBeaosWVFclRcWM+1Xx+R8XNsYeOHJED55+R2KFDXVGyroNeyeVk8/YdSV++JuSwnSgA+zl+5BBeRyRMEw6KrJv2c6NSlQLmQ4spB0VOU3Wn1UdxEz14UEZfOC9Dhw+LFx6um+SqeKlAlm7cuCnpK9ekDAfHjshJMXB1/MRxiR87um9Wgyfgl+jEuBJdMaysDFZibmFBrQLqHjMpcbO4KCvwGXg8fOyYq8C7BjqX7PrNW7IOwOlR2hG9w+GZ45KcnZUIFFcvnBMDfJqIkbFRWQeT2OmcOo0AyPk1mDjk/PjRo67N1xXQuUyzt+dk/ep1Ww6n7I6Mj0oCCioxc0KCFCU9pkAkIsMnaKnEZR3MQM6nxWMmWj0FiKHVry4rq4ky3g3l2jHodHro7KxeuSql9XXznNUx7ekIZHbq2fMyfPzovtjBLZPY4QsGyyLj45hTWAKwktLfXJfSRvMqJcfnHz6EjgqJPxBU97LD5bS/7gx0cMLWo2XF4cXHay2DEvChw4ck9fyzUJiHhUu7H4l2+cjZMyJwvNKwuEprzQYA5Xru/n3xw4sdxcOhxdUJdRTvJFdk4PjQIkBgtmkeFClReHipFwA4XO1+BdyYtB/Rx5Ezp2AqnkU8Jml8/fS9VipL9u48XnM7Wj1PT97joG3Q6/AAs/MLsgnXnh6hlWgppJ7bNrl6oTCt89H57IecT87CK4XuodK3EmX+Bsxhyvm9vFzrb82f2wOdCmbl8bZrDzPRSuFkQpJnT8PUOop4SX+KFOucjc8GxydOTtvqHzpX2yGNZqVr/F7nvS3QaR4yeEXgreRDcGr45AkZnj4uXrc8S+sgXf5MGZ+EqBmC82YNQVC+03Cgg9VgFqsNcg46uJzudHbhQYtYoRyn4kycOomg1VAb0+mfn4QPjCoZHz6QapkUA3cZRE2LNtZay8k2XzgGvYpgUg4BrPL6RsvlQhArtH1DqQMtf/u2fUFzMnrooFqx1nAvTQbK9a2lpba43RnoNBGXVyS/+BCJ+ualxeTw0DEkBMDpbjgQ/fCQ/IjhM1wRhZ9hTW9UIGK3gENpo5X59pq7Iy1XQWyaSQg7Lg8fGJEYgldMhzkhWkGZOVhBt26rgFfy9CxiMoh19IkCDiPMHAczFVZWVXTSfG8MB28Bj1BqpEX2m8+zHjsCvQyngcqzhctVVG4KgawJ6/V3/4yVs3r5qtx59z15/N9LTALJ6PPnZfqNH8v4yy/ZWg+7X9D9v/LhxyBmovcWlfFgHoEZsSKqGGhYONFh2qCrLBDymkWLt8ZJBCHLGQ9nvYkTYlZn+Z8XZeHjv2HiBfVTBp8KGIPhhYkLr/QF8OHkCEK9k9uJDkuqkRUNTJB0BXRmVegeMylgpSjKGugMOaU6YtwlWAIG4Pw9M04rF798eql+AN6ITFKMVGG5mYkWDLk9hjCHri7T5vQSrJViujWgRbuc5pWTJ21MmrnPxDQSwhBLBcRwDOpH4Al4CAVLlONmb5ThgTLCITXkZr2aZrI26Ky8soY+CRLNRE5I9ykbwPKd2f2p115VinTuTx+CY/4fNHMD+PJmRtavM17+QIJQiEzBRcbGzFPQPg5Eo/htSrIQoRWsejMxBsWxdBlPC3TGVlhbWM01D8aBg6iUokxvl2hmnnz7Z1LDGPc+/qtrwDPGv/jZ50pJ5+49kBAqvI7/5Acy/foPkXRuw4+A4xccTqgqBSvoZdZd4hU7pIeCFuiUuSXEWKwJZoZumZBQ9YF647WehZthYuPMr3+hin0WPvqLK8BTDCx98qks/+sLJQ5YUeaDJZKcPSlT33+tdR4a3/Be+eK1zUTrhaDT2LCGDcznGcdaoNegPGtPrAvjh3xnAVAQcqxjmxrAx+HJnv7V2yo3Pf/nzoGnqCrCtjbL3xzA2oIn2S6RuYI2fgjjMbUiMEL5Bwuj9iIt0Ku4IF9WYk0KA/tuEOM2BH72l2+ry3UKfB1l1xRZZmKAqpMCVVYF+CDbmVynAjUTzV8yp2ug1wqoDcfLSnSTab24RQSesRu3gHdrXubr+FF2x/SeFfRano0LrRiZf2sca3F6rVJGMX4z1/ACDAR5Xa79awIeD2EBooaleQa5YdUY12rnXZX42YSs2bCgWxCrBXoDXQ9crlZiRoiBLrfpKfDvvKUu3VfAo9XGA1PXSmxuQJGM9Wvbz1qI0SVX7SaWS7AeRPX9WL5342O/Ak9/hFablciYNc2khibo9RZzkYNulyxbg57W6bT/2QD+1BPluhfHT174rilbxcpe9+dGJrM1C1klhgCeDmmBriYP+Wq9KM0xs0mmM6DTcwh8fPq4EHgez3/4sa2M93LZQ9RNvvKyqjzwhYNdCZapEjwbcBuYm+5D1gJ9u4vNp4x/M2jsdOOy6jYZwM9CxpOXFj4A8AgyGUTlunzxC/HApPOjhn30xRdgysYQ9XTHnDXG4Xud+o3i1kJK1OLB65AW6EqOYVlZSy0aUByqxVBnpA7PMYA/BeDBUzL/wUdNwNNOfvT5RdVPyqhgGCnDgEs+RNPU61UVdm76Dh+2QW+V9dbz+FkLdI8PLSe4EbF0rTTggTHzs19E4JUd/86bSq4S+Dzqzg1i/nbxk8/g7gdl+qc/QgeHs/i+cZ3d3mslmIY29jhFm25JtRboPrafwCFgKbSZdvJUzed049gAnjc59/6HqsLMGIdzvP/3T6QBFcTIn9tUY1+TTVeJchSDeo6iFui8IJ0CK1XphaGbuRcUP35MZt76OVrSg3Lnj++jDuXB02kwvr34j0+ffnbrgEq0soUYiyUEwOsTH3+0FSO7sbVAZ1mxHegVxBq4pKlc2omn203IyXdxdMXNvPmGCkXc+v0fVK2h8fuSTcLF+Fu77zVEE3m/1mgrxZ4XjOmFNNAhLdB9Q1Hb8C29MC5hJ1kTnUmpc2CWVbGMq+As2AwtP/N44KSEAqrUefqN18HxIbn17nuywaoCG5Ou5QJtfFHCvTKEayWKXxVt1dx/QA90KKYgNjagYrLmSNVEHGRNrBO2+8xOjtUvv5LVry+hqwNymY6HheigUOx5YRYG0ZnHJc/uDpY0V7sg8uiPqE0iOB8LsXTaSaODFugMcqtkBWLJVtBVYnZtXXXIcZl1SpSbq//+j1z57e9kDeUZTF7vRoz/+LHdSACrUS2ILnF5HUE/5oirKLuwEpvWAg5q1vVAxyjBBHKhqNu2Fo0yuVFKo+WcsWQXnBH6Ao8vXZbVS1e0StYYI2dHH197ET1GWxd+rx/i7yU0AtMhs6v5CSWT2vlRDqVnzePE4BAao1BMyWSymbjs8sjQFGw6Mczn6R7T4+SmOe2Cs9s4bEm3qzvf7Tf8GxUnS6Ttan7YMBZSuGjzrz7oyssbOwBPb6RljiX2ZyIVVrcxpVpO3uMLuvFjLz4n4y+96F6CBGKP+71Mfu+C6obeYwotfy6j+zq/vGwrWtjAxi49J6T/eHBV1reEMXmKGHOgi0qsgCKcIjL7bHnpiADQGAA/+xufpC9dVWUfKsjU5kWVOQdvkbU14995SbXiOLkUxy6iJke1+Fj0BVNz4dExx6vHEejMh8ZQXsbMOutgzJR/jD1c4KCwBsZaWmw+T+eYRagHkbGfevUCfADEOmysF53rqHMgr5ho0XXRrdelSZxBAwC53Urcx4Ab9jht73EEOuUsa/pYOmwFnfGILDqQWV4XA8e7YcnwZnx49Yroh6iuC9RXWh0iPkQWlrZTQ6OtSI0bZ8ENa9BpJlmJypT9OFXEP771pAwErN67C4g5tXJ5hFwO0NtZ1Y5BZ4cCe+vjhw+2WBjMo25vptN521+vHxo9T3q3W4+aC4s4L4ZE2KZJJdoOOQadg7CMjh0KLJi3Eusd12/cQpfCkorJWP/+bfjMKGLm7hxa1+dbMvx0/7hVSnz6WFtczvtvC3TKdi6toR3azmnTcicMbmjQkRLswROic8Z9xjau37QVK2Q4dg7SimuXHClS8yDbja4nUCa8Aa6YbwKX/fS0cLywuVlyx62a3FCs5vG7cUzFmbu/KGvwhs21NsZYNBEZy2c7DMVsu9T+LzEi7XZuvWTnHGxzzPz2DdCu78Tsa/fuHPyO883dfyDpry+jVn6lyQ/hZVh2EYMBkTjdebtm25zOiSiligZXxj0Y2WsxI+E0bd65q2T76HPnJIz9EHsRd+dcdyMmtnPoi10l4CgwtcZXKMfDMIWTz5wRWi2dUkegc3DW9nHJMeC1hh0k2CZjJnqrVEoNcNII98WCEmrHzDJf081jMgy7v9e/uaHiK3Wb/cYYW0lh7nHoMTdiQh2DTgAY9qWYYS3f5o3b2KqvucKXSzeDzRsYFi6jmzqBh8RAUS9Jufdr8Cuwi0cGGwQVd+gHZadJ6tmzUJ7TpkKmzmbuCuicAt3/1Lmzqg4mc/tuC/C8SQbF2MXAhleuDnqv+871cHoqSLmxi4+OHBU+twu3oxDC2SPYiiQxM2ObrrT7jc537u5Whxti+DN99Rs4FndaRI0xIZYrRGHR0AoYQlcaza92YyPGNfd8x9xYG8NoIS2U7Nw91YRs3afGuA7D2Mlzz8jI7EnxY3NON8ld0J/MjJ143JqJS9eqXM2TZ7otwljNITb+Tqqtttnd4aZ5yRVmNNkyUsgWe+7TaFf6zblxbHqaI+fOYZM3iEGHvbHm+9vpuCugczC60dk5bKZ27aayeXczGWn/cvdR5jgjiNmzKYvbf6gHAFPNKbHKmEDzgbMNhhsrsxWmCGbYrROD/8NABJseswuPK7Bboq9roBMoutNcyuvXb9huw2cFk1zmjw0hvICOPWZ5sJOcqklkCQhqSpi18vqRuTLSbuBiVTuPPCrNPvVfOUBnGIAzqV0B0FbFbh2Xn9lLxELV5KlZiSL23onzY3d983ddBZ0DEZTC2qpkbt1VwTDK/N243jw5yvkAdvxngMnLYh5WULE+HGV+Kq2Hf1WzAjkb7TncVZoA11C2YbW1zdc1H/NBUqEzlkT3ntZKt6nroBs3QHOR+8RkEUTiPil2jcDGufvxrtoxYXGxYImWFJt6u67Mn9zYvoHO8cjhzMTkEIHM4wFQsdE5Maf+ug04q2uDqGpQkUK49XTW3OoQ1J37voJuTIoih0puC5tM0u0uINVXTG+0lGIb57vxzh06uEU4g2/M43KbFLdNQd159gR0Y3LkfIYNWE+imm1hZXBjZOYjaVN3QhQfvhiKkOLDADupNlNgYI5Wkl1dZidjOf1tT0E3T5ZbbZchagg6NzhgioxWCFvkaZXwIVBpcpUwBMsgFFtOvMihsg+IVg1rClnsyqZibo7AGhf+tzv0LClC3IibmOfc7nHfgN50A/Ae2bvKDSAYvWRNON8J9nbLDdtP8D960YZHYRKBZyMA7X0vAFd75wLkjtvnmybl3gfXYi/uTQlXAgezCteXgtPk6oX742LO3b3+mPe3ehYD0Hvw+AagD0DvAQI9GHLA6QPQe4BAD4YccPoA9B4g0IMh/weBLvaiBk13awAAAABJRU5ErkJggg==\\nEND:VCARD\\nBEGIN:VCARD\\nVERSION:3.0\\nN:Move\\nPHOTO;BASE64:\\nEND:VCARD\\nBEGIN:VCARD\\nVERSION:3.0\\nN:Edit\\nPHOTO;BASE64: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\\nEND:VCARD\\nBEGIN:VCARD\\nVERSION:3.0\\nN:Go back\\nPHOTO;BASE64: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\\nEND:VCARD\" }"
)) >> list
getDictionaryFrom(input: List) >> getDictionaryFrom
var mainDict = Dictionary
//Unable to get shortcuts action com.sindresorhus.Actions.GetEmojisIntent
/*
Please install the Actions app

https://apps.apple.com/app/id1586435171
*/
setName(input: mainDict, name: "a.vcf") >> setName
choose(list: Renamed Item, prompt: "

🎛️ vCard Menu Editor

Edit existing menu or create new menu?

", mul: $3) >> choose
if(ActionOutput .beginsWith "Read") { >> IFResult 5
	if(Clipboard != nil) { >> IFResult 6
//Unable to get shortcuts action com.sindresorhus.Actions.GetUniformTypeIdentifierIntent
	} >> IFResult 7
	nothing() >> nothing
	if(Uniform Type Identifier .contains "com.apple.shortcuts.action") { >> IFResult 8
		getItemFromList(list: Clipboard) >> getItemFromList
		setName(input: Item from List, name: "a.plist") >> setName 1
		getFileOfType(input: Renamed Item, type: "public.json") >> getFileOfType
		getTextFrom(input: File of Type) >> getTextFrom
		text(text: "|is.workflow.actions.list|is.workflow.actions.choosefrommenu|") >> text
		nothing() >> nothing 1
		if(Text .contains ""|${Text}|"") {
			if(Text == "is.workflow.actions.choosefrommenu") { >> IFResult 9
				keysFrom(dictionary: File of Type) >> keysFrom
			} else {
				keysFrom(dictionary: File of Type) >> keysFrom 1
			} >> IFResult 10
			if(If Result == nil) {
				list() >> list 1
			} >> IFResult 11
			repeatEach(If Result) {
				setValue(key: "Title", value: "${Repeat Item}") >> setValue
				setValue(key: "dict", value: "${Dictionary}") >> setValue 1
			} >> RepeatResult
var menulist = Repeat Results
			count(input: If Result) >> count
			repeat(Count) {
//Unable to get shortcuts action is.workflow.actions.getvariable
			} >> RepeatResult 1
var order = Repeat Results
			text(text: "refresh")
		} else {
			if(Text == "is.workflow.actions.gettext") {
				getDictionaryFrom(input: File of Type) >> getDictionaryFrom 1
			} >> IFResult 12
			if(Text == "is.workflow.actions.dictionary") { >> IFResult 13
				replaceText(input: "${File of Type}", find: "\u0023", replace: "\\u0023", isRegex: true) >> replaceText 1
var E3D8FA69-7C80-4CCA-A314-9A792897CEB3 = """let out = '';
	if (a.WFWorkflowActionIdentifier === 'is.workflow.actions.dictionary' && (items = a.WFWorkflowActionParameters.WFItems)) {
		out = getdict(items.Value);
	} else if (a.WFWorkflowActionIdentifier === 'is.workflow.actions.list' && (items = a.WFWorkflowActionParameters.WFItems) && JSON.stringify(a).includes('WFDictionaryFieldValueItems')) {
		out = items.map(getvalue);
	}
document.body.textContent = encodeURIComponent(stringify(out).replace(/[\0-\x08\x0B-\x1F\x7F-\xA0\xAD\u2000-\u200B\u2028\u2029\u202F\u205F-\u2064\u2800\u3000]/g, c => '\\u'+c.charCodeAt(0).toString(16).toUpperCase().padStart(4,'0')));

function getdict(dict) {
	const out = new Map();
	for (let d of dict.WFDictionaryFieldValueItems) {
		out.set(d.WFKey.Value.string, getvalue(d))
	}
	return out;
}

function getvalue(d) {
	if (typeof d !== 'object') { return d; }
	let v = d.WFValue.Value;
	switch (d.WFItemType) {
		case 0: return getstr(v);
		case 1: return getdict(v.Value);
		case 2: return v.map(getvalue);
		case 3: return ((a=>{for(let b in a)return true})(v.attachmentsByRange)) ? `NUMBER(${getstr(v)})` : Number(v.string.replace(/[\u0660-\u0669\u06f0-\u06f9]/g, d => d.charCodeAt(0) & 0xf).replace(/[,٫]/g, '.'));
		case 4: return v.Value ? `BOOLEAN(❰${varname(v.Value)}❱)` : v;
	}
}

function getstr(v) {
	let str = v.string;
	Object.entries(v.attachmentsByRange ?? {})
		.sort((a,b) => parseInt(a[0].match(/\d+/)[0])-parseInt(b[0].match(/\d+/)[0]))
		.forEach(a => { str = str.replace('\ufffc', `❰${varname(a[1])}❱`); });
	return str;
}

function varname(v) {
	return v.OutputName ?? v.VariableName ?? v.Type ?? v;
}

function stringify(o) {
	if (typeof o === 'object') {
		if (Array.isArray(o)) return o.length ? '[' + o.map(a=>stringify(a)).join(',') + ']' : '[]';
		return (oo=Array.from(o.entries())).length ? '{' + oo.map(a=>stringify(a[0])+':'+stringify(a[1])).join(',') + '}' : '{}';
	}
	return JSON.stringify({a:o}).slice(5,-1);
}"""
text("${E3D8FA69-7C80-4CCA-A314-9A792897CEB3}")
				url(url: "data:text/html;charset=utf-8,<body/><script>let a=${Text};${ActionOutput}</script>") >> url
				decodeURL(url: "${URL.as(RichText)}") >> decodeURL
			} >> IFResult 14
			keysFrom(dictionary: If Result) >> keysFrom 2
			count(input: Dictionary Value) >> count 1
//Unable to get shortcuts action is.workflow.actions.getvariable
			if(Count > 1) {
				filterFiles() >> filterFiles
				choose(list: Files, prompt: "

Select menu to edit:

") >> choose 1
			} >> IFResult 15
			keysFrom(dictionary: If Result) >> keysFrom 3
			replaceText(input: "${Dictionary Value}", find: "\u0023", replace: "\\u0023", isRegex: true) >> replaceText 2
			setValue(key: "v", value: "${Updated Text}") >> setValue 2
var 83A13560-99F4-4B45-B5B3-9B4260ED367D = """let unesc = a => a.replace(/\\n/g,'\n').replace(/\\(.)/g,'$1').replace(/\\\\/g,'\\').replace(/\n/g,'\\n');
let out = {type:/^TEL/m.test(v) ?  'sub option2' : (/^EMAIL/m.test(v) ? (/^N:/m.test(v) ? 'sub option' : 'option') : 'icon sub'), order:Array.from({length:v.match(/^BEGIN:/gm).length},(_,i) => i+1)};
out.list = v.split('BEGIN:VCARD').slice(1).map(i => {
	let edict = {Note:''};
	let dict =  {Note:''};
	i.split('\n').forEach(t => {
		let c = t.slice(t.indexOf(':')+1);
		switch(t.slice(0,2)) {
		case 'N:':
			edict.Title = c;
			dict.Title = unesc(c);
			break;
		case 'OR':
			edict.Subtitle = c;
			dict.Subtitle = unesc(c);
			break;
		case 'EM':
		case 'TE':
			let index=0;
			let cc = ['',''];
			let ecc = ['',''];
			t.slice(t.indexOf(';TYPE=')+6).split(':').forEach(g => {
				ecc[index] += g;
				if (g.endsWith('\\')) {
					ecc[index] += ':';
				} else {
					index++;
				}
			});
			cc = [unesc(ecc[0]),unesc(ecc[1])];
			if (out.type === 'option') {
				edict.Option = ecc[0];
				edict.Title = ecc[1];
				dict.Option = cc[0];
				dict.Title = cc[1];
			} else {
				edict.Option = ecc[0];
				edict.Subtitle = ecc[1];
				dict.Option = cc[0];
				dict.Subtitle = cc[1];
			}
			break;
		case 'NO':
			edict.Notes = c;
			dict.Notes = unesc(c);
			break;
		case 'PH':
			edict.Icon = c;
			break;
	}});
	return {text:'BEGIN:VCARD'+i.replace(/\n$/,''), dict:dict, '\\dict':edict}
});
document.body.textContent = encodeURIComponent(JSON.stringify(out));"""
text("${83A13560-99F4-4B45-B5B3-9B4260ED367D}")
			url(url: "data:text/html;charset=utf-8,<body/><script>let v=${Dictionary}.v;${ActionOutput}</script>") >> url 1
			decodeURL(url: "${URL.as(RichText)}") >> decodeURL 1
var type = URL Encoded Text
var order = URL Encoded Text
var menulist = URL Encoded Text
			text(text: ".") >> text 1
		}
	} >> IFResult 16
	if(If Result == nil) { >> IFResult 17
		alert(alert: "

🛑 Please copy vCard Text/Dictionary, List, or Choose from Menu action to clipboard

", tancel: false)
		exit()
	} >> IFResult 18
} else { >>  19
	text(text: "n") >> text 2
var order = Text
var newitem = Variable
	text(text: "modify") >> text 3
} >> IFResult 19
var command = If Result
getType(input: command) >> text type
repeat(200) { >> RepeatResult 2
// Type
	if(type == nil) { >> IFResult 20
		if(menu list != nil) { >> IFResult 21
			replaceText(input: "${order}", find: ".+", replace: "#", isRegex: true) >> replaceText 3
var order = Updated Text
		} >> IFResult 22
		setName(input: mainDict, name: "a.vcf") >> setName 2
		setName(input: mainDict, name: "a.vcf") >> setName 3
		setName(input: Renamed Item, name: "${Renamed Item.as(Contact)}") >> setName 4
		setName(input: mainDict, name: "a.vcf") >> setName 5
		setName(input: mainDict, name: "a.vcf") >> setName 6
		list(items: (
        {
        WFItemType = 0;
        WFValue =         {
            Value =             {
                attachmentsByRange =                 {
                    "{0, 1}" =                     {
                        Aggrandizements =                         (
                                                        {
                                CoercionItemClass = WFContactContentItem;
                                Type = WFCoercionVariableAggrandizement;
                            }
                        );
                        OutputName = "Renamed Item";
                        OutputUUID = "5C3D2CDE-F4FE-4B7E-8E8E-46BDEB820348";
                        Type = ActionOutput;
                    };
                };
                string = "\Ufffc";
            };
            WFSerializationType = WFTextTokenString;
        };
    },
        {
        WFItemType = 0;
        WFValue =         {
            Value =             {
                attachmentsByRange =                 {
                    "{0, 1}" =                     {
                        OutputName = "Renamed Item";
                        OutputUUID = "8ECFCB17-635D-418F-A123-9706E6CA9A51";
                        Type = ActionOutput;
                    };
                };
                string = "\Ufffc";
            };
            WFSerializationType = WFTextTokenString;
        };
    },
        {
        WFItemType = 0;
        WFValue =         {
            Value =             {
                attachmentsByRange =                 {
                    "{0, 1}" =                     {
                        Aggrandizements =                         (
                                                        {
                                CoercionItemClass = WFContactContentItem;
                                Type = WFCoercionVariableAggrandizement;
                            },
                                                        {
                                PropertyName = "Phone Numbers";
                                PropertyUserInfo = 3;
                                Type = WFPropertyVariableAggrandizement;
                            }
                        );
                        OutputName = "Renamed Item";
                        OutputUUID = "C54DDAC9-A621-4B4E-B83C-5CC8C43A1395";
                        Type = ActionOutput;
                    };
                };
                string = "\Ufffc";
            };
            WFSerializationType = WFTextTokenString;
        };
    },
        {
        WFItemType = 0;
        WFValue =         {
            Value =             {
                attachmentsByRange =                 {
                    "{0, 1}" =                     {
                        Aggrandizements =                         (
                                                        {
                                CoercionItemClass = WFContactContentItem;
                                Type = WFCoercionVariableAggrandizement;
                            },
                                                        {
                                PropertyName = "Email Addresses";
                                PropertyUserInfo = 4;
                                Type = WFPropertyVariableAggrandizement;
                            }
                        );
                        OutputName = "Renamed Item";
                        OutputUUID = "29BB0E1B-9CE9-4BC0-8420-0F4FA43ADC56";
                        Type = ActionOutput;
                    };
                };
                string = "\Ufffc";
            };
            WFSerializationType = WFTextTokenString;
        };
    }
)) >> list 2
		choose(list: List, prompt: "

Select new menu type:

") >> choose 2
		getName() >> getName
		keysFrom(dictionary: mainDict) >> keysFrom 4
var type = Dictionary Value
	} >> IFResult 23
// Modify
	if(command == "modify") { >> IFResult 24
		if(type == "icon sub") { >> IFResult 25
			dictionary({"Title":"${Ask}${new item.key(dict.Title)}","Subtitle":"${new item.key(dict.Subtitle)}","Notes":"${new item.key(dict.Notes)}"})
			text(text: "${new item.as(Dictionary).key(\dict.Icon)}") >> b64
			nothing()
			if(b64 != "") {
var A5DCF9B8-1F4D-4A57-8EEB-0DE531B28218 = """
BEGIN:VCARD
VERSION:3.0
N:Keep this icon
PHOTO;BASE64:￼
END:VCARD"""
text("${A5DCF9B8-1F4D-4A57-8EEB-0DE531B28218}")
			} >> IFResult 26
			text(text: "${mainDict.key(icon menu)}${Variable.key(icon menu)}") >> text 1
			setName(input: Text, name: "a.vcf") >> setName 7
			choose(list: Renamed Item, prompt: "

Icon for menu item:

• You can use the ‘SF Symbols to Image’ shortcut to create icon images

") >> choose 3
			if(ActionOutput .contains "Files") {
				selectFile() >> selectFile
			}
			if(ActionOutput .contains "Photos") {
				selectPhoto(types: Images) >> selectPhoto
			}
			if(ActionOutput .contains "Enter") {
				askForInput()
			}
			if(ActionOutput .contains "Leave") {
				text()
			} >> IFResult 27
			if(ActionOutput .contains "Keep") {
//Unable to get shortcuts action is.workflow.actions.getvariable
			} >> IFResult 28
			getType(input: chosen image) >> getType
//Unable to get shortcuts action is.workflow.actions.getvariable
			if(Type != ""${text type}"") {
				list(items: (
        {
        WFItemType = 0;
        WFValue =         {
            Value =             {
                attachmentsByRange =                 {
                    "{0, 1}" =                     {
                        Aggrandizements =                         (
                                                        {
                                CoercionItemClass = WFImageContentItem;
                                Type = WFCoercionVariableAggrandizement;
                            },
                                                        {
                                PropertyName = Width;
                                Type = WFPropertyVariableAggrandizement;
                            }
                        );
                        OutputName = "chosen image";
                        OutputUUID = "93688531-3CA2-48F9-982C-79C2B21734B2";
                        Type = ActionOutput;
                    };
                };
                string = "\Ufffc";
            };
            WFSerializationType = WFTextTokenString;
        };
    },
        {
        WFItemType = 0;
        WFValue =         {
            Value =             {
                attachmentsByRange =                 {
                    "{0, 1}" =                     {
                        Aggrandizements =                         (
                                                        {
                                CoercionItemClass = WFImageContentItem;
                                Type = WFCoercionVariableAggrandizement;
                            },
                                                        {
                                PropertyName = Height;
                                Type = WFPropertyVariableAggrandizement;
                            }
                        );
                        OutputName = "chosen image";
                        OutputUUID = "93688531-3CA2-48F9-982C-79C2B21734B2";
                        Type = ActionOutput;
                    };
                };
                string = "\Ufffc";
            };
            WFSerializationType = WFTextTokenString;
        };
    }
)) >> list 3
				statistic(input: List, operation: Maximum) >> statistic
//Unable to get shortcuts action is.workflow.actions.getvariable
				if(Maximum > 93) {
					resizeImage(image: chosen image)
				} >> IFResult 29
				decode(input: If Result) >> decode 2
			} >> IFResult 30
			setValue(key: "Icon", value: "${If Result}", dictionary: Dictionary) >> setValue 3
		} >> IFResult 31
		if(type == "sub option") { >> IFResult 32
			dictionary({"Title":"${new item.key(dict.Title)}${Variable.key(dict.Title)}","Subtitle":"${new item.key(dict.Subtitle)}","Option":"${new item.key(dict.Option)}","Notes":"${new item.key(dict.Notes)}"})
		} >> IFResult 33
		if(type == "sub option2") { >> IFResult 34
			dictionary({"Title":"${new item.key(dict.Title)}${Variable.key(dict.Title)}","Subtitle":"${new item.key(dict.Subtitle)}","Option":"${new item.key(dict.Option)}","Notes":"${new item.key(dict.Notes)}"})
		}
		if(type == "option") { >> IFResult 35
			dictionary({"Title":"${new item.key(dict.Title)}${Variable.key(dict.Title)}","Option":"${new item.key(dict.Option)}","Notes":"${new item.key(dict.Notes)}"})
		} >> IFResult 36
		setValue(key: "dict", value: "${If Result}", dictionary: new item) >> setValue 4
var newitem = Dictionary
		text(text: "refresh") >> text 2
var command = Text
	} >> IFResult 37
// Refresh
	if(command == "refresh") { >> IFResult 38
		repeatEach(order) {
			if(Repeat Item 2 > 0) {
				getItemFromList(list: menu list, type: Item At Index, index: Repeat Item 2)
			} else {
				if(Repeat Item 2 == "n") {
//Unable to get shortcuts action is.workflow.actions.getvariable
				} else {
					getItemFromList(list: menu list, type: Item At Index, index: Repeat Index 2)
				} >> IFResult 39
				if(type == "icon sub") { >> IFResult 40
					dictionary({"Title":"${new dict.as(Dictionary).key(dict.Title)}","Subtitle":"${new dict.as(Dictionary).key(dict.Subtitle)}","Notes":"${new dict.as(Dictionary).key(dict.Notes)}"})
				} >> IFResult 41
				if(type == "sub option") { >> IFResult 42
					text(text: "${new dict.as(Dictionary).key(dict.Subtitle)}") >> text 3
					if(Text == "") {
						text(text: "+")
					} >> IFResult 43
					dictionary({"Title":"${new dict.as(Dictionary).key(dict.Title)}","Subtitle":"${If Result}","Option":"${new dict.as(Dictionary).key(dict.Option)}","Notes":"${new dict.as(Dictionary).key(dict.Notes)}"})
				} >> IFResult 44
				if(type == "sub option2") { >> IFResult 45
					text(text: "${new dict.as(Dictionary).key(dict.Subtitle)}") >> text 4
					if(Text == "") {
						text(text: "+")
					} >> IFResult 46
					dictionary({"Title":"${new dict.as(Dictionary).key(dict.Title)}","Subtitle":"${If Result}","Option":"${new dict.as(Dictionary).key(dict.Option)}","Notes":"${new dict.as(Dictionary).key(dict.Notes)}"})
					replaceText(input: "${Dictionary.key(Subtitle)}", find: "[^A-Za-z0-9"#+,;<>\[\]]", isRegex: true) >> replaceText 4
					setValue(key: "Subtitle", value: "${Updated Text}", dictionary: Dictionary)
				}
				if(type == "option") { >> IFResult 47
					dictionary({"Title":"${new dict.as(Dictionary).key(dict.Title)}","Option":"${new dict.as(Dictionary).key(dict.Option)}","Notes":"${new dict.as(Dictionary).key(dict.Notes)}"})
				} >> IFResult 48
var \dict = If Result
				keysFrom(dictionary: mainDict) >> keysFrom 5
				repeatEach(Dictionary Value) { >> RepeatResult 3
					keysFrom(dictionary: \dict) >> keysFrom 6
					text(text: "${Dictionary Value}") >> text 5
					replaceText(input: "${Text}", find: "\n", replace: "
") >> replaceText 5
					replaceText(input: "${Updated Text}", find: "\", replace: "\\") >> replaceText 6
var str = Updated Text
					repeatEach(Repeat Item 3) {
						replaceText(input: "${str}", find: "${Repeat Item 4}", replace: "\${Repeat Item 4}") >> replaceText 7
var str = Updated Text
						nothing()
					}
					replaceText(input: "${str}", find: "
", replace: "\n") >> replaceText 8
					setValue(key: "${Repeat Item 3.as(Dictionary).get(Keys)}", value: "${Updated Text}", dictionary: \dict) >> setValue 5
var \dict = Dictionary
					nothing() >> nothing 2
				} >> RepeatResult 4
				text(text: "${\dict.key(Notes)}") >> text 6
				if(Text != "") { >> IFResult 49
var 24B416FF-F988-4FAC-A5D2-EA7D2804F264 = """NOTE:￼
"""
text("${24B416FF-F988-4FAC-A5D2-EA7D2804F264}")
				} >> IFResult 50
				if(type == "icon sub") { >> IFResult 51
					text(text: "${new dict.as(Dictionary).key(dict.Icon)}") >> text 7
					setValue(key: "Icon", value: "${Text}", dictionary: \dict) >> setValue 6
var \dict = Dictionary
var 0DB0AB9B-3B8E-42DF-AEB6-14E1A3ED6132 = """N:￼
ORG:￼
PHOTO;BASE64:￼"""
text("${0DB0AB9B-3B8E-42DF-AEB6-14E1A3ED6132}")
				} >> IFResult 52
				if(type == "sub option") {
var F6C1318A-DA46-4297-B032-A9475E2C4E58 = """N:￼
EMAIL;TYPE=￼:￼"""
text("${F6C1318A-DA46-4297-B032-A9475E2C4E58}")
				} >> IFResult 53
				if(type == "sub option2") {
var 3431454A-09C1-4C20-AD24-88D16D6BB761 = """N:￼
TEL;TYPE=￼:￼"""
text("${3431454A-09C1-4C20-AD24-88D16D6BB761}")
				}
				if(type == "option") {
					text(text: "EMAIL;TYPE=${\dict.key(Option)}:${Variable.key(Option)}") >> text 8
				} >> IFResult 54
var CBC9628F-3D31-4AEF-A18C-1304050741FF = """BEGIN:VCARD
VERSION:3.0
￼
￼END:VCARD"""
text("${CBC9628F-3D31-4AEF-A18C-1304050741FF}")
				setValue(key: "text", value: "${Text}") >> setValue 7
				setValue(key: "\dict", value: "${\dict}", dictionary: Dictionary) >> setValue 8
				setValue(key: "dict", value: "${If Result}", dictionary: Dictionary) >> setValue 9
			}
		} >> RepeatResult 5
var menulist = Repeat Results
		count(input: order) >> count 2
		repeat(Count) {
//Unable to get shortcuts action is.workflow.actions.getvariable
		} >> RepeatResult 6
var order = Repeat Results
	} >> IFResult 55
	text(text: "modify") >> text 9
var command = Text
var newitem = Variable
// Show menu
	if(menu list != nil) {
		repeatEach(menu list) { >> RepeatResult 7
			keysFrom(dictionary: Repeat Item 2)
		} >> RepeatResult 8
		text(text: "${Repeat Results}") >> text 10
		setName(input: Text, name: "a.vcf") >> setName 8
var contacts = Renamed Item
		if(type == "sub option") { >> IFResult 56
			repeatEach(menu list) {
				setName(input: Repeat Item 2, name: "a.vcf") >> setName 9
				contactDetail(detail: Email Addresses, contact: Renamed Item) >> contactDetail
				setName(input: Email Addresses, name: "${Repeat Item 2.as(Dictionary).key(dict.Title)}") >> setName 10
			} >> RepeatResult 9
		}
		if(type == "sub option2") { >> IFResult 57
			contactDetail(detail: Phone Numbers, contact: contacts) >> contactDetail 1
		}
		if(type == "option") {
			contactDetail(detail: Email Addresses, contact: contacts) >> contactDetail 2
		} >> IFResult 58
		list(items: (
        {
        WFItemType = 0;
        WFValue =         {
            Value =             {
                attachmentsByRange =                 {
                    "{0, 1}" =                     {
                        OutputName = "If Result";
                        OutputUUID = "19995918-B6EE-4C34-BB29-051B49474B1F";
                        Type = ActionOutput;
                    };
                };
                string = "\Ufffc";
            };
            WFSerializationType = WFTextTokenString;
        };
    },
    "\U200c \U25e2\U25e3   YOUR MENU   \U25e2\U25e3",
    "\U2795  Add menu item",
    "\Ud83d\Udd04  Change menu type",
    "\U2734\Ufe0f  Finish and create actions"
)) >> list 4
		choose(list: List, prompt: "
Select menu item to edit, move, delete

  ◥◤   YOUR MENU   ◥◤") >> choose 4
		getType(input: Chosen Item) >> getType 1
		if(Type == ""${text type}"") { >> IFResult 59
			if(Chosen Item .beginsWith "‌") { >> IFResult 60
//Unable to get shortcuts action is.workflow.actions.setvariable
			}
			if(Chosen Item .contains "Add") { >> IFResult 61
				list(items: (
        {
        WFItemType = 0;
        WFValue =         {
            Value =             {
                attachmentsByRange =                 {
                    "{0, 1}" =                     {
                        Type = Variable;
                        VariableName = order;
                    };
                };
                string = "\Ufffc";
            };
            WFSerializationType = WFTextTokenString;
        };
    },
    n
)) >> list 5
var order = List
			} >> IFResult 62
			if(Chosen Item .contains "Change") { >> IFResult 63
				text(text: "refresh") >> text 11
var command = Text
//Unable to get shortcuts action is.workflow.actions.setvariable
//Unable to get shortcuts action is.workflow.actions.getvariable
			}
// Finish
			if(Chosen Item .contains "Finish") { >> IFResult 64
//Unable to get shortcuts action is.workflow.actions.setvariable
				repeatEach(menu list) {
					keysFrom(dictionary: Repeat Item 2)
				} >> RepeatResult 10
				text(text: "${Repeat Results}") >> text 12
				replaceText(input: "${Text}", find: "(?m)^(?:NOTE|ORG|PHOTO;BASE64):\n", isRegex: true) >> replaceText 9
				if(Updated Text .contains "
NOTE:") { >> IFResult 65
					number(value: 1) >> number
var hasnotes = Number
				}
				askForInput(prompt: "

Enter menu name (key for vCard dictionary):

", default: "${vCard key}") >> askForInput
				setValue(key: "${Provided Input}", value: "${Updated Text}") >> setValue 10
				replaceText(input: "${Dictionary}", find: "\u0023", replace: "\\u0023", isRegex: true) >> replaceText 10
//Unable to get shortcuts action com.sindresorhus.Actions.GenerateUUIDIntent
				setName(input: mainDict, name: "a.vcf") >> setName 11
				choose(list: Renamed Item, prompt: "
Select action type for vCard dictionary:

• Text is easy to modify on the spot. You can later convert to Dictionary using the ‘Dictionary Action Builder’ shortcut

• Dictionary is compact. You can later merge with other vCard actions using the ‘Dictionary Action Builder’ shortcut
") >> choose 5
				if(ActionOutput == "Text action") { >> IFResult 66
					url(url: "data:text/html;charset=utf-8,<body/><script>document.body.textContent=encodeURIComponent(JSON.stringify({"WFWorkflowActionIdentifier":"is.workflow.actions.gettext","WFWorkflowActionParameters":{"WFTextActionText":JSON.stringify(${u1},null,2).replace(/[\0-\x08\x0B-\x1F\x7F-\xA0\xAD\u2000-\u200B\u2028\u2029\u202F\u205F-\u2064\u3000\uFFFC]/g, c => '\\u{'+c.charCodeAt(0).toString(16).toUpperCase()+'}'),"UUID":"${ActionOutput}"}}))</script>")
				}
				if(ActionOutput == "Dictionary action") { >> IFResult 67
					setValue(key: "data", value: "${Updated Text}", dictionary: Updated Text) >> setValue 11
var EE5705A0-49C2-415B-BD0E-E460587B01C4 = """let mode = 0;
let stack = [];
let output = '';
let action = '';
let actioncount = 0;
while (buffer !== '') {
	if (mode == 0) {
		buffer = buffer.slice(buffer.search(/[\[\{]/));
		let ch1 = buffer.charAt(0);
		switch (ch1) {
			case '{':
				mode = 1;
				action = '{"WFWorkflowActionIdentifier":"is.workflow.actions.dictionary","WFWorkflowActionParameters":{"UUID":"￼","WFItems":{"WFSerializationType":"WFDictionaryFieldValue","Value":{"WFDictionaryFieldValueItems":[';
				break;
			case '[':
				mode = 2;
				action = '{"WFWorkflowActionIdentifier":"is.workflow.actions.list","WFWorkflowActionParameters":{"WFItems":[';
				break;
			default:
				buffer = '';
		}
	}
	let ch1 = buffer.charAt(0);
	buffer = buffer.slice(1);
	buffer = buffer.slice(buffer.search(/\S|$/));
	if (ch1 === ']' || ch1 === '}') {
		if (mode == 1 && ch1 === '}' || mode == 2 && ch1 === ']') {
			if (stack.length == 0) {
				output += action + (mode==1 ? ']}}}}' : ']}}');
				mode = 0;
				action = '';
				actioncount++;
			} else {
				action += mode==1 ? ']}}}},' : ']}},';
				mode = stack.pop();
			}
		} else {
			buffer = '';
		}
	} else {
		let ch2 = buffer[0];
		let key = '{';
		if (!']},'.includes(ch2)) {
			let match;
			if (mode == 1) {
				match = buffer.match(/^"([^"\\]*(?:\\.[^"\\]*)*)"\s*:\s*/);
				buffer = buffer.slice(match[0].length);
				key = '{"WFKey":{"WFSerializationType":"WFTextTokenString","Value":{"string":"' + match[1] + '"}},';
				ch2 = buffer[0];
			}
			switch (ch2) {
				case '[':
				case '{':
					stack.push(mode);
					mode = ch2==='{' ? 1 : 2;
						action += key + (mode==1 ?
							'"WFItemType":1,"WFValue":{"WFSerializationType":"WFDictionaryFieldValue","Value":{"WFSerializationType":"WFDictionaryFieldValue","Value":{"WFDictionaryFieldValueItems":[' :
							'"WFItemType":2,"WFValue":{"WFSerializationType":"WFArrayParameterState","Value":[');
					break;
				case '"':
					match = buffer.match(/^"([^"\\]*(?:\\.[^"\\]*)*)"\s*/);
					buffer = buffer.slice(match[0].length);
					value = match[1];
					action += (mode == 1) ? key + '"WFItemType":0,"WFValue":{"WFSerializationType":"WFTextTokenString","Value":{"string":"' + value + '"}}},' : '"' + value + '",';
					break;
				default:
					match = buffer.match(/^(.+?)\s*[,\]\}]/);
					buffer = buffer.slice(match[0].length-1);
					value = match[1];
					if (value === 'true') {
						action += key + '"WFItemType":4,"WFValue":{"WFSerializationType":"WFNumberSubstitutableState","Value":true}},';
					} else if (value === 'false') {
						action += key + '"WFItemType":4,"WFValue":{"WFSerializationType":"WFNumberSubstitutableState","Value":false}},';
					} else if (value === 'null') {
						action += (mode == 1) ? key + '"WFItemType":2,"WFValue":{"WFSerializationType":"WFArrayParameterState","Value":[]}},' : '';
					} else {
						let numStr = value.replace(/[\u0660-\u0669\u06f0-\u06f9]/g, d => d.charCodeAt(0) & 0xf);
						match = numStr.match(/(-?\d+)[.,٫](\d+)/);
						value = match ? parseInt(match[1] + match[2]) + 'E-' + match[2].length : numStr;
						action += key + '"WFItemType":3,"WFValue":{"WFSerializationType":"WFTextTokenString","Value":{"string":"' + value + '"}}},';
					}
			}
		}
	}
}
document.body.textContent = actioncount ? encodeURIComponent(output.replace(/\n/g, '\\n')) : '';"""
text("${EE5705A0-49C2-415B-BD0E-E460587B01C4}")
					url(url: "data:text/html;charset=utf-8,<body/><script>let buffer=${Dictionary}.data;${ActionOutput}</script>") >> url 2
				} >> IFResult 68
				decodeURL(url: "${If Result.as(RichText)}") >> vcard
				if(vCard key != nil) { >> IFResult 69
					setName(input: mainDict, name: "a.vcf") >> setName 12
					choose(list: Renamed Item, prompt: "

Copy vCard action only, or add menu building actions?

") >> choose 6
					if(Chosen Item .contains "only") {
						nothing()
					}
				} >> IFResult 70
				if(If Result != nil) { >> IFResult 71
//Unable to get shortcuts action com.sindresorhus.Actions.GenerateUUIDIntent
//Unable to get shortcuts action com.sindresorhus.Actions.GenerateUUIDIntent
//Unable to get shortcuts action com.sindresorhus.Actions.GenerateUUIDIntent
//Unable to get shortcuts action com.sindresorhus.Actions.GenerateUUIDIntent
//Unable to get shortcuts action com.sindresorhus.Actions.GenerateUUIDIntent
					setValue(key: "0", value: "${Provided Input}") >> setValue 12
					replaceText(input: "${Dictionary}", find: "^\{"0":"|"\}$", isRegex: true) >> replaceText 11
					list(items: (
        {
        WFItemType = 0;
        WFValue =         {
            Value =             {
                attachmentsByRange =                 {
                    "{193, 1}" =                     {
                        OutputName = u1;
                        OutputUUID = "D41C6194-60A2-4EF3-983E-00B1E95CFEC3";
                        Type = ActionOutput;
                    };
                    "{282, 1}" =                     {
                        OutputName = "Updated Text";
                        OutputUUID = "B1B2DE5D-FEF8-47B0-8DCD-EABA908C61F7";
                        Type = ActionOutput;
                    };
                    "{343, 1}" =                     {
                        OutputName = u2;
                        OutputUUID = "681A5247-D1E1-4661-8D19-99736978C836";
                        Type = ActionOutput;
                    };
                };
                string = "{\"WFWorkflowActionIdentifier\":\"is.workflow.actions.setitemname\",\"WFWorkflowActionParameters\":{\"WFName\":\"a.vcf\",\"WFInput\":{\"Value\":{\"Type\":\"ActionOutput\",\"OutputName\":\"Dictionary\",\"OutputUUID\":\"\Ufffc\",\"Aggrandizements\":[{\"Type\":\"WFDictionaryValueVariableAggrandizement\",\"DictionaryKey\":\"\Ufffc\"}]},\"WFSerializationType\":\"WFTextTokenAttachment\"},\"UUID\":\"\Ufffc\"}}";
            };
            WFSerializationType = WFTextTokenString;
        };
    }
)) >> set name
					if(type == "icon sub") { >> IFResult 72
						list(items: (
        {
        WFItemType = 0;
        WFValue =         {
            Value =             {
                attachmentsByRange =                 {
                    "{181, 1}" =                     {
                        OutputName = u2;
                        OutputUUID = "681A5247-D1E1-4661-8D19-99736978C836";
                        Type = ActionOutput;
                    };
                    "{347, 1}" =                     {
                        OutputName = u3;
                        OutputUUID = "FCB66AD7-DD22-4B97-85EB-39F7B1072DF8";
                        Type = ActionOutput;
                    };
                };
                string = "{\"WFWorkflowActionIdentifier\":\"is.workflow.actions.choosefromlist\",\"WFWorkflowActionParameters\":{\"WFInput\":{\"Value\":{\"Type\":\"ActionOutput\",\"OutputName\":\"Renamed Item\",\"OutputUUID\":\"\Ufffc\",\"Aggrandizements\":[{\"Type\":\"WFCoercionVariableAggrandizement\",\"CoercionItemClass\":\"WFContactContentItem\"}]},\"WFSerializationType\":\"WFTextTokenAttachment\"},\"UUID\":\"\Ufffc\"}}";
            };
            WFSerializationType = WFTextTokenString;
        };
    }
)) >> choose i
						list(items: (
        {
        WFItemType = 0;
        WFValue =         {
            Value =             {
                attachmentsByRange =                 {
                    "{207, 1}" =                     {
                        OutputName = u3;
                        OutputUUID = "FCB66AD7-DD22-4B97-85EB-39F7B1072DF8";
                        Type = ActionOutput;
                    };
                    "{455, 1}" =                     {
                        OutputName = "gid subtitle";
                        OutputUUID = "4A8A8058-C933-418C-8810-12240E4D7A82";
                        Type = ActionOutput;
                    };
                };
                string = "{\"WFWorkflowActionIdentifier\":\"is.workflow.actions.conditional\",\"WFWorkflowActionParameters\":{\"WFInput\":{\"Type\":\"Variable\",\"Variable\":{\"Value\":{\"Type\":\"ActionOutput\",\"OutputName\":\"Chosen Item\",\"OutputUUID\":\"\Ufffc\",\"Aggrandizements\":[{\"PropertyUserInfo\":10,\"Type\":\"WFPropertyVariableAggrandizement\",\"PropertyName\":\"Company\"}]},\"WFSerializationType\":\"WFTextTokenAttachment\"}},\"WFControlFlowMode\":0,\"WFConditionalActionString\":\"(subtitle)\",\"GroupingIdentifier\":\"\Ufffc\",\"WFCondition\":4}}";
            };
            WFSerializationType = WFTextTokenString;
        };
    }
)) >> if subtitle i
						if(has notes != nil) { >> IFResult 73
							list(items: (
        {
        WFItemType = 0;
        WFValue =         {
            Value =             {
                attachmentsByRange =                 {
                    "{207, 1}" =                     {
                        OutputName = u3;
                        OutputUUID = "FCB66AD7-DD22-4B97-85EB-39F7B1072DF8";
                        Type = ActionOutput;
                    };
                    "{450, 1}" =                     {
                        OutputName = "gid notes";
                        OutputUUID = "615A948A-67D5-4E4E-8EF1-E66389BAF1D1";
                        Type = ActionOutput;
                    };
                };
                string = "{\"WFWorkflowActionIdentifier\":\"is.workflow.actions.conditional\",\"WFWorkflowActionParameters\":{\"WFInput\":{\"Type\":\"Variable\",\"Variable\":{\"Value\":{\"Type\":\"ActionOutput\",\"OutputName\":\"Chosen Item\",\"OutputUUID\":\"\Ufffc\",\"Aggrandizements\":[{\"PropertyUserInfo\":14,\"Type\":\"WFPropertyVariableAggrandizement\",\"PropertyName\":\"Notes\"}]},\"WFSerializationType\":\"WFTextTokenAttachment\"}},\"WFControlFlowMode\":0,\"WFConditionalActionString\":\"(notes)\",\"GroupingIdentifier\":\"\Ufffc\",\"WFCondition\":4}}";
            };
            WFSerializationType = WFTextTokenString;
        };
    }
)) >> if notes i
						}
					} else { >>  1
//Unable to get shortcuts action com.sindresorhus.Actions.GenerateUUIDIntent
//Unable to get shortcuts action com.sindresorhus.Actions.GenerateUUIDIntent
//Unable to get shortcuts action com.sindresorhus.Actions.GenerateUUIDIntent
						list(items: (
        {
        WFItemType = 0;
        WFValue =         {
            Value =             {
                attachmentsByRange =                 {
                    "{232, 1}" =                     {
                        OutputName = u3;
                        OutputUUID = "FCB66AD7-DD22-4B97-85EB-39F7B1072DF8";
                        Type = ActionOutput;
                    };
                    "{376, 1}" =                     {
                        OutputName = u5;
                        OutputUUID = "31970E75-1703-4E66-B24C-8E78FDE84992";
                        Type = ActionOutput;
                    };
                };
                string = "{\"WFWorkflowActionIdentifier\":\"is.workflow.actions.gettext\",\"WFWorkflowActionParameters\":{\"WFTextActionText\":{\"Value\":{\"string\":\"\\uFFFC\",\"attachmentsByRange\":{\"{0, 1}\":{\"Type\":\"ActionOutput\",\"OutputName\":\"Chosen Item\",\"OutputUUID\":\"\Ufffc\",\"Aggrandizements\":[{\"Type\":\"WFPropertyVariableAggrandizement\",\"PropertyName\":\"Label\"}]}}},\"WFSerializationType\":\"WFTextTokenString\"},\"UUID\":\"\Ufffc\"}}";
            };
            WFSerializationType = WFTextTokenString;
        };
    },
        {
        WFItemType = 0;
        WFValue =         {
            Value =             {
                attachmentsByRange =                 {
                    "{158, 1}" =                     {
                        OutputName = u5;
                        OutputUUID = "31970E75-1703-4E66-B24C-8E78FDE84992";
                        Type = ActionOutput;
                    };
                    "{335, 1}" =                     {
                        OutputName = "gid option";
                        OutputUUID = "6E7A2CF8-8B01-49AE-8A52-4D02E71643B8";
                        Type = ActionOutput;
                    };
                };
                string = "{\"WFWorkflowActionIdentifier\":\"is.workflow.actions.conditional\",\"WFWorkflowActionParameters\":{\"WFInput\":{\"Type\":\"Variable\",\"Variable\":{\"Value\":{\"OutputUUID\":\"\Ufffc\",\"Type\":\"ActionOutput\",\"OutputName\":\"Text\"},\"WFSerializationType\":\"WFTextTokenAttachment\"}},\"WFControlFlowMode\":0,\"WFConditionalActionString\":\"(option)\",\"GroupingIdentifier\":\"\Ufffc\",\"WFCondition\":4}}";
            };
            WFSerializationType = WFTextTokenString;
        };
    },
        {
        WFItemType = 0;
        WFValue =         {
            Value =             {
                attachmentsByRange =                 {
                    "{138, 1}" =                     {
                        OutputName = "gid option";
                        OutputUUID = "6E7A2CF8-8B01-49AE-8A52-4D02E71643B8";
                        Type = ActionOutput;
                    };
                };
                string = "{\"WFWorkflowActionIdentifier\":\"is.workflow.actions.conditional\",\"WFWorkflowActionParameters\":{\"WFControlFlowMode\":2,\"GroupingIdentifier\":\"\Ufffc\"}}";
            };
            WFSerializationType = WFTextTokenString;
        };
    }
)) >> if end if options s s2 o
						if(type == "sub option2") { >> IFResult 74
							list(items: (
        {
        WFItemType = 0;
        WFValue =         {
            Value =             {
                attachmentsByRange =                 {
                    "{181, 1}" =                     {
                        OutputName = u2;
                        OutputUUID = "681A5247-D1E1-4661-8D19-99736978C836";
                        Type = ActionOutput;
                    };
                    "{443, 1}" =                     {
                        OutputName = u3;
                        OutputUUID = "FCB66AD7-DD22-4B97-85EB-39F7B1072DF8";
                        Type = ActionOutput;
                    };
                };
                string = "{\"WFWorkflowActionIdentifier\":\"is.workflow.actions.choosefromlist\",\"WFWorkflowActionParameters\":{\"WFInput\":{\"Value\":{\"Type\":\"ActionOutput\",\"OutputName\":\"Renamed Item\",\"OutputUUID\":\"\Ufffc\",\"Aggrandizements\":[{\"Type\":\"WFCoercionVariableAggrandizement\",\"CoercionItemClass\":\"WFContactContentItem\"},{\"PropertyUserInfo\":3,\"Type\":\"WFPropertyVariableAggrandizement\",\"PropertyName\":\"Phone Numbers\"}]},\"WFSerializationType\":\"WFTextTokenAttachment\"},\"UUID\":\"\Ufffc\"}}";
            };
            WFSerializationType = WFTextTokenString;
        };
    }
)) >> choose s2
							if(has notes != nil) { >> IFResult 75
								list(items: (
        {
        WFItemType = 0;
        WFValue =         {
            Value =             {
                attachmentsByRange =                 {
                    "{306, 1}" =                     {
                        OutputName = u3;
                        OutputUUID = "FCB66AD7-DD22-4B97-85EB-39F7B1072DF8";
                        Type = ActionOutput;
                    };
                    "{660, 1}" =                     {
                        OutputName = u2;
                        OutputUUID = "681A5247-D1E1-4661-8D19-99736978C836";
                        Type = ActionOutput;
                    };
                    "{826, 1}" =                     {
                        OutputName = u4;
                        OutputUUID = "FB7C86B0-2B9C-4C1E-AA34-5598A8791AA0";
                        Type = ActionOutput;
                    };
                };
                string = "{\"WFWorkflowActionIdentifier\":\"is.workflow.actions.filter.contacts\",\"WFWorkflowActionParameters\":{\"WFContentItemFilter\":{\"Value\":{\"WFActionParameterFilterPrefix\":1,\"WFActionParameterFilterTemplates\":[{\"Operator\":4,\"Values\":{\"Phone\":{\"Value\":{\"string\":\"\\uFFFC\",\"attachmentsByRange\":{\"{0, 1}\":{\"OutputUUID\":\"\Ufffc\",\"Type\":\"ActionOutput\",\"OutputName\":\"Chosen Item\"}}},\"WFSerializationType\":\"WFTextTokenString\"},\"Unit\":4},\"Removable\":true,\"Property\":\"Phone Numbers\"}],\"WFContentPredicateBoundedDate\":false},\"WFSerializationType\":\"WFContentPredicateTableTemplate\"},\"WFContentItemInputParameter\":{\"Value\":{\"Type\":\"ActionOutput\",\"OutputName\":\"Renamed Item\",\"OutputUUID\":\"\Ufffc\",\"Aggrandizements\":[{\"Type\":\"WFCoercionVariableAggrandizement\",\"CoercionItemClass\":\"WFContactContentItem\"}]},\"WFSerializationType\":\"WFTextTokenAttachment\"},\"UUID\":\"\Ufffc\"}}";
            };
            WFSerializationType = WFTextTokenString;
        };
    }
)) >> filter s2
							}
						} else { >>  1
							if(has notes != nil) { >> IFResult 76
								list(items: (
        {
        WFItemType = 0;
        WFValue =         {
            Value =             {
                attachmentsByRange =                 {
                    "{306, 1}" =                     {
                        OutputName = u3;
                        OutputUUID = "FCB66AD7-DD22-4B97-85EB-39F7B1072DF8";
                        Type = ActionOutput;
                    };
                    "{662, 1}" =                     {
                        OutputName = u2;
                        OutputUUID = "681A5247-D1E1-4661-8D19-99736978C836";
                        Type = ActionOutput;
                    };
                    "{828, 1}" =                     {
                        OutputName = u4;
                        OutputUUID = "FB7C86B0-2B9C-4C1E-AA34-5598A8791AA0";
                        Type = ActionOutput;
                    };
                };
                string = "{\"WFWorkflowActionIdentifier\":\"is.workflow.actions.filter.contacts\",\"WFWorkflowActionParameters\":{\"WFContentItemFilter\":{\"Value\":{\"WFActionParameterFilterPrefix\":1,\"WFActionParameterFilterTemplates\":[{\"Operator\":4,\"Values\":{\"Email\":{\"Value\":{\"string\":\"\\uFFFC\",\"attachmentsByRange\":{\"{0, 1}\":{\"OutputUUID\":\"\Ufffc\",\"Type\":\"ActionOutput\",\"OutputName\":\"Chosen Item\"}}},\"WFSerializationType\":\"WFTextTokenString\"},\"Unit\":4},\"Removable\":true,\"Property\":\"Email Addresses\"}],\"WFContentPredicateBoundedDate\":false},\"WFSerializationType\":\"WFContentPredicateTableTemplate\"},\"WFContentItemInputParameter\":{\"Value\":{\"Type\":\"ActionOutput\",\"OutputName\":\"Renamed Item\",\"OutputUUID\":\"\Ufffc\",\"Aggrandizements\":[{\"Type\":\"WFCoercionVariableAggrandizement\",\"CoercionItemClass\":\"WFContactContentItem\"}]},\"WFSerializationType\":\"WFTextTokenAttachment\"},\"UUID\":\"\Ufffc\"}}";
            };
            WFSerializationType = WFTextTokenString;
        };
    }
)) >> filter s o
							}
						}
						if(type == "sub option") { >> IFResult 77
							list(items: (
        {
        WFItemType = 0;
        WFValue =         {
            Value =             {
                attachmentsByRange =                 {
                    "{178, 1}" =                     {
                        OutputName = u2;
                        OutputUUID = "681A5247-D1E1-4661-8D19-99736978C836";
                        Type = ActionOutput;
                    };
                };
                string = "{\"WFWorkflowActionIdentifier\":\"is.workflow.actions.repeat.each\",\"WFWorkflowActionParameters\":{\"WFInput\":{\"Value\":{\"Type\":\"ActionOutput\",\"OutputName\":\"Renamed Item\",\"OutputUUID\":\"\Ufffc\",\"Aggrandizements\":[{\"Type\":\"WFCoercionVariableAggrandizement\",\"CoercionItemClass\":\"WFContactContentItem\"}]},\"WFSerializationType\":\"WFTextTokenAttachment\"},\"GroupingIdentifier\":\"[261 gid]\",\"WFControlFlowMode\":0}}";
            };
            WFSerializationType = WFTextTokenString;
        };
    },
    "{\"WFWorkflowActionIdentifier\":\"is.workflow.actions.comment\",\"WFWorkflowActionParameters\":{\"WFCommentActionText\":\"\Ud83d\Uded1 Fix \U275bRepeat Item\U275c below if this Repeat is inside another Repeat\\n\\n\Ud83d\Udc47 Set name of \U275bRepeat Item as Contact \U2192 Email Addresses\U275c to \U275bRepeat Item\U275c\"}}",
    "{\"WFWorkflowActionIdentifier\":\"is.workflow.actions.setitemname\",\"WFWorkflowActionParameters\":{\"WFInput\":{\"Value\":{\"VariableName\":\"Repeat Item\",\"Type\":\"Variable\",\"Aggrandizements\":[{\"PropertyUserInfo\":4,\"Type\":\"WFPropertyVariableAggrandizement\",\"PropertyName\":\"Email Addresses\"}]},\"WFSerializationType\":\"WFTextTokenAttachment\"},\"WFName\":{\"Value\":{\"string\":\"\\uFFFC\",\"attachmentsByRange\":{\"{0, 1}\":{\"VariableName\":\"Repeat Item\",\"Type\":\"Variable\"}}},\"WFSerializationType\":\"WFTextTokenString\"}}}",
    "{\"WFWorkflowActionIdentifier\":\"is.workflow.actions.repeat.each\",\"WFWorkflowActionParameters\":{\"UUID\":\"[262 u5]\",\"GroupingIdentifier\":\"[261 gid]\",\"WFControlFlowMode\":2}}",
        {
        WFItemType = 0;
        WFValue =         {
            Value =             {
                attachmentsByRange =                 {
                    "{249, 1}" =                     {
                        OutputName = u3;
                        OutputUUID = "FCB66AD7-DD22-4B97-85EB-39F7B1072DF8";
                        Type = ActionOutput;
                    };
                };
                string = "{\"WFWorkflowActionIdentifier\":\"is.workflow.actions.choosefromlist\",\"WFWorkflowActionParameters\":{\"WFInput\":{\"Value\":{\"OutputUUID\":\"[262 u5]\",\"Type\":\"ActionOutput\",\"OutputName\":\"Repeat Results\"},\"WFSerializationType\":\"WFTextTokenAttachment\"},\"UUID\":\"\Ufffc\"}}";
            };
            WFSerializationType = WFTextTokenString;
        };
    }
)) >> repeat choose s
						}
						if(type == "option") { >> IFResult 78
							list(items: (
        {
        WFItemType = 0;
        WFValue =         {
            Value =             {
                attachmentsByRange =                 {
                    "{181, 1}" =                     {
                        OutputName = u2;
                        OutputUUID = "681A5247-D1E1-4661-8D19-99736978C836";
                        Type = ActionOutput;
                    };
                    "{445, 1}" =                     {
                        OutputName = u3;
                        OutputUUID = "FCB66AD7-DD22-4B97-85EB-39F7B1072DF8";
                        Type = ActionOutput;
                    };
                };
                string = "{\"WFWorkflowActionIdentifier\":\"is.workflow.actions.choosefromlist\",\"WFWorkflowActionParameters\":{\"WFInput\":{\"Value\":{\"Type\":\"ActionOutput\",\"OutputName\":\"Renamed Item\",\"OutputUUID\":\"\Ufffc\",\"Aggrandizements\":[{\"Type\":\"WFCoercionVariableAggrandizement\",\"CoercionItemClass\":\"WFContactContentItem\"},{\"PropertyUserInfo\":4,\"Type\":\"WFPropertyVariableAggrandizement\",\"PropertyName\":\"Email Addresses\"}]},\"WFSerializationType\":\"WFTextTokenAttachment\"},\"UUID\":\"\Ufffc\"}}";
            };
            WFSerializationType = WFTextTokenString;
        };
    }
)) >> choose o
							list(items: (
        {
        WFItemType = 0;
        WFValue =         {
            Value =             {
                attachmentsByRange =                 {
                    "{207, 1}" =                     {
                        OutputName = u3;
                        OutputUUID = "FCB66AD7-DD22-4B97-85EB-39F7B1072DF8";
                        Type = ActionOutput;
                    };
                    "{459, 1}" =                     {
                        OutputName = "gid title";
                        OutputUUID = "2D65727E-39BE-47D3-8E40-55D6F543108B";
                        Type = ActionOutput;
                    };
                };
                string = "{\"WFWorkflowActionIdentifier\":\"is.workflow.actions.conditional\",\"WFWorkflowActionParameters\":{\"WFInput\":{\"Type\":\"Variable\",\"Variable\":{\"Value\":{\"Type\":\"ActionOutput\",\"OutputName\":\"Chosen Item\",\"OutputUUID\":\"\Ufffc\",\"Aggrandizements\":[{\"PropertyUserInfo\":\"WFItemName\",\"Type\":\"WFPropertyVariableAggrandizement\",\"PropertyName\":\"Name\"}]},\"WFSerializationType\":\"WFTextTokenAttachment\"}},\"WFControlFlowMode\":0,\"WFConditionalActionString\":\"(title)\",\"GroupingIdentifier\":\"\Ufffc\",\"WFCondition\":4}}";
            };
            WFSerializationType = WFTextTokenString;
        };
    }
)) >> if title o
						} else { >>  1
							list(items: (
        {
        WFItemType = 0;
        WFValue =         {
            Value =             {
                attachmentsByRange =                 {
                    "{158, 1}" =                     {
                        OutputName = u3;
                        OutputUUID = "FCB66AD7-DD22-4B97-85EB-39F7B1072DF8";
                        Type = ActionOutput;
                    };
                    "{344, 1}" =                     {
                        OutputName = "gid subtitle";
                        OutputUUID = "4A8A8058-C933-418C-8810-12240E4D7A82";
                        Type = ActionOutput;
                    };
                };
                string = "{\"WFWorkflowActionIdentifier\":\"is.workflow.actions.conditional\",\"WFWorkflowActionParameters\":{\"WFInput\":{\"Type\":\"Variable\",\"Variable\":{\"Value\":{\"OutputUUID\":\"\Ufffc\",\"Type\":\"ActionOutput\",\"OutputName\":\"Chosen Item\"},\"WFSerializationType\":\"WFTextTokenAttachment\"}},\"WFControlFlowMode\":0,\"WFConditionalActionString\":\"(subtitle)\",\"GroupingIdentifier\":\"\Ufffc\",\"WFCondition\":4}}";
            };
            WFSerializationType = WFTextTokenString;
        };
    }
)) >> if subtitle s s2
						}
						if(has notes != nil) { >> IFResult 79
							list(items: (
        {
        WFItemType = 0;
        WFValue =         {
            Value =             {
                attachmentsByRange =                 {
                    "{204, 1}" =                     {
                        OutputName = u4;
                        OutputUUID = "FB7C86B0-2B9C-4C1E-AA34-5598A8791AA0";
                        Type = ActionOutput;
                    };
                    "{447, 1}" =                     {
                        OutputName = "gid notes";
                        OutputUUID = "615A948A-67D5-4E4E-8EF1-E66389BAF1D1";
                        Type = ActionOutput;
                    };
                };
                string = "{\"WFWorkflowActionIdentifier\":\"is.workflow.actions.conditional\",\"WFWorkflowActionParameters\":{\"WFInput\":{\"Type\":\"Variable\",\"Variable\":{\"Value\":{\"Type\":\"ActionOutput\",\"OutputName\":\"Contacts\",\"OutputUUID\":\"\Ufffc\",\"Aggrandizements\":[{\"PropertyUserInfo\":14,\"Type\":\"WFPropertyVariableAggrandizement\",\"PropertyName\":\"Notes\"}]},\"WFSerializationType\":\"WFTextTokenAttachment\"}},\"WFControlFlowMode\":0,\"WFConditionalActionString\":\"(notes)\",\"GroupingIdentifier\":\"\Ufffc\",\"WFCondition\":4}}";
            };
            WFSerializationType = WFTextTokenString;
        };
    }
)) >> if notes s s2 o
						}
					}
					if(type != "option") { >> IFResult 80
						list(items: (
        {
        WFItemType = 0;
        WFValue =         {
            Value =             {
                attachmentsByRange =                 {
                    "{207, 1}" =                     {
                        OutputName = u3;
                        OutputUUID = "FCB66AD7-DD22-4B97-85EB-39F7B1072DF8";
                        Type = ActionOutput;
                    };
                    "{459, 1}" =                     {
                        OutputName = "gid title";
                        OutputUUID = "2D65727E-39BE-47D3-8E40-55D6F543108B";
                        Type = ActionOutput;
                    };
                };
                string = "{\"WFWorkflowActionIdentifier\":\"is.workflow.actions.conditional\",\"WFWorkflowActionParameters\":{\"WFInput\":{\"Type\":\"Variable\",\"Variable\":{\"Value\":{\"Type\":\"ActionOutput\",\"OutputName\":\"Chosen Item\",\"OutputUUID\":\"\Ufffc\",\"Aggrandizements\":[{\"PropertyUserInfo\":\"WFItemName\",\"Type\":\"WFPropertyVariableAggrandizement\",\"PropertyName\":\"Name\"}]},\"WFSerializationType\":\"WFTextTokenAttachment\"}},\"WFControlFlowMode\":0,\"WFConditionalActionString\":\"(title)\",\"GroupingIdentifier\":\"\Ufffc\",\"WFCondition\":4}}";
            };
            WFSerializationType = WFTextTokenString;
        };
    }
)) >> if title i s s2
						list(items: (
        {
        WFItemType = 0;
        WFValue =         {
            Value =             {
                attachmentsByRange =                 {
                    "{138, 1}" =                     {
                        OutputName = "gid subtitle";
                        OutputUUID = "4A8A8058-C933-418C-8810-12240E4D7A82";
                        Type = ActionOutput;
                    };
                };
                string = "{\"WFWorkflowActionIdentifier\":\"is.workflow.actions.conditional\",\"WFWorkflowActionParameters\":{\"WFControlFlowMode\":2,\"GroupingIdentifier\":\"\Ufffc\"}}";
            };
            WFSerializationType = WFTextTokenString;
        };
    }
)) >> end if subtitle i s s2
					}
					list(items: (
        {
        WFItemType = 0;
        WFValue =         {
            Value =             {
                attachmentsByRange =                 {
                    "{138, 1}" =                     {
                        OutputName = "gid title";
                        OutputUUID = "2D65727E-39BE-47D3-8E40-55D6F543108B";
                        Type = ActionOutput;
                    };
                };
                string = "{\"WFWorkflowActionIdentifier\":\"is.workflow.actions.conditional\",\"WFWorkflowActionParameters\":{\"WFControlFlowMode\":2,\"GroupingIdentifier\":\"\Ufffc\"}}";
            };
            WFSerializationType = WFTextTokenString;
        };
    }
)) >> end if title
					if(has notes != nil) { >> IFResult 81
						list(items: (
        {
        WFItemType = 0;
        WFValue =         {
            Value =             {
                attachmentsByRange =                 {
                    "{138, 1}" =                     {
                        OutputName = "gid notes";
                        OutputUUID = "615A948A-67D5-4E4E-8EF1-E66389BAF1D1";
                        Type = ActionOutput;
                    };
                };
                string = "{\"WFWorkflowActionIdentifier\":\"is.workflow.actions.conditional\",\"WFWorkflowActionParameters\":{\"WFControlFlowMode\":2,\"GroupingIdentifier\":\"\Ufffc\"}}";
            };
            WFSerializationType = WFTextTokenString;
        };
    }
)) >> end if notes
					}
				} >> IFResult 82
				list(items: (
        {
        WFItemType = 0;
        WFValue =         {
            Value =             {
                attachmentsByRange =                 {
                    "{0, 1}" =                     {
                        OutputName = vcard;
                        OutputUUID = "97260A7C-BBE2-4123-A822-2C98E8E5CC85";
                        Type = ActionOutput;
                    };
                };
                string = "\Ufffc";
            };
            WFSerializationType = WFTextTokenString;
        };
    },
        {
        WFItemType = 0;
        WFValue =         {
            Value =             {
                attachmentsByRange =                 {
                    "{0, 1}" =                     {
                        OutputName = "set name";
                        OutputUUID = "BD1F52F3-B079-482E-9365-A2A0B33EF1B0";
                        Type = ActionOutput;
                    };
                };
                string = "\Ufffc";
            };
            WFSerializationType = WFTextTokenString;
        };
    },
        {
        WFItemType = 0;
        WFValue =         {
            Value =             {
                attachmentsByRange =                 {
                    "{0, 1}" =                     {
                        OutputName = "repeat choose s";
                        OutputUUID = "6F621512-B403-41AC-AD00-2578E0808919";
                        Type = ActionOutput;
                    };
                };
                string = "\Ufffc";
            };
            WFSerializationType = WFTextTokenString;
        };
    },
        {
        WFItemType = 0;
        WFValue =         {
            Value =             {
                attachmentsByRange =                 {
                    "{0, 1}" =                     {
                        OutputName = "choose i";
                        OutputUUID = "F5DD6042-155B-4E4B-A855-98E0E400EC0A";
                        Type = ActionOutput;
                    };
                };
                string = "\Ufffc";
            };
            WFSerializationType = WFTextTokenString;
        };
    },
        {
        WFItemType = 0;
        WFValue =         {
            Value =             {
                attachmentsByRange =                 {
                    "{0, 1}" =                     {
                        OutputName = "choose s2";
                        OutputUUID = "3C111A05-D76B-4A25-B86D-F3536B45206C";
                        Type = ActionOutput;
                    };
                };
                string = "\Ufffc";
            };
            WFSerializationType = WFTextTokenString;
        };
    },
        {
        WFItemType = 0;
        WFValue =         {
            Value =             {
                attachmentsByRange =                 {
                    "{0, 1}" =                     {
                        OutputName = "choose o";
                        OutputUUID = "353B4631-6EA1-4055-B152-EBF1E3C40C01";
                        Type = ActionOutput;
                    };
                };
                string = "\Ufffc";
            };
            WFSerializationType = WFTextTokenString;
        };
    },
        {
        WFItemType = 0;
        WFValue =         {
            Value =             {
                attachmentsByRange =                 {
                    "{0, 1}" =                     {
                        OutputName = "if title o";
                        OutputUUID = "61821800-5534-4FFA-87BF-CF293974A505";
                        Type = ActionOutput;
                    };
                };
                string = "\Ufffc";
            };
            WFSerializationType = WFTextTokenString;
        };
    },
        {
        WFItemType = 0;
        WFValue =         {
            Value =             {
                attachmentsByRange =                 {
                    "{0, 1}" =                     {
                        OutputName = "if title i s s2";
                        OutputUUID = "DEC44B9D-6817-4B50-B7D1-5BDF28BF558D";
                        Type = ActionOutput;
                    };
                };
                string = "\Ufffc";
            };
            WFSerializationType = WFTextTokenString;
        };
    },
        {
        WFItemType = 0;
        WFValue =         {
            Value =             {
                attachmentsByRange =                 {
                    "{0, 1}" =                     {
                        OutputName = "end if title";
                        OutputUUID = "58D029B5-24FC-48DA-BE09-E66A285BC47D";
                        Type = ActionOutput;
                    };
                };
                string = "\Ufffc";
            };
            WFSerializationType = WFTextTokenString;
        };
    },
        {
        WFItemType = 0;
        WFValue =         {
            Value =             {
                attachmentsByRange =                 {
                    "{0, 1}" =                     {
                        OutputName = "if subtitle i";
                        OutputUUID = "D5E723A0-C6B9-4F4A-8F5A-2970C814EC25";
                        Type = ActionOutput;
                    };
                };
                string = "\Ufffc";
            };
            WFSerializationType = WFTextTokenString;
        };
    },
        {
        WFItemType = 0;
        WFValue =         {
            Value =             {
                attachmentsByRange =                 {
                    "{0, 1}" =                     {
                        OutputName = "if subtitle s s2";
                        OutputUUID = "CDC8AEF3-E480-41EE-9185-99DBE4A46750";
                        Type = ActionOutput;
                    };
                };
                string = "\Ufffc";
            };
            WFSerializationType = WFTextTokenString;
        };
    },
        {
        WFItemType = 0;
        WFValue =         {
            Value =             {
                attachmentsByRange =                 {
                    "{0, 1}" =                     {
                        OutputName = "end if subtitle i s s2";
                        OutputUUID = "4BA48529-2647-4A2E-A099-9BDFB1E27D07";
                        Type = ActionOutput;
                    };
                };
                string = "\Ufffc";
            };
            WFSerializationType = WFTextTokenString;
        };
    },
        {
        WFItemType = 0;
        WFValue =         {
            Value =             {
                attachmentsByRange =                 {
                    "{0, 1}" =                     {
                        OutputName = "if end if options s s2 o";
                        OutputUUID = "A8CF31C6-7520-41E6-B0B6-9C4A139D8F07";
                        Type = ActionOutput;
                    };
                };
                string = "\Ufffc";
            };
            WFSerializationType = WFTextTokenString;
        };
    },
        {
        WFItemType = 0;
        WFValue =         {
            Value =             {
                attachmentsByRange =                 {
                    "{0, 1}" =                     {
                        OutputName = "if notes i";
                        OutputUUID = "79E7BDC5-B6E9-4177-82A5-0EABAF0D0E0C";
                        Type = ActionOutput;
                    };
                };
                string = "\Ufffc";
            };
            WFSerializationType = WFTextTokenString;
        };
    },
        {
        WFItemType = 0;
        WFValue =         {
            Value =             {
                attachmentsByRange =                 {
                    "{0, 1}" =                     {
                        OutputName = "filter s o";
                        OutputUUID = "C077FB6F-8DF3-40E5-95CA-4944E8DC8043";
                        Type = ActionOutput;
                    };
                };
                string = "\Ufffc";
            };
            WFSerializationType = WFTextTokenString;
        };
    },
        {
        WFItemType = 0;
        WFValue =         {
            Value =             {
                attachmentsByRange =                 {
                    "{0, 1}" =                     {
                        OutputName = "filter s2";
                        OutputUUID = "814B21C0-9001-4EC3-9B2D-F6D475613C11";
                        Type = ActionOutput;
                    };
                };
                string = "\Ufffc";
            };
            WFSerializationType = WFTextTokenString;
        };
    },
        {
        WFItemType = 0;
        WFValue =         {
            Value =             {
                attachmentsByRange =                 {
                    "{0, 1}" =                     {
                        OutputName = "if notes s s2 o";
                        OutputUUID = "503D90E6-DC34-4D8E-A081-7DC63C852AAE";
                        Type = ActionOutput;
                    };
                };
                string = "\Ufffc";
            };
            WFSerializationType = WFTextTokenString;
        };
    },
        {
        WFItemType = 0;
        WFValue =         {
            Value =             {
                attachmentsByRange =                 {
                    "{0, 1}" =                     {
                        OutputName = "end if notes";
                        OutputUUID = "F875D6D4-3059-41E2-94AA-BA3D75E49FE2";
                        Type = ActionOutput;
                    };
                };
                string = "\Ufffc";
            };
            WFSerializationType = WFTextTokenString;
        };
    }
)) >> list 6
				replaceText(input: "{"actions":[${List}]}", find: "
", replace: ",") >> replaceText 12
				setName(input: Updated Text, name: "a.json") >> setName 13
				getFileOfType(input: Renamed Item, type: "com.apple.property-list") >> getFileOfType 1
				keysFrom(dictionary: File of Type) >> keysFrom 7
				replaceText(input: "${DeviceDetails.get(System Version)}", find: "\.(\d+).*", replace: "$1", isRegex: true) >> replaceText 13
				if(DeviceDetails !=) {
					math(input: Updated Text, operation: -, operand: "29")
				} >> IFResult 83
				if(If Result > 144) {
//Unable to get shortcuts action com.sindresorhus.Actions.SetUniformTypeIdentifier
				} else {
					repeatEach(Dictionary Value) { >> RepeatResult 11
						getFileOfType(input: Repeat Item 2, type: "com.apple.property-list") >> getFileOfType 2
//Unable to get shortcuts action com.sindresorhus.Actions.SetUniformTypeIdentifier
					} >> RepeatResult 12
				} >> IFResult 84
				setClipboard(variable: If Result) >> setClipboard
				nothing()
				if(If Result != nil) {
					text(text: "s")
				} >> IFResult 85
				alert(alert: "

📋  vCard action${If Result} copied to clipboard  📋

", tincel: false)
				exit()
			}
		} else { >>  86
//Unable to get shortcuts action com.sindresorhus.Actions.GetIndexOfListItem
			setName(input: mainDict, name: "a.vcf") >> setName 14
			choose(list: Renamed Item, prompt: "

Item #${Chosen Item.get(Name)}
${ActionOutput.get(Name)}

") >> choose 1
			if(Selected Item == "Delete") { >> IFResult 86
				text(text: "refresh") >> text 13
var command = Text
				replaceText(input: "${order}", find: "\b${chosen index}\b", replace: "", isRegex: true) >> replaceText 14
				splitText(text: Updated Text) >> splitText
			}
			if(Selected Item .contains "above") { >> IFResult 87
				replaceText(input: "${order}", find: "\b${chosen index}\b", replace: "n
${chosen index}", isRegex: true) >> replaceText 15
				splitText(text: Updated Text) >> splitText 1
			}
			if(Selected Item .contains "below") { >> IFResult 88
				replaceText(input: "${order}", find: "\b${chosen index}\b", replace: "${chosen index}
n", isRegex: true) >> replaceText 16
				splitText(text: Updated Text) >> splitText 2
			}
			if(Selected Item == "Move") { >> IFResult 89
				text(text: "refresh") >> text 14
var command = Text
				choose(list: order, prompt: "

Select new position:

") >> choose 2
//Unable to get shortcuts action is.workflow.actions.getvariable
				if(chosen index != Chosen Item) {
					replaceText(input: "${order}
", find: "\b${chosen index}\n", isRegex: true) >> replaceText 17
					if(chosen index false Chosen Item) {
						replaceText(input: "${Updated Text}
", find: "\b${Chosen Item}\b", replace: "${Chosen Item}
${ActionOutput}", isRegex: true) >> replaceText 18
					} else {
						replaceText(input: "${Updated Text}
", find: "\b${Chosen Item}\b", replace: "${chosen index}
${ActionOutput}", isRegex: true) >> replaceText 19
					} >> IFResult 90
					splitText(text: If Result) >> splitText 3
					splitText(text: Split Text) >> splitText 4
				}
			}
			if(Selected Item == "Edit") { >> IFResult 91
				getItemFromList(list: menu list, type: Item At Index, index: chosen index) >> getItemFromList 1
var newitem = Item from List
				replaceText(input: "${order}", find: "\b${chosen index}\b", replace: "n", isRegex: true) >> replaceText 20
			} >> IFResult 92
			if(Selected Item == "Go back") {
//Unable to get shortcuts action is.workflow.actions.setvariable
//Unable to get shortcuts action is.workflow.actions.getvariable
			}
		} >> IFResult 93
	} else { >>  94
//Unable to get shortcuts action is.workflow.actions.setvariable
		text(text: "n") >> text 15
	} >> IFResult 94
var order = If Result
	nothing()
} >> RepeatResult 13
