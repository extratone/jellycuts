import Shortcuts
#Color: green, #Icon: play

/*
YouTube Download
2023-07-06 	v1.2.1
https://routinehub.co/user/gluebyte
https://mastodon.social/@gluebyte
*/
var 4FD7B8DE-3C4A-4059-922C-AA065B0F3816 = """{"version": "2023-07-06",
"id": "57D62601",
"prefversion": "1",
"filename": "YouTube Download.json",
"defaultpref":{
	"prefversion": 1,
	"save_avc_to":0,
	"download_thumbnail":0,
	"process_captions":0,
	"media_date":0},
"preflist":[
	{"title": "Save MP4 AVC videos to",
	"key": "save_avc_to",
	"options": ["Always ask [1/4]","Album [2/4]","Folder [3/4]","Album & Folder [4/4]"]},
	{"title": "Download thumbnails",
	"key": "download_thumbnail",
	"options": ["Always ask [1/3]","No [2/3]","Yes [3/3]"]},
	{"title": "Download subtitles",
	"key": "process_captions",
	"options": ["Always ask [1/4]","Don’t ask [2/4]","Embed to video [3/4]","Save as SRT [4/4]"]},
	{"title": "미디어 날짜",
	"key": "media_date",
	"options": ["Always ask [1/3]", "Published date [2/3]", "Current date [3/3]"]},
	{"title": "Open Files/Photos after saving",
	"key": "open_files_photos"},],
"menu":{
	"save_avc_to":{
		"prompt": "MP4 AVC videos can be played in Photos. Where do you want to save them?\n(MP4 AV01, WEBM, audio, SRT are always saved in Files)\n",
		"options":["Always Album","Always Folder","Always Album & Folder","Album","Folder","Album & Folder"]},
	"download_thumbnail":{
		"prompt": "Download thumbnail?\nThumbnails are always saved in Photos:\n",
		"options":["Don’t ask again","Always download","No","Yes"]},
	"process_captions":{
		"prompt": "Subtitles found. Where do you want to save them?\n",
		"options":["Don’t ask again","Always embed to video","Always save as SRT","Embed to video","Save as SRT","Skip"]},
	"media_date":{
		"prompt": "Please choose date of media:\n",
		"options":["Always published date", "Always current date", "Published date", "Current date"]},
	"viewer_app":{
		"prompt": "Where do you watch YouTube?\nPlease select app to switch back to:\n",
		"options":["YouTube","Safari","Chrome","Choose other"],
		"options2":["YouTube","Safari","Chrome"]},
	"open_files_photos":{
		"prompt": "Open Photos/Files after saving??\n",
		"options":["Yes","No"]},},
"options": [ "☑️", "⬜️" ],
"bundle id":{"YouTube": "com.google.ios.youtube",
	"Safari": "com.apple.mobilesafari",
	"Chrome": "com.google.chrome.ios"},
"0": 0,
"1": 1,
"yes": "Yes",
"no": "No",
"video": "🎥  Video",
"audio": "🔊  Audio",
"onmy": "On My ",
"ytdone\\n": "ytdone\n",
"gotoweb": "🌏  Go to RoutineHub",
"downloadupdate": "👾  Download Update",
"notnow": "⮐  Not Now",
"getashell": "📲  Get a-Shell mini from App Store",
"haveashell": "✅  a-Shell mini is installed",
"contact": "🐘  Contact gluebyte on Mastodon",
"contact2": "🐧  Contact gluebyte on RoutineHub",
"settings": "⚙️  User Settings",
"login": "👤  Sign in / Switch accounts",
"getlink": "📋  Download media from copied link",
"goback": "⮐  Go Back",
"resetall": "🗑️  Reset All Settings",
"reset": "🧽  Reset Album/Folder/App Settings",
"🗑️  Reset All Settings": "Do you want to reset all settings?\n\n",
"🧽  Reset Album/Folder/App Settings": "Album/Folder/App settings will be configured in next run. Continue?\n\n",
"album": "• Media Album: ",
"folder": "• Media Folder: ",
"viewer_app": "• YouTube Viewer: ",
"recents": "Recents",
"contacturl": "https://mastodon.social/@gluebyte",
"web1": "https://routinehub.co/user/gluebyte",
"msg": {
	"oldversion": "❗️ This is an old version. RoutineHub will open now.",
	"newversion": "New Version Available",
	"ashellprompt": "\nThis shortcut requires the free ‘a-Shell mini’ app:\n",
	"typeprompt": "\nSelect type to download:\n",
	"codecprompt": "• All videos, audio, SRT are saved in Files.\n• Thumbnails are saved in Photos.\n• MP4 AVC 🖼️ can be saved in Files and/or Photos.\n",
	"sizewarning": "\n🛜 No Wi-Fi available.\n\n📶 Continue?\n",
	"captionprompt": "Select all languages:\n",
	"audio": "Downloading Audio",
	"merge": "Combining Video and Audio",
	"encode": "Encoding Media",
	"media": "Downloading Media",
	"error": "🛑 An Error Occurred:\n",
	"fail": "🛑 Downloading failure. Please try again:\n",
	"album": "\nPlease select photo album from the following list. You can change it later in ‘User Settings’.\n",
	"menuprompt": "\tYouTube Download Maim Menu\n",
	"userprompt": "Current account: ",
	"nouserprompt": "❰ You are not logged in. ❱",
	"settingprompt": "Tap any item to change option.\n",
	"locationprompt": "Where do you want to save media?\n",
	"folderprompt1": "Enter folder name for media::\n",
	"folderprompt0": "Enter folder name for media. It will be created inside iCloud Drive/Shortcuts folder:\n",
	"noclipboard": "No YouTube link in clipboard.",
}}"""
text("${4FD7B8DE-3C4A-4059-922C-AA065B0F3816}")
getDictionaryFrom(input: Text) >> getDictionaryFrom
var mainDict = Dictionary
if(ShortcutInput != nil) { >> IFResult
//Unable to get shortcuts action dk.simonbs.Scriptable.RunScriptInlineIntent
} else {
//Unable to get shortcuts action dk.simonbs.Scriptable.RunScriptInlineIntent
} >> IFResult 1
getDictionaryFrom(input: If Result) >> getDictionaryFrom 1
var Output = Dictionary
if(Output != nil) {
	openApp(id: "dk.simonbs.Scriptable") >> openApp
	if(ShortcutInput == nil) {
		openApp(id: "com.apple.shortcuts") >> openApp 1
	} >> IFResult 2
	runShortcut(name: "YouTube Download", input: ShortcutInput) >> runShortcut
	exit()
} >> IFResult 3
if(Output != nil) {
	wait(seconds: Output)
	runShortcut(name: "YouTube Download", input: ShortcutInput) >> runShortcut 1
	exit()
} >> IFResult 4
if(Output != nil) {
	alert(alert: "${mainDict.key(msg.oldversion)}", cancel: false)
	openURL(url: mainDict) >> openURL
	exit()
} >> IFResult 5
if(Output != nil) {
	menu(, [) {
	case("mainDict (gotoweb)"):
		openURL(url: mainDict)
		exit()
	case("mainDict (downloadupdate)"):
		downloadURL(url: "https://routinehub.co/api/v1/shortcuts/15247/versions/latest") >> downloadURL
		matchText(text: "${Contents of URL}", regex: "(?<="id":\D?)\d+") >> matchText
		expandURL(url: "https://routinehub.co/download/${Matches}/") >> expandURL
		replaceText(input: "${Expanded URL}", find: "^.+icloud.com/", replace: "shortcuts://", isRegex: true) >> replaceText
		openURL(url: Updated Text) >> openURL 1
		exit()
	case("mainDict (notnow)"):
	} >> MenuResult
} >> IFResult 6
if(Output != nil) {
	alert(alert: "${Output.key(error)}", title: "${mainDict.key(msg.error)}", cancel: false)
	exit()
} >> IFResult 7
getDictionaryFrom(input: Output) >> getDictionaryFrom 2
var pref = Dictionary
if(ShortcutInput != nil) { >> IFResult 8
	text(text: "0") >> text
	if(DeviceDetails != nil) {
		text(text: "1") >> text 1
	} >> OS
	if(pref == nil) {
		menu(, [) {
		case("mainDict (getashell)"):
			openURL(url: "https://apps.apple.com/app/id1543537943")
			exit()
		case("mainDict (haveashell)"):
			setValue(key: "has a-Shell mini", value: "1", dictionary: pref) >> setValue
var pref = Dictionary
var savePref = Variable
		} >> MenuResult 1
	} >> IFResult 9
	valuesFrom(dictionary: Output) >> valuesFrom
	if(Dictionary Value > 0) {
		repeatEach(Output) {
			getDictionaryFrom(input: Repeat Item) >> ytitem
			if(type == nil) {
var 43CE3518-B931-4007-AF4F-9ED204EA8135 = """￼
@￼
￼
￼"""
text("${43CE3518-B931-4007-AF4F-9ED204EA8135}")
				menu(, [) {
				case("mainDict (video)"):
					text(text: "video") >> text 2
				case("mainDict (audio)"):
					text(text: "audio")
				} >> type
			}
			valuesFrom(dictionary: ytitem) >> valuesFrom 1
			getDictionaryFrom(input: Dictionary Value) >> media dict
			filterFiles() >> filterFiles
			if(type == "audio") {
				list(items: (
        {
        WFItemType = 0;
        WFValue =         {
            Value =             {
                attachmentsByRange =                 {
                    "{0, 1}" =                     {
                        OutputName = Files;
                        OutputUUID = "BB94B751-ADBF-41EC-81F9-1A757AB6E61F";
                        Type = ActionOutput;
                    };
                };
                string = "\Ufffc";
            };
            WFSerializationType = WFTextTokenString;
        };
    },
    "m4a \U2192 mp3"
))
			} >> IFResult 10
			choose(list: If Result, prompt: "${mainDict.key(msg.codecprompt)}") >> chosen codec
			if(chosen codec == "m4a → mp3") {
				text(text: "m4a")
			} >> IFResult 11
			valuesFrom(dictionary: media dict) >> valuesFrom 2
			getDictionaryFrom(input: Dictionary Value) >> media
			valuesFrom(dictionary: media) >> valuesFrom 3
			if(Dictionary Value > 20) {
				cellularDetails() >> cellularDetails
				if(Network Details == nil) {
					alert(alert: "${mainDict.key(msg.sizewarning)}")
				}
			}
			if(type == "video") {
				if(chosen codec .contains "avc") {
					valuesFrom(dictionary: pref) >> valuesFrom 4
					if(Dictionary Value == 0) {
						repeatEach(mainDict) {
							setName(input: Repeat Index 2, name: "${Repeat Item 2}")
						} >> RepeatResult
						choose(list: Repeat Results, prompt: "${mainDict.key(menu.save_avc_to.prompt)}") >> choose
						math(input: Chosen Item, operation: -, operand: "3") >> math
						if(Calculation Result false 1) {
							setValue(key: "save_avc_to", value: "${Chosen Item.as(Number)}", dictionary: pref) >> setValue 1
var pref = Dictionary
var savePref = Chosen Item
						} >> IFResult 12
					} >> IFResult 13
var saveavcto = If Result
				} >> IFResult 14
				math(input: "0", operand: pref) >> math 1
				if(Calculation Result == 0) {
					repeatEach(mainDict) {
						setName(input: Repeat Index 2, name: "${Repeat Item 2}")
					} >> RepeatResult 1
					choose(list: Repeat Results, prompt: "${mainDict.key(menu.download_thumbnail.prompt)}") >> choose 1
					math(input: Chosen Item, operation: -, operand: "2") >> math 2
					if(Calculation Result false 1) {
						setValue(key: "download_thumbnail", value: "${Chosen Item.as(Number)}", dictionary: pref) >> setValue 2
var pref = Dictionary
var savePref = Chosen Item
					}
				} >> get thumbnail
				if(ytitem != nil) {
					valuesFrom(dictionary: pref) >> valuesFrom 5
					if(Dictionary Value != 1) {
						if(Dictionary Value == 0) {
							repeatEach(mainDict) {
								setName(input: Repeat Index 2, name: "${Repeat Item 2}")
							} >> RepeatResult 2
							choose(list: Repeat Results, prompt: "${mainDict.key(menu.process_captions.prompt)}") >> choose 2
							math(input: Chosen Item, operation: -, operand: "2") >> math 3
							if(Calculation Result false 2) {
								setValue(key: "process_captions", value: "${Chosen Item.as(Number)}", dictionary: pref) >> setValue 3
var pref = Dictionary
var savePref = Chosen Item
							}
						} >> IFResult 15
						if(If Result .between 2...3) {
							getDictionaryFrom(input: ytitem) >> caption
							filterFiles() >> filterFiles 1
							choose(list: Files, prompt: "${mainDict.key(msg.captionprompt)}", multiple: true) >> caption lang
							if(caption lang != nil) {
var getcaption = If Result
							}
						}
					}
				}
			} >> IFResult 16
			math(input: "0", operand: pref) >> math 4
			if(Calculation Result == 0) {
				repeatEach(mainDict) {
					setName(input: Repeat Index 2, name: "${Repeat Item 2}")
				} >> RepeatResult 3
				choose(list: Repeat Results, prompt: "${mainDict.key(menu.media_date.prompt)}") >> choose 3
				math(input: Chosen Item, operation: -, operand: "2") >> math 5
				if(Calculation Result false 1) {
					setValue(key: "media_date", value: "${Chosen Item.as(Number)}", dictionary: pref) >> setValue 4
var pref = Dictionary
var savePref = Chosen Item
				}
			} >> media date
			nothing() >> nothing
			if(media date == 1) {
				valuesFrom(dictionary: ytitem)
			} >> date
var 312103CD-1A73-4FF1-B993-60A1E934F7FD = """hideKeyboard
rm -f ytdone* 0.*"""
text("${312103CD-1A73-4FF1-B993-60A1E934F7FD}")
//Unable to get shortcuts action AsheKube.app.a-Shell-mini.ExecuteCommandIntent
			if(get thumbnail == 2) {
				downloadURL(url: "${ytitem.key(thumb)}") >> downloadURL 1
				if(Contents of URL > 200) {
				} else {
					replaceText(input: "${ytitem.key(thumb)}", find: "maxresdefault", replace: "hqdefault") >> replaceText 1
					downloadURL(url: "${Updated Text}")
				} >> IFResult 17
				if(media date == 1) {
					setName(input: If Result, name: "${Repeat Index}.jpg") >> setName
//Unable to get shortcuts action AsheKube.app.a-Shell-mini.PutFileIntent
				} else {
					setName(input: If Result, name: "${ytitem.key(title)}") >> setName 1
//Unable to get shortcuts action is.workflow.actions.appendvariable
				}
			} >> IFResult 18
			getTextFrom(input: media) >> ext
			if(chosen codec == "m4a → mp3") {
				text(text: "mp3")
			} >> new ext
			if(type == "video") {
				if(ext == "webm") {
					if(ytitem == nil) {
						dictionary({"key":"m4a","codec":"opus -strict -2"})
					} else {
						dictionary({"key":"webm","codec":"copy"})
					}
				} else {
					dictionary({"key":"m4a","codec":"copy"})
				} >> IFResult 19
				valuesFrom(dictionary: ytitem) >> audio
				nothing()
				if(get caption == 2) {
//Unable to get shortcuts action dk.simonbs.Scriptable.RunScriptInlineIntent
				} >> caption
var C91EC965-811A-44F3-A1B4-42925F9F7F5F = """echo "🌀 ￼ (￼🍩)"
￼
echo 🌀 ￼
ffmpeg -v error -stats -i 0.video -i 0.audio￼ -c:v copy -c:a ￼ -y ￼.￼
touch￼ ￼.￼ ￼.jpg
rm -f 0.*
if [ ! -s ￼.￼ ]
then touch ytdonefail;echo;exit;fi"""
text("${C91EC965-811A-44F3-A1B4-42925F9F7F5F}")
			} else {
				nothing()
				if(new ext == ""${ext}"") {
					text(text: " -c copy")
				} >> IFResult 20
var 52A9FF0B-C093-4884-94AC-D90CF43E153D = """echo 🌀 ￼
ffmpeg -v error -stats -i 0.audio￼ -y ￼.￼
touch￼ ￼.￼ ￼.jpg
rm -f 0.*
if [ ! -s ￼.￼ ]
then touch ytdonefail;echo;exit;fi"""
text("${52A9FF0B-C093-4884-94AC-D90CF43E153D}")
			} >> IFResult 21
var E4FB6482-0D9D-477D-A1DF-7026CE4D91E7 = """hideKeyboard
rm -f ytdone* 0.*
YT3="echo 🛑☠️🛑";YT4="touch ytdonefail";YT5="echo -n 🍩️"
echo "🌀 ￼ (￼🍩)"
￼
￼
touch ytdone;echo"""
text("${E4FB6482-0D9D-477D-A1DF-7026CE4D91E7}")
			replaceText(input: "${Text}", find: "
", replace: ";") >> replaceText 2
//Unable to get shortcuts action AsheKube.app.a-Shell-mini.ExecuteCommandIntent
//Unable to get shortcuts action is.workflow.actions.setvariable
			repeat(20) {
				if(loop .beginsWith "ytdone") {
				} else {
					repeat(20) {
						if(loop .beginsWith "ytdone") {
						} else {
							repeat(20) {
								if(loop .beginsWith "ytdone") {
								} else {
									wait()
//Unable to get shortcuts action AsheKube.app.a-Shell-mini.ExecuteCommandIntent
									if(output .beginsWith "ytdone") {
var loop = output
									}
									nothing()
								}
							}
						}
					}
				}
			} >> RepeatResult 4
			if(loop != ""${mainDict.key(ytdone\n)}"") {
				text(text: "• ${ytitem.key(title)}") >> text 3
//Unable to get shortcuts action is.workflow.actions.appendvariable
			} else {
				if(get thumbnail == 2) {
					if(media date == 1) {
//Unable to get shortcuts action AsheKube.app.a-Shell-mini.GetFileIntent
						setName(input: File, name: "${ytitem.key(title)}") >> setName 2
//Unable to get shortcuts action is.workflow.actions.appendvariable
					}
				}
//Unable to get shortcuts action AsheKube.app.a-Shell-mini.GetFileIntent
				setName(input: File, name: "${ytitem.key(title)}") >> setName 3
				if(save avc to != 1) {
//Unable to get shortcuts action is.workflow.actions.appendvariable
				}
				if(chosen codec .contains "avc") {
					if(save avc to != 2) {
//Unable to get shortcuts action is.workflow.actions.appendvariable
					}
				}
//Unable to get shortcuts action AsheKube.app.a-Shell-mini.ExecuteCommandIntent
				if(get caption == 3) {
//Unable to get shortcuts action dk.simonbs.Scriptable.RunScriptInlineIntent
					count(input: Output) >> count
					if(Count == 1) {
						setName(input: Output, name: "${ytitem.key(title)}.srt")
					} else {
						repeatEach(Output) {
							getItemFromList(list: caption lang, type: Item At Index, index: Repeat Index 2) >> getItemFromList
							valuesFrom(dictionary: caption) >> valuesFrom 6
							setName(input: Repeat Item 2, name: "${Dictionary Value} ${ActionOutput}.srt")
						} >> RepeatResult 5
					} >> IFResult 22
//Unable to get shortcuts action is.workflow.actions.appendvariable
				}
			}
			nothing()
		} >> RepeatResult 6
		if(error != nil) {
			alert(alert: "${error}", title: "${mainDict.key(msg.fail)}", cancel: false)
		}
		if(media != nil) {
			valuesFrom(dictionary: pref) >> valuesFrom 7
			if(OS == 1) {
				if(Dictionary Value == nil) {
					menu(, [) {
					case("mainDict (onmy)Device Details (Device Type)"):
						number(value: 1)
					case("iCloud Drive"):
						number(value: 2)
					case("iCloud Drive/Shortcuts"):
						number(value: 3)
					} >> MenuResult 2
					setValue(key: "folderlocation", value: "${Menu Result.as(Number)}", dictionary: pref) >> setValue 5
var pref = Dictionary
//Unable to get shortcuts action is.workflow.actions.getvariable
				} >> IFResult 23
			} >> IFResult 24
			if(If Result == 1) {
//Unable to get shortcuts action is.workflow.actions.folder
			} else {
				if(If Result == 2) {
//Unable to get shortcuts action is.workflow.actions.folder
				} else {
//Unable to get shortcuts action is.workflow.actions.folder
				}
			} >> IFResult 25
			if(pref == nil) {
				valuesFrom(dictionary: mainDict) >> valuesFrom 8
				askForInput(prompt: "${Dictionary Value}") >> askForInput
				replaceText(input: "${Provided Input}/", find: "/+$", replace: "/", isRegex: true) >> replaceText 3
				setValue(key: "savefolder", value: "${Updated Text}", dictionary: pref) >> setValue 6
var pref = Dictionary
				createFolder(path: "${pref.key(savefolder)}") >> createFolder
var savePref = Variable
			} >> IFResult 26
			saveFile(input: media, ask: false, path: "${pref.key(savefolder)}") >> saveFile
		} >> IFResult 27
		if(album media != nil) {
			valuesFrom(dictionary: pref) >> album
			if(album == nil) {
				alert(alert: "${mainDict.key(msg.album)}", cancel: false)
				saveToCameraRoll(image: album media, album: Ask) >> saveToCameraRoll
				getItemFromList(list: Saved Photo Media) >> getItemFromList 1
				text(text: "${Item from List}") >> text 4
				setValue(key: "album", value: "${Text}", dictionary: pref) >> setValue 7
var pref = Dictionary
var savePref = Variable
			} else {
				if(album == "") {
					saveToCameraRoll(image: album media) >> saveToCameraRoll 1
				} else {
					if(OS == 1) {
						createAlbum(photos: album media, name: "${album}") >> createAlbum
					} else {
						saveToCameraRoll(image: album media, album: album)
					}
				} >> IFResult 28
			} >> IFResult 29
		}
	} >> IFResult 30
	valuesFrom(dictionary: pref) >> valuesFrom 9
	if(Dictionary Value != nil) {
		openApp()
	} else {
		replaceText(input: "${DeviceDetails.get(System Version)}", find: "\.(\d).*", replace: "$1", isRegex: true) >> replaceText 4
		if(Updated Text > 163) {
			choose(list: mainDict, prompt: "${mainDict.key(menu.viewer_app.prompt)}") >> choose 4
			valuesFrom(dictionary: mainDict) >> valuesFrom 10
			if(Dictionary Value == nil) {
				openApp()
			} else {
				openApp()
			} >> IFResult 31
			setValue(key: "viewer_app", value: "${If Result.get(Bundle Identifier)}", dictionary: pref) >> setValue 8
		} else {
			choose(list: mainDict, prompt: "${mainDict.key(menu.viewer_app.prompt)}") >> choose 5
			valuesFrom(dictionary: mainDict) >> valuesFrom 11
			openApp()
			setValue(key: "viewer_app", value: "${Dictionary Value}", dictionary: pref) >> setValue 9
		} >> IFResult 32
var pref = If Result
var savePref = Variable
	} >> IFResult 33
	valuesFrom(dictionary: pref) >> valuesFrom 12
	if(Dictionary Value == nil) {
		repeatEach(mainDict) {
			setName(input: Repeat Index, name: "${Repeat Item}")
		} >> RepeatResult 7
		choose(list: Repeat Results, prompt: "${mainDict.key(menu.open_files_photos.prompt)}") >> choose 6
		math(input: Chosen Item, operation: -, operand: "1") >> math 6
		setValue(key: "open_files_photos", value: "${Calculation Result}", dictionary: pref) >> setValue 10
var pref = Dictionary
var savePref = Calculation Result
	} >> IFResult 34
	if(If Result == 0) {
		if(media != nil) {
			getFile(path: "${pref.key(savefolder)}") >> getFile
			openIn(input: File, app: "com.apple.DocumentsApp")
		} else {
			if(album media != nil) {
				openApp(id: "com.apple.mobileslideshow")
			}
		}
	} >> IFResult 35
	if(savePref != nil) {
//Unable to get shortcuts action dk.simonbs.Scriptable.RunScriptInlineIntent
	} >> IFResult 36
} else {
var menu = Variable
	repeat(10) {
		if(menu == 1) {
var menu = Variable
			menu(, [) {
			case("mainDict (contact)"):
				openURL(url: mainDict)
			case("mainDict (contact2)"):
				openURL(url: mainDict)
			case("mainDict (settings)"):
				repeat(40) {
					if(menu == 0) {
//Unable to get shortcuts action dk.simonbs.Scriptable.RunScriptInlineIntent
						getDictionaryFrom(input: Output) >> getDictionaryFrom 3
						choose(list: Dictionary, prompt: "${Dictionary.key(viewer_app)}${ActionOutput.key(viewer_app)}${mainDict.key(msg.settingprompt)}${Variable.key(msg.settingprompt)}") >> choose 7
						if(Chosen Item == ""${mainDict.key(goback)}"") {
var menu = Variable
						} else {
							valuesFrom(dictionary: mainDict) >> valuesFrom 13
							number(value: 1)
							if(Dictionary Value != nil) {
								menu(, [) {
								case("mainDict (yes)"):
								case("mainDict (no)"):
									number(value: 0)
								}
							} >> IFResult 37
							if(If Result == 1) {
//Unable to get shortcuts action dk.simonbs.Scriptable.RunScriptInlineIntent
								getDictionaryFrom(input: Output) >> getDictionaryFrom 4
var pref = Dictionary
							}
						} >> IFResult 38
					} >> IFResult 39
				} >> RepeatResult 8
			case("mainDict (getlink)"):
				getClipboard() >> getClipboard
				if(Clipboard .contains "youtu") {
					runShortcut(name: "YouTube Download", input: Clipboard) >> runShortcut 2
				} else {
					alert(alert: "${Clipboard}", title: "${mainDict.key(msg.noclipboard)}", cancel: false)
				} >> IFResult 40
			} >> MenuResult 3
		}
	} >> RepeatResult 9
} >> IFResult 41
