import Shortcuts
#Color: red, #Icon: circledPlay

// Save YouTube videos for later in Obsidian. See MacStories Weekly Issue 304 for details.
url(url: ShortcutInput) >> url
var URL = URL
// First check for Mac
if(URL == nil) {
	if(DeviceDetails == "Mac") {
		getURL() >> getURL
var URL = URL
	}
} >> IFResult
if(URL == nil) {
	getURLSFromInput(text: "${Clipboard}") >> getURLSFromInput
var URL = URLs
} >> IFResult 1
// Get the HTML
downloadURL(url: "${URL}") >> downloadURL
htmlFromRichText(text: Contents of URL) >> htmlFromRichText
var HTML = HTML from Rich Text
// Match the channel name
matchText(text: "${HTML}", regex: "\"ownerChannelName\"\:\"(.[^"]*)\",") >> matchText
getMatchGroup(matches: Matches) >> getMatchGroup
var ChannelName = Text
// Match the video title
matchText(text: "${HTML}", regex: "\"title\"\:\{\"runs\"\:\[\{\"text\"\:\"(.[^\}]+)\"\}\]\}") >> matchText 1
getMatchGroup(matches: Matches) >> getMatchGroup 1
replaceText(input: "${Text}", find: "\"", replace: """) >> replaceText
var VideoTitle = Updated Text
// Match the original URL
matchText(text: "${HTML}", regex: "\<meta property\=\"og\:url\" content\=\"(.[^"]+)\"\>") >> matchText 2
getMatchGroup(matches: Matches) >> getMatchGroup 2
var VideoURL = Text
// Get the duration in milliseconds. Turn it into a Measurement object, then convert it to seconds, then minutes. Some math is performed to get an exact conversion by subtracting converted minutes from the original number of seconds
matchText(text: "${HTML}", regex: "\"approxDurationMs\"\:\"(.[^"]+)\"") >> matchText 3
getMatchGroup(matches: Matches) >> getMatchGroup 3
getItemFromList(list: Text) >> getItemFromList
var duration_ms = Item from List
//Unable to get shortcuts action is.workflow.actions.measurement.create
//Unable to get shortcuts action is.workflow.actions.measurement.convert
//Unable to get shortcuts action is.workflow.actions.measurement.convert
number(value: Converted Minutes) >> number
matchText(text: "${Number}", regex: "(.+)(\.|,)") >> matchText 4
getMatchGroup(matches: Matches) >> getMatchGroup 4
var ApproximateMinutes = Text
math(input: Approximate Minutes, operation: *, operand: "60") >> Multiplied Minutes
math(input: Original Seconds, operation: -, operand: Multiplied Minutes) >> math
round(number: Calculation Result, roundTo: Ones Place, mode: Always Round Down) >> round
count(type: Characters, input: Rounded Number) >> count
if(Count == 1) {
	text(text: "0${Rounded Number}") >> text
} else {
	text(text: "${Rounded Number}")
} >> IFResult 2
var Seconds = If Result
// Match the thumbnail and always get the biggest version of it
matchText(text: "${HTML}", regex: "("thumbnail":\{"thumbnails":\[\{"url".*?)(\}\]\},)") >> matchText 5
getMatchGroup(matches: Matches) >> getMatchGroup 5
getItemFromList(list: Text, type: Last Item) >> getItemFromList 1
text(text: "{${Item from List}}]}}") >> text 1
getDictionaryFrom(input: Text) >> getDictionaryFrom
valuesFrom(dictionary: Dictionary) >> valuesFrom
getItemFromList(list: Dictionary Value) >> getItemFromList 2
valuesFrom(dictionary: Item from List) >> valuesFrom 1
matchText(text: "${Dictionary Value}", regex: "(https?:\/\/.+)(jpeg|jpg|png)") >> matchText 6
getMatchGroup(matches: Matches) >> getMatchGroup 6
getMatchGroup(matches: Matches, index: "2") >> getMatchGroup 7
text(text: "${Text}${ActionOutput}") >> text 2
var Thumbnail = Text
replaceText(input: "${Video Title}", find: ":") >> replaceText 1
replaceText(input: "${Updated Text}", find: "/") >> replaceText 2
replaceText(input: "${Updated Text}", find: "!") >> replaceText 3
replaceText(input: "${Updated Text}", find: "|") >> replaceText 4
replaceText(input: "${Updated Text}", find: "\u0026 ", replace: "& ") >> replaceText 5
var SanitizedTitle = Updated Text
// Assemble the YAML syntax
var EA5D4F0D-DB71-4665-A29F-D7E94991B483 = """---
URL: ￼
title: "￼"
channel: "￼"
tags: ['youtube']
saved: ￼
duration: "￼:￼"
duration_ms: ￼
thumb: "![](￼)"
status: New
---

[￼](￼)"""
text("${EA5D4F0D-DB71-4665-A29F-D7E94991B483}")
text(text: "${Sanitized Title}.md") >> Filename
setName(input: Document, name: "${Filename}") >> setName
// Select the folder where individual notes are going to be saved
saveFile(input: Renamed Item, ask: false, overwrite: true) >> saveFile
openApp(id: "md.obsidian")
