import Shortcuts
#Color: tangerine, #Icon: alarmClock

/*
This Shortcut allows you to easily set or disable alarms while displaying countdowns until they ring.

v4.0 (Beta 3)
July 8 2024
u/shumsic
*/
/*
To change the quick alarm, set the time and name below. You can leave the Text blank for no label. Use the device’s time format:

1:23am, 1:23 am, 1am, 1 am
1:23pm, 1:23 pm, 1pm, 1 pm
1:00, 01:00, 13:23
*/
date(date: 8:30 AM) >> quickAlarmTime
text(text: "Quick Alarm") >> text
// Set below to False if you don’t use the sleep schedule alarm feature in Health. 
dictionary({"sleepSchedule":"false"})
/*
End of customization
——————————————————————————————————————————————
*/
getItemFromList(list: Text) >> getItemFromList
var quickAlarmName = Item from List
var useSleep = Dictionary
repeat(99) { >> RepeatResult
/*
————————————————————————————————————————————
This next block is a precise filter for the Quick Alarm. It picks one alarm set for the quick alarm time, prioritizing:

1) One that’s on, any label
2) One that’s off, labeled “Quick Alarm”
3) One that’s off, any other label
*/
	dictionary({"none":"0","off":"1","on":"2"})
var found = Dictionary
	dictionary({"doesNotExist":"Set new","existingOff":"Turn on","existingOn":"Already on"})
var quickAlarmSubtitle = Dictionary
//Unable to get shortcuts action is.workflow.actions.setvariable
	getallalarms() >> foundQuickAlarms
	if(foundQuickAlarms != nil) { >> IFResult
		repeatEach(foundQuickAlarms) {
			if(Repeat Item 2 ==) {
// Alarm found and it is currently ON.
var foundQuickAlarm = Variable
var found = Dictionary
var quickAlarmSubtitle = Dictionary
			} else {
				if(found != 2) {
					if(Repeat Item 2 == ""${quickAlarmName}"") {
// Alarm with the quick alarm label.
var foundQuickAlarm = Variable
var found = Dictionary
						text(text: "${Repeat Item 2.get(label)} ${Variable.get(label)}") >> text 1
var quickAlarmSubtitle = Text
					}
				}
				if(found == 0) {
// Alarm found and it is currently OFF.
var foundQuickAlarm = Variable
var found = Dictionary
var quickAlarmSubtitle = Dictionary
				} >> IFResult 1
			} >> IFResult 2
		} >> RepeatResult 1
	} >> IFResult 3
// Quick alarm option - label and subtitle.
	getDateFrom(input: quickAlarmTime) >> quickAlarmDate
	if(quickAlarmDate false) {
		adjustDate(duration: , date: "${quickAlarmDate}") >> adjustDate
	} >> quickAlarmDateFixed
// The “Get time between” calculation is always 1 minute short.
	adjustDate(duration: , date: "${quickAlarmDateFixed}") >> quickAlarmTimeFixed
	getTimeBetween(first: "${quickAlarmTimeFixed}", second: "${CurrentDate}", interval: Total Time) >> timeUntilQuickAlarm
// Condense the time format for display and build the final subtitle.
	replaceText(input: "${timeUntilQuickAlarm}", find: " hours", replace: "hr") >> replaceText
	replaceText(input: "${Updated Text}", find: " minutes", replace: "min") >> replaceText 1
	text(text: "in ${Updated Text} | ${ActionOutput}") >> text 2
var quickAlarmSubtitle = Text
/*
————————————————————————————-———————————————-
Log alarms which are currently on.
*/
	if(useSleep ==) { >> IFResult 4
//Unable to get shortcuts action is.workflow.actions.setvariable
//Unable to get shortcuts action com.apple.mobiletimer.EditSleepAlarmIntent
//Unable to get shortcuts action com.apple.mobiletimer.EditSleepAlarmIntent
		if(Edit Sleep Alarm ==) {
var sleepAlarm = Edit Sleep Alarm
		}
	} >> IFResult 5
//Unable to get shortcuts action is.workflow.actions.setvariable
	getallalarms() >> getallalarms
	repeatEach(Alarms) {
		if(Repeat Item 2 ==) {
//Unable to get shortcuts action is.workflow.actions.appendvariable
		}
	} >> RepeatResult 2
// Create the subtitle for the “Disable alarms” menu option.
	count(input: allOn) >> count
	if(Count > 0) { >> IFResult 6
		if(Count == 1) {
			text(text: "1 alarm on")
		} else {
			text(text: "${Count} alarms on")
		} >> IFResult 7
		if(sleepAlarm != nil) {
			text(text: "Sleep and ${If Result}")
		} else {
//Unable to get shortcuts action is.workflow.actions.getvariable
		}
	} else { >>  8
		if(sleepAlarm != nil) {
			text(text: "Sleep alarm on")
		} else {
			text(text: "No alarms active")
		}
	} >> IFResult 8
var totalOn = Variable
//Unable to get shortcuts action is.workflow.actions.appendvariable
	if(totalOn != nil) {
		dictionary({"disableIcon":"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"})
	} else {
		dictionary({"disableIcon":"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"})
	} >> IFResult 9
/*
————————————————————————————————————————————
Main Menu
*/
	dictionary({"disableLabel":"Disable alarms","disableSubtitle":"${If Result}","alarmInLabel":"Time until alarm","alarmAtLabel":"Set new alarm"})
	dictionary({"disableIcon":"${If Result.key(disableIcon)}","alarmInIcon":"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","alarmAtIcon":"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","quickAlarmIcon":"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"})
var CB8EAFD7-EBD1-454C-8C4E-3B5190DB0E7A = """BEGIN:VCARD
VERSION:3.0
N:￼
ORG:￼
PHOTO;TYPE=JPEG;ENCODING=BASE64:￼
END:VCARD

BEGIN:VCARD
VERSION:3.0
N:￼
PHOTO;TYPE=JPEG;ENCODING=BASE64:￼
END:VCARD

BEGIN:VCARD
VERSION:3.0
N:￼
PHOTO;TYPE=JPEG;ENCODING=BASE64:￼
END:VCARD

BEGIN:VCARD
VERSION:3.0
N:￼
ORG:￼
PHOTO;TYPE=JPEG;ENCODING=BASE64:￼
END:VCARD"""
text("${CB8EAFD7-EBD1-454C-8C4E-3B5190DB0E7A}")
	setName(input: Text, name: "mainMenu.vcf") >> mainMenu
	choose(list: mainMenu, prompt: "Do what?") >> choose
/*
————————————————————————————————————————————
Quick alarm selection.
*/
	if(Chosen Item == ""${quickAlarmTime}"") { >> IFResult 10
		if(foundQuickAlarm != nil 0) { >> IFResult 11
// Turn on a quick alarm.
//Unable to get shortcuts action com.apple.mobiletimer-framework.MobileTimerIntents.MTToggleAlarmIntent
		} else {
// If no quick alarm exists, set a new one.
//Unable to get shortcuts action com.apple.mobiletimer-framework.MobileTimerIntents.MTCreateAlarmIntent
		}
		alert(alert: "${timeUntilQuickAlarm}", title: "Alarm will go off in:", cancel: false)
		exit()
	} else {
/*
————————————————————————————————————————
Disable alarms selection.
*/
		if(Chosen Item == ""${Dictionary.key(disableLabel)}"") {
			dictionary({"returnIcon":"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","disableAllIcon":"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","sleepAlarmIcon":"/9j/4AAQSkZJRgABAQAA2ADYAAD/4QCARXhpZgAATU0AKgAAAAgABQESAAMAAAABAAEAAAEaAAUAAAABAAAASgEbAAUAAAABAAAAUgEoAAMAAAABAAIAAIdpAAQAAAABAAAAWgAAAAAAAADYAAAAAQAAANgAAAABAAKgAgAEAAAAAQAAAF2gAwAEAAAAAQAAAF0AAAAA/+0AOFBob3Rvc2hvcCAzLjAAOEJJTQQEAAAAAAAAOEJJTQQlAAAAAAAQ1B2M2Y8AsgTpgAmY7PhCfv/iAihJQ0NfUFJPRklMRQABAQAAAhhhcHBsBAAAAG1udHJSR0IgWFlaIAfmAAEAAQAAAAAAAGFjc3BBUFBMAAAAAEFQUEwAAAAAAAAAAAAAAAAAAAAAAAD21gABAAAAANMtYXBwbOz9o444hUfDbbS9T3raGC8AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAACmRlc2MAAAD8AAAAMGNwcnQAAAEsAAAAUHd0cHQAAAF8AAAAFHJYWVoAAAGQAAAAFGdYWVoAAAGkAAAAFGJYWVoAAAG4AAAAFHJUUkMAAAHMAAAAIGNoYWQAAAHsAAAALGJUUkMAAAHMAAAAIGdUUkMAAAHMAAAAIG1sdWMAAAAAAAAAAQAAAAxlblVTAAAAFAAAABwARABpAHMAcABsAGEAeQAgAFAAM21sdWMAAAAAAAAAAQAAAAxlblVTAAAANAAAABwAQwBvAHAAeQByAGkAZwBoAHQAIABBAHAAcABsAGUAIABJAG4AYwAuACwAIAAyADAAMgAyWFlaIAAAAAAAAPbVAAEAAAAA0yxYWVogAAAAAAAAg98AAD2/////u1hZWiAAAAAAAABKvwAAsTcAAAq5WFlaIAAAAAAAACg4AAARCwAAyLlwYXJhAAAAAAADAAAAAmZmAADypwAADVkAABPQAAAKW3NmMzIAAAAAAAEMQgAABd7///MmAAAHkwAA/ZD///ui///9owAAA9wAAMBu/8AAEQgAXQBdAwEiAAIRAQMRAf/EAB8AAAEFAQEBAQEBAAAAAAAAAAABAgMEBQYHCAkKC//EALUQAAIBAwMCBAMFBQQEAAABfQECAwAEEQUSITFBBhNRYQcicRQygZGhCCNCscEVUtHwJDNicoIJChYXGBkaJSYnKCkqNDU2Nzg5OkNERUZHSElKU1RVVldYWVpjZGVmZ2hpanN0dXZ3eHl6g4SFhoeIiYqSk5SVlpeYmZqio6Slpqeoqaqys7S1tre4ubrCw8TFxsfIycrS09TV1tfY2drh4uPk5ebn6Onq8fLz9PX29/j5+v/EAB8BAAMBAQEBAQEBAQEAAAAAAAABAgMEBQYHCAkKC//EALURAAIBAgQEAwQHBQQEAAECdwABAgMRBAUhMQYSQVEHYXETIjKBCBRCkaGxwQkjM1LwFWJy0QoWJDThJfEXGBkaJicoKSo1Njc4OTpDREVGR0hJSlNUVVZXWFlaY2RlZmdoaWpzdHV2d3h5eoKDhIWGh4iJipKTlJWWl5iZmqKjpKWmp6ipqrKztLW2t7i5usLDxMXGx8jJytLT1NXW19jZ2uLj5OXm5+jp6vLz9PX29/j5+v/bAEMAAgICAgICAwICAwUDAwMFBgUFBQUGCAYGBgYGCAoICAgICAgKCgoKCgoKCgwMDAwMDA4ODg4ODw8PDw8PDw8PD//bAEMBAgICBAQEBwQEBxALCQsQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEP/dAAQABv/aAAwDAQACEQMRAD8A/d3xL4l0jwlpE2ta1N5UEXAA5d3PREHdj/8AXOACa+MvFnxz8Za/O8ekynR7LPypCf3pHq0nXP8Au4H1pPjn4tm1/wAYzaTHIfsWjkwoo6GX/lox98/L9B9a8W+X1rvo0kld7n89cb8b4itiJ4XCzcacXbTRya317dl13flp3us6xqLmTUL2e5Y9TLKzn9TWcSx68035fWj5fWtz8xnJyd5O7FyfSjJ9KT5fWj5fWjQmwuT6UZPpSfL60fL60aBYeskiHKEqR6HFdJpnjTxdozKdM1e6gC/wiVin4qSVP4iuY+X1o+X1o0NqNadN81OTT8nY+tfh18e2vrqLRvG4SJ5SFjvVARNx6CVei5/vDAHcAZNfUNflR8vrX3X8CfFs3iPwidPvZDJdaO4hLHktEwzGT7gAr/wGuSvSVuZH7d4d8Z1sRU+o4uXM7Xi3vpun301T33v0P//Q+tdYvH1LV77UZDl7qeSUn3di39azcU0yZJNJvr1D+LZycm5Pdj8UYrqPBPhuXxj4osfDsUnki6Y73xnbGgLOR74Bx719tWnwS+GtrAkL6T9oZRgySTSlm9zhgPyAqJ1FHc+q4d4MxmZwlUoNKKdrtvfsrJn5+4oxX6F/8Ka+Gf8A0A0/7+zf/F0f8Ka+Gf8A0A0/7+zf/F1H1iJ9J/xCbMf+fkPvl/8AIn56YoxX6F/8Ka+Gf/QDT/v7N/8AF0f8Ka+Gf/QDT/v7N/8AF0fWIh/xCbMf+fkPvl/8ifnpijFfY/xI+CXheHw3eax4XgNhd6fE0xQOzxyog3MCHLEHAOCD14x6fGu+tITUldHxmf8ADuJy2qqOItqrprVP8vyH4r0bwB4yu/CX28WzlRdeVn/gG7/4qvNt9OWXb0q1bqeThcVUozVWk7SXU//R+n8CjAqPmjmvRufxZY9e+CF1aWPxFsbm9mS3iWKcF5GCKMxkDk4FetfH/wAazpBpFh4a1cCGYzNP9kmGSV2hAxQ5xyeOh/Csbwh+zpJqmlQan4m1F7OS5QOtvCgLIrDI3s38XqAOPWuu/wCGZ/DX/QXu/wAo/wD4mspSje7Z+t5TkmdRyqeCpUbKo+a/Mk/s9L9bde58of8ACReIf+gpdf8Af+T/AOKr6f8AgB41mkstXsfEusAxW7Qtb/a5huG8PvClzkjgcdB+NaH/AAzP4a/6C95+Uf8AhR/wzP4a/wCgvd/lH/8AE0pVItWbFkXCue4HFRxMYc1r6Oas7prXX5ng3xF8Z+INQ8aauYdWmNrDcyRQCGZhEIkO1doU45Aznuea4yPxP4lhdZYdWu0dDkMJ5Mg/nX1Z/wAMz+Gv+gveflH/AIUf8Mz+Gv8AoL3n5R/4U/bRPPxPA+e1asqslq238a/zO5/4S7S9T+GLzX+qWzX9zpLGRfOjDmVoDkbc8EntjrX5+ADFfZJ/Zm8N4ONXu89vlj/wrwX4l/C7Uvh3cW8jXAvdPuyRHMF2EMoyUdcnBxyOeR+VOEo7Jl8b4DNatKniMXRtGCs2mn8311PMcCjAqPmjmtLn5kf/0vpvcKmtiDcwj1df51Wqe1I+1Q/76/zFd0b3P4uaP1d6cCiuf8S+KNE8I6cNV1+4+zWrSLFv2M/zMCQMKCexrhP+F5/DD/oLn/vxN/8AEVxqDZ/X2KzrB0J+zr1oxl2ckn+J63RXkn/C8/hh/wBBc/8Afib/AOIo/wCF5/DD/oLn/vxN/wDEU/Zy7HN/rPlv/QTD/wACX+Z63RXkn/C8/hh/0Fz/AN+Jv/iKP+F5/DD/AKC5/wC/E3/xFHs5dg/1ny3/AKCYf+BL/M9brwD9pAD/AIQK2JGSL+LH/fuSumj+OHwzlkSKPViWchQPIm5JOB/BXM/tIf8AIg2//X/D/wCi5KqEWmrni8UZnhsTlWJ+r1IzstbNO135Hw7uFG4UzIoro1P5lsf/0/pR1ZHZT2JH5UIzxurr1Ugj6iun8a6W2i+L9Z0ortFvdyquf7hYlT+KkVzFdrZ/Glak6c3Tlunb7j1nxx8YvEfjzRIdD1O1toIo5FlZoQwZ2QED7zEAc54ryT5qdRSOjHZhWxNT2teXNLuxvzUfNTqKLnHcb81HzU6ii4XFikkhlSZDho2DD6g5FereO/jB4j8faPBoup2ttbwxSrMTCG3M6qVH3mOB8x4ryiii52UMwrUqc6VOVoztdd7bDfmq1bQST7toJ246e9V6+ivgV4HtvFVtrN3fLiOF4EQkcFsOWA+mVqotX12Ncqyyrja8cNR+J3/BX/Q//9T9T/2hPhtd3zf8J3ocJleKMJfRoMsUQfLKB32jhvQAHoCa+Pdx9a/W+vCvGHwA8G+JZ3vtNL6LdyHLGABoWJ7mI4AP+6VreFRbM/IOMvDypiK0sXgbXlq47a909tet+vU+Bdxo3GvSPGnw9/4RC8a1F/8Aawp6+Vs/9mavOXXYcZzW7i1ufi2Jw0qNR0qitJbjdxo3GkoqTLlF3GjcaSigOUXcaNxq1bWv2hgu7bn2zX0F4F+A9t4rthfXesvDGMEpHANxHoGLkD/vmny6X6HfleU18bV9jho3l6pfnY8G0fSdU1/U7fR9Hga5u7ltqIv6knoABySeAOTX6TfD3wbb+BfC1roMTCSZcyXEg6STP94j2HAHsBR4N+HnhbwJbtFoNrtmkGJLiQ75pB6Fuw9gAPau2rnqTvoj984J4J/s69eu71GrabJf5938l5//2Q==","alarmIcon":"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"})
//Unable to get shortcuts action is.workflow.actions.setvariable
// Generate the menu entry for the sleep alarm, if on.
			if(sleepAlarm != nil) { >> IFResult 12
				getDateFrom(input: sleepAlarm) >> sleepAlarmDate
				if(sleepAlarmDate false) {
					adjustDate(duration: , date: "${sleepAlarmDate}") >> adjustDate 1
				} >> sleepAlarmDateFixed
				adjustDate(duration: , date: "${sleepAlarmDateFixed}") >> adjustDate 2
				getTimeBetween(first: "${Adjusted Date}", second: "${CurrentDate}", interval: Total Time) >> timeUntilAlarm
// Abbreviate the subtitle and create the sleep alarm menu entry.
				replaceText(input: "${timeUntilAlarm}", find: " hours", replace: "hr") >> replaceText 2
				replaceText(input: "${Updated Text}", find: " minutes", replace: "min") >> replaceText 3
var 1C3EA959-503F-4A92-B3B1-B3344E452127 = """BEGIN:VCARD
VERSION:3.0
N:Sleep - ￼
ORG:in ￼
PHOTO;TYPE=JPEG;ENCODING=BASE64:￼
END:VCARD

"""
text("${1C3EA959-503F-4A92-B3B1-B3344E452127}")
var allOnOptions = Text
			}
// Create the menu entries for all other active alarms.
			repeatEach(allOn) { >> RepeatResult 3
				getDateFrom(input: Repeat Item 2) >> onAlarmDate
				if(onAlarmDate false) {
					adjustDate(duration: , date: "${onAlarmDate}") >> adjustDate 3
				} >> onAlarmDateFixed
				adjustDate(duration: , date: "${onAlarmDateFixed}") >> adjustDate 4
				getTimeBetween(first: "${Adjusted Date}", second: "${CurrentDate}", interval: Total Time) >> timeUntilAlarm
// Abbreviate the subtitle and create the alarm’s menu entry.
				replaceText(input: "${timeUntilAlarm}", find: " hours", replace: "hr") >> replaceText 4
				replaceText(input: "${Updated Text}", find: " minutes", replace: "min") >> replaceText 5
var 47E88FAF-FDBC-4121-9117-8845720654B2 = """￼BEGIN:VCARD
VERSION:3.0
N:￼
ORG:in ￼
PHOTO;TYPE=JPEG;ENCODING=BASE64:￼
END:VCARD

"""
text("${47E88FAF-FDBC-4121-9117-8845720654B2}")
var allOnOptions = Text
			} >> RepeatResult 4
			setName(input: allOnOptions, name: "alarms.vcf", dontIncludeExtension: true) >> setName
var allOnOptions = Renamed Item
			if(allOnOptions != nil) { >> IFResult 13
//Unable to get shortcuts action is.workflow.actions.setvariable
			} else {
// Disable alarms selected from main menu with none active. If the Sleep alarm feature is used, ask if it should be turned on.
				number(value: 1) >> number
var return = Number
				if(useSleep ==) {
					menu(, [Enable, Leave off]) {
					case("Enable"):
//Unable to get shortcuts action com.apple.mobiletimer.EditSleepAlarmIntent
					case("Leave off"):
					}
				} else {
					alert(alert: "No alarms are active!", cancel: false)
				}
			}
			repeat(99) { >> RepeatResult 5
				if(return == nil) { >> IFResult 14
					if(allOnOptions != nil) { >> IFResult 15
// Rebuild the menu with only alarms that are still active.
						count(input: allOnOptions) >> totalOnCount
var 97BFA9C0-ADC0-4E1F-9202-BD3068CB3605 = """BEGIN:VCARD
VERSION:3.0
N:Return
PHOTO;TYPE=JPEG;ENCODING=BASE64:￼
END:VCARD

BEGIN:VCARD
VERSION:3.0
N:Disable all alarms
ORG:￼ active
PHOTO;TYPE=JPEG;ENCODING=BASE64:￼
END:VCARD"""
text("${97BFA9C0-ADC0-4E1F-9202-BD3068CB3605}")
						setName(input: Text, name: "disableMenu.vcf", dontIncludeExtension: true) >> setName 1
var disableMenu = Renamed Item
//Unable to get shortcuts action is.workflow.actions.appendvariable
						choose(list: disableMenu, prompt: "Disable alarms?") >> choose 1
// Return selection. Return to the main menu.
						if(Chosen Item == "Return") {
							number(value: 1) >> number 1
var return = Number
						} else {
// Disable all selection.
							if(Chosen Item == "Disable all alarms") { >> IFResult 16
								if(sleepAlarm != nil) { >> IFResult 17
//Unable to get shortcuts action com.apple.mobiletimer.EditSleepAlarmIntent
									getDateFrom(input: Edit Sleep Alarm) >> getDateFrom
									if(Dates false) {
										text(text: "tomorrow")
									} else {
										text(text: "today")
									} >> IFResult 18
									repeatEach(totalOn) {
										if(Repeat Index 3 != 1) {
//Unable to get shortcuts action com.apple.mobiletimer-framework.MobileTimerIntents.MTToggleAlarmIntent
										}
									}
var E0954F6E-943A-4D81-A85B-D2D7C77A3FB5 = """
The ￼ Sleep alarm will re-enable automatically after ￼."""
text("${E0954F6E-943A-4D81-A85B-D2D7C77A3FB5}")
								} else { >>  19
									repeatEach(totalOn) {
//Unable to get shortcuts action com.apple.mobiletimer-framework.MobileTimerIntents.MTToggleAlarmIntent
									}
								}
								number(value: 1) >> number 2
var return = Number
//Unable to get shortcuts action is.workflow.actions.setvariable
//Unable to get shortcuts action is.workflow.actions.setvariable
								alert(alert: "${Text}", title: "All alarms have been disabled!", cancel: false)
							} else {
/*
Sleep alarm selection.
Skip the next Sleep alarm only.
*/
								if(Chosen Item .contains "Sleep") { >> IFResult 19
//Unable to get shortcuts action com.apple.mobiletimer.EditSleepAlarmIntent
									getDateFrom(input: Edit Sleep Alarm) >> getDateFrom 1
									if(Dates false) {
										text(text: "Tomorrow")
									} else {
										text(text: "Today")
									} >> IFResult 20
									changeCase(text: If Result, case: lowercase) >> changeCase
									alert(alert: "
It will re-enable automatically after ${Updated Text}.", title: "${Edit Sleep Alarm.get(dateComponents)}'s ${ActionOutput.get(dateComponents)} Sleep alarm skipped.", cancel: false)
//Unable to get shortcuts action is.workflow.actions.setvariable
//Unable to get shortcuts action is.workflow.actions.setvariable
									repeatEach(totalOn) {
										if(Repeat Index 3 != 1) {
//Unable to get shortcuts action is.workflow.actions.appendvariable
											getItemFromList(list: allOnOptions, type: Item At Index, index: Repeat Index 3) >> getItemFromList 1
//Unable to get shortcuts action is.workflow.actions.appendvariable
										}
									} >> RepeatResult 6
var totalOn = Variable
var allOnOptions = Variable
									if(totalOn == nil) {
										number(value: 1) >> number 3
var return = Number
									}
								} else { >>  4
// For any selected alarm that is not the Sleep alarm, turn it off along with all other alarms for that time.
//Unable to get shortcuts action is.workflow.actions.setvariable
//Unable to get shortcuts action is.workflow.actions.setvariable
									repeatEach(totalOn) {
										if(Repeat Item 3 == ""${Chosen Item.get(Name)}"") {
//Unable to get shortcuts action com.apple.mobiletimer-framework.MobileTimerIntents.MTToggleAlarmIntent
										} else {
//Unable to get shortcuts action is.workflow.actions.appendvariable
											getItemFromList(list: allOnOptions, type: Item At Index, index: Repeat Index 3) >> getItemFromList 2
//Unable to get shortcuts action is.workflow.actions.appendvariable
										}
									}
var totalOn = Variable
var allOnOptions = Variable
								}
							}
						}
					} else {
// If the final alarm was turned off manually:
						alert(alert: "All alarms are disabled.", title: "Done!", cancel: false)
						number(value: 1) >> number 4
var return = Number
					}
				}
			}
		} else { >>  5
// Set new alarm selection.
			if(Chosen Item == ""${Dictionary.key(alarmAtLabel)}"") { >> IFResult 21
				askForInput(prompt: "Set alarm for:", type: Time) >> askForInput
var newAlarmTime = Provided Input
			} else { >>  1
// Time until alarm selection
				if(Chosen Item == ""${Dictionary.key(alarmInLabel)}"") { >> IFResult 22
//Unable to get shortcuts action is.workflow.actions.setvariable
//Unable to get shortcuts action is.workflow.actions.setvariable
// Hours input
					repeat(99) {
						if(hours == nil) {
							askForInput(prompt: "How many hours from now?
(Minutes next)", type: Number, allowDecimal: false, allowNegative: false) >> askForInput 1
							if(Provided Input == nil) {
								number(value: 0) >> number 5
var hours = Number
								text(text: "How many minutes from now?") >> text 3
var minutesPrompt = Text
							} else {
								if(Provided Input > 24) {
									alert(alert: "Alarms can only be set up to 24 hours in advance.", title: "Oops!", cancel: false)
								} else {
var hours = Provided Input
									if(hours == 24) {
										number(value: 0) >> number 6
var minutes = Number
									} else {
										text(text: "${hours.as(Number)} hours and how many minutes from now?") >> text 4
var minutesPrompt = Text
									}
								}
							}
						}
					} >> RepeatResult 7
// Minutes input
					repeat(99) {
						if(minutes == nil) {
							askForInput(prompt: "${minutesPrompt}", type: Number, allowDecimal: false, allowNegative: false) >> askForInput 2
							if(Provided Input == nil) {
								number(value: 0) >> number 7
var minutes = Number
							} else {
								calculate(input: "(${hours.as(Number)}*60)+(${Variable.as(Number)})") >> calculate
								if(Calculation Result > 1440) {
									alert(alert: "Alarms can only be set up to 24 hours in advance.", title: "Oops!", cancel: false)
								} else {
var minutes = Provided Input
								}
							}
						}
					}
					calculate(input: "(${hours.as(Number)}*60)+(${Variable.as(Number)})") >> calculate 1
					adjustDate(duration: , date: "${CurrentDate}") >> adjustDate 5
var newAlarmTime = Adjusted Date
				}
			} >> IFResult 23
/*
For both new alarm options.

Same custom filter as for the quick alarm, but with no regard for label.
*/
			getallalarms() >> foundNewTimes
			if(foundNewTimes != nil) { >> IFResult 24
				repeatEach(foundNewTimes) {
					if(Repeat Item 2 ==) {
// Alarm found at the new time, and it is currently ON.
var foundNewTime = Variable
					} else {
						if(foundNewTime == nil 0) {
// Alarm found at the new time, and it is currently OFF.
var foundNewTime = Variable
						} >> IFResult 25
					} >> IFResult 26
				} >> RepeatResult 8
			} >> IFResult 27
// Turn ON alarm for the new time if found, otherwise create a new one.
			if(foundNewTime != nil) { >> IFResult 28
//Unable to get shortcuts action com.apple.mobiletimer-framework.MobileTimerIntents.MTToggleAlarmIntent
var setAlarm = Toggle Alarm
			} else { >>  29
//Unable to get shortcuts action com.apple.mobiletimer-framework.MobileTimerIntents.MTCreateAlarmIntent
var setAlarm = Alarm
			} >> IFResult 29
			if(Chosen Item == ""${Dictionary.key(alarmAtLabel)}"") { >> IFResult 30
// Get the time until the set alarm goes off.
				getDateFrom(input: setAlarm) >> setAlarmDate
				if(setAlarmDate false) {
					adjustDate(duration: , date: "${setAlarmDate}") >> adjustDate 6
				} >> setAlarmDateFixed
				adjustDate(duration: , date: "${setAlarmDateFixed}") >> adjustDate 7
				getTimeBetween(first: "${Adjusted Date}", second: "${CurrentDate}", interval: Total Time) >> timeUntilAlarm
				alert(alert: "${timeUntilAlarm}", title: "Alarm will go off in:", cancel: false)
				exit()
			} else {
				if(Chosen Item == ""${Dictionary.key(alarmInLabel)}"") { >> IFResult 31
					alert(alert: "Alarm set for ${setAlarm.get(dateComponents)}.", title: "Done!", cancel: false)
					exit()
				}
			}
		}
	} >> IFResult 32
} >> RepeatResult 9
