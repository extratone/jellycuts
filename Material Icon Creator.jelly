import Shortcuts
#Color: grape, #Icon: twelveSquares

dictionary({"colour":"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","view":"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","exit":"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","help":"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","share":"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","Rounded":"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","Filled":"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","Sharp":"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","Outlined":"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","Two Tone":"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"})
if(ShortcutInput == nil) {
var EBC16607-8D5A-4AFF-A2AC-90C5F55ED08D = """BEGIN:VCARDN;CHARSET=utf-8:Create an Icon;;;;
PHOTO;ENCODING=b:￼END:VCARD

BEGIN:VCARDN;CHARSET=utf-8:Help;;;;
PHOTO;ENCODING=b:￼END:VCARD"""
text("${EBC16607-8D5A-4AFF-A2AC-90C5F55ED08D}")
	setName(input: Text, name: "V.vcf") >> setName
var C6D5B13A-38A3-45F3-9710-8A3676B2057C = """𝗠𝗮𝘁𝗲𝗿𝗶𝗮𝗹 𝗜𝗰𝗼𝗻 𝗖𝗿𝗲𝗮𝘁𝗼𝗿
𝖴𝗉𝗀𝗋𝖺𝖽𝖾 𝗒𝗈𝗎𝗋 𝗏𝖢𝖺𝗋𝖽 𝗆𝖾𝗇𝗎𝗌 𝗐𝗂𝗍𝗁 𝟣𝟢𝟢𝟢+ 𝗂𝖼𝗈𝗇𝗌 𝗂𝗇 𝗎𝗉 𝗍𝗈 𝟧 𝗌𝗍𝗒𝗅𝖾𝗌 𝖺𝗇𝖽 𝖻𝗂𝗅𝗅𝗂𝗈𝗇𝗌 𝗈𝖿 𝖼𝗈𝗅𝗈𝗎𝗋 𝖼𝗈𝗆𝖻𝗂𝗇𝖺𝗍𝗂𝗈𝗇𝗌"""
text("${C6D5B13A-38A3-45F3-9710-8A3676B2057C}")
	choose(list: Renamed Item, prompt: "${Text}") >> choose
	if(Chosen Item == "Help") {
var CBF526DA-C3BA-4BE2-B97A-B07D866EAC65 = """<!-- Created by Quick Look HTML Generator -->
<!--https://routinehub.co/shortcut/9097/-->
<html>
<head>
<title>Material Icon Creator</title>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0, user-scalable=no">
<style>
  body {
    --accent-colour:#7E56BB;
    background-color:#f2f2f2;
    color:#333333;
    font-family: system-ui;
    padding: 5%;
    max-width: 650px;
    }
    p{
      font-size:18px;
      color:black;
      font-weight:400;
    }
    img{
         width:90%;
         border-radius:5px;
         display: block;
        margin-left: auto;
        margin-right: auto;
        margin-bottom:4px;
     }
     hr {
     border: 2px solid var(--accent-colour);
     width:80%; 
     border-radius: 15px;
     margin-top:5px;
     margin-bottom:5px; 
     }
     h1 {
      color:var(--accent-colour); 
     }
      h2{
     font-weight:600;
     font-size:33px;
     color:black;
     text-align:center;
     margin-top:3px
    }
  h3 {
     font-weight:600;
     font-size:26px;
     color:black;
     text-align:center;
}
    accent {
      color:var(--accent-colour);
    }
    a {
      color:var(--accent-colour);
    }
    code {        
      background-color:#deddde;  
    }     
   pre {        
    display:block; 
    background-color:#deddde;
    padding:4px;
    overflow:auto;
  }      
  pre code {        
    background-color: transparent;        

  } 
  blockquote {       
    padding-left:4px;     
    background: #deddde;  
    width:80%;   
    border-left: 6px solid var(--accent-colour);      
  }
    .linkButton {
    text-decoration:none;
    padding:5px;
    border:1px solid #AAAAAA;
    border-radius:5px;
    font-size:20px;
    font-weight:bold;
    color: var(--accent-colour);
    margin-top:20px;
    margin-bottom:20px;
    display:block;
    }
    .linkButton:hover{
    color:#f2f2f2;
    background-color:var(--accent-colour);
}
    .Slogan {
      font-size:22px;
      font-weight:600px;
      color:var(--accent-colour);
      text-align:center;
    }
     .icon {
      width:75px;
      height:75px;
     }
        @media (prefers-color-scheme: dark) {
            body {
--accent-colour:#724BAB;
                background-color: #1C1C1E;
                color: #AAAAAA;

            }
            p {
                color: #AAAAAA;
            }
            .linkButton:hover{
             color: #1C1C1E;
            }
            h2,h3{
              color:white;
            }
            code {        
              background-color:#121212;  
              }     
                pre {        
              background-color:#121212;
               }      
               blockquote { 
    background: #121212;  
               }
}
        
    </style>
</head>
    <body>
     <h1 style="font-weight:800;font-size:40px;margin-top:-20;text-align:center;">Material Icon Creator</h1>
<img src="https://i.ibb.co/wMP5KxF/2-FEF0708-D072-4-C3-A-A6-F4-3-C00024-A71-FB.png" alt="Icon Examples">
<p class="slogan">Upgrade your vCard menus with 1000+ icons in up to 5 styles and billions of colour combinations</p>
      <h2>About Material Icon Creator</h2>
      <p>
  Material Icon Creator is made for you, the developer. With over 1000 icons to choose from and many colour combinations, it trumps shortcut icons. Customize icons however you like until you have the perfect design for your shortcut. 
      </p>
<p>
  With Material Icon Creator’s easy-to use interface, you can design the icons with ease. If you get stumped and don’t know what colours to use, you can choose from a pre-made list of shortcut colours or 50 built in gradients from <a href="https://uigradients.com">https://uigradients.com</a>.
      </p>
  <h2>How To Use</h2>
<h3>#1 Select Your Icons</h3>
<p>This website is where you will be able to see all the icons, <a href="https://fonts.google.com/icons">https://fonts.google.com/icons</a>. When you visit this website, you will see something like the image found below.</p>
<img src="https://www.linkpicture.com/q/9ACEDFDC-60EB-4D52-8B74-1AD036CC7520.png" alt="Top Of Website">
<p>At the top you will see a navigational menu with the Google Font logo and name. Beside that is a dark/light mode switch. Underneath that is a search bar that will search for icons and buttons to select the style of icons. Scroll down some more and you will see some icons.</p>
<img src="https://www.linkpicture.com/q/F5C34A7A-31D8-46D9-BCC2-3D044C613C11.png" alt="Icons">
<p>
After you get accustom to the layout you can start searching for icons you want to use.
</p>
      <img src="https://www.linkpicture.com/q/C1F85A1A-1632-4AAE-8A80-6DD6CB3247CA.png" alt="Icon Side Menu">
<p>
When you find an icon you want to use, click on it. A menu will appear as shown above. Copy the name of the icon (the circled text shown in the image) and save it for later. Put each icon name that you saved on new lines, then copy them and run the shortcut.
</p>
      <h3>#2 Style Your Icons</h3>
<p>Select "Create an Icon" and paste your icons into the following ask for input box.</p>
<p>Next, you can select the type of colour for the background. If you choose "One Coloured", you can choose a shortcut colour, pick a colour from images or enter a hsl, hex, rgb or css colour name. If you choose "Two Coloured" or "Gradient", you can select a theme or enter custom colours then select the rotation.</p>
      <img src="https://www.linkpicture.com/q/55FB2EB6-68A2-4B75-B874-CA55E4E07156.png" alt="Colour">
<p>
After, choose the colour for the icon the same way as you chose the background.
</p>
<img src="https://www.linkpicture.com/q/DF93960D-3D4F-4C3F-8C89-B55A19D644DF.png" alt="Style">
<p>
Now choose the style of the icon. You can see what the icons could look similar to by looking at the image beside the options. If you notice, the "Sharp" image and "Filled" image are the same. This is because the icons might have some duplicates between styles. The "Two Tone" image is not coloured purple. This is because Two Tone icons <b>cannot</b> change colours.</p>
<img src="https://www.linkpicture.com/q/59B4198F-F0F1-4BC7-AE55-BE0C421D4F11.png" alt="Main Menu">
<p>You have styled your first icon. Next you will need an internet connection for creating the icons. You will now find yourself in a new menu. You can click anything in the menu to restyle it or complete an action. When you are done hit "Exit".</p>
<h2>#3 Saving Icons</h2>
      <img src="https://www.linkpicture.com/q/1EED141D-0A40-425E-93F4-82A6CD673675.png" alt="Save">

<p>Now select your saving option. "Save Images" will save the icons to your photo library. "Copy JSON" will copy a JSON of icon name keys leading to their base encoded image values. Finally, "Share To Fancy List Maker" will share a vCard menu directly to <a href="https://routinehub.co/shortcut/9083/">Fancy List Maker</a>, a vCard editing shortcut that allows rearranging, editing, adding and removing items in a vCard menu.
</p>
  <h2>Alternate Way To Use</h2>
  <p>
    You can also run Material Icon Creator with a dictionary input. This allows a possible faster way to get to the main menu and for you to save your icon.
  </p>
      <img alt="Run MIC" src="https://www.linkpicture.com/q/9B43FA08-7F66-40E8-A477-978ED5EE2175.png">
  <p>
The image above depicts how you can make the shortcut. Here is the link if you want to take a closer look at the dictionary, <a href="https://www.icloud.com/shortcuts/83eb855d9f0a44f18ee9c78271bc7546">Run MIC</a>.</p>
<p>The dictionary could look as followed:</p>
      <pre><code>{
  "target": "Main",
  "dic": {
    "type": "Rounded",
    "icons": "palette\nvisibility\ncancel\nshare\ncategory\nhelp",
    "background": {
      "colour": "#ffbd0e",
      "deg": "",
      "solid": false
    },
    "font": {
      "colour": "#724BAB",
      "deg": "",
      "solid": false
    }
  }
}</code></pre>
  <p>The first key in the dictionary should be <code>target</code> and have a text value of <code>Main</code>. The next key in the dictionary is <code>dic</code> and should lead to a dictionary</p>
<p>The first key in the nested dictionary should be <code>type</code>. The type key should be a text value of <code>Rounded</code>, <code>Outlined</code>, <code>Filled</code>, <code>Sharp</code> or <code>Two Tone</code></p>
<p>The second key in the dictionary can be <code>icons</code>. In this key you will put all the names of the icons split by new lines (\n).</p>
<p>The next two keys, <code>background</code> and <code>font</code> are very similar. The <code>background</code> key determines the colour of the background and the <code>font</code> key determines the colour of the icon. Both keys lead to dictionaries</p>
<p>These dictionaries have 3 keys, <code>colour</code>, <code>deg</code> and <code>solid</code>. The value for the <code>colour</code> key is a text of one or two colours combined by a <code>-</code>. If you are making a one coloured icon/background there should only be one colour in the value. </code></p>
<p>The <code>deg</code> key determines the amount the colour is rotated. It can be left black if the icon/background is only one coloured. Otherwise it can be <code>to left</code>, <code>to right</code>, <code>to bottom</code>, <code>to top</code>, <code>to bottom left</code>, <code>to bottom right</code>, <code>to top left</code>, or <code>to top right</code>.</p>
<p>The solid key should be set to <code>false</code> as a Boolean unless you want a two coloured background/icon when it should be set to <code>true</code>.</p>
<h2>Support</h2>
<p>Do you use icons created with Material Icon Creator? If you do, support Material Icon Creator by copying one of the following bits of code into your Routinehub documentation.</p>

<h3><a href="https://routinehub.co/shortcut/10158/">RH Image Description</a></h3>
    <a href="https://routinehub.co/shortcut/9254/"><img src="https://www.linkpicture.com/q/9A77573A-4793-4F46-856E-CB96D964A112.png" alt="Material Icon Creator"></a>
    <pre><code>[![Material Icon Creator](https://www.linkpicture.com/q/9A77573A-4793-4F46-856E-CB96D964A112.png)](https://routinehub.co/shortcut/9254/) </code></pre>
<h3><a href="https://routinehub.co/shortcut/1906/">Media Kit</a></h3>
    <a href="https://routinehub.co/shortcut/9254/"><img src="https://www.linkpicture.com/q/C5C8FECB-30F3-4B79-A604-B2E216F45096.png" alt="Material Icon Creator"></a>
<pre><code>[![Material Icon Creator](https://www.linkpicture.com/q/C5C8FECB-30F3-4B79-A604-B2E216F45096.png)](https://routinehub.co/shortcut/9254/) </code></pre>
  <h2>ProCuts Collection</h2>
  <p style="font-size:20px;">This shortcut is part of the <a href="https://htmlpreview.github.io/?https://github.com/Normal-Tangerine8609/ProCuts-Collection/blob/main/ProCuts-Collection.html">ProCuts Collection</a>, a collection of development-based shortcuts created to empower your shortcuts and shortcutting experience.</p>
</body>
</html>"""
text("${CBF526DA-C3BA-4BE2-B97A-B07D866EAC65}")
		url(url: "data:text/html;charset=utf-8,${Text}") >> url
		openURL(url: URL)
		exit()
	} >> IFResult
	dictionary({"target":"Icons","dic":{"icons":""}})
	runShortcut(name: "Banner Creator 2", input: Dictionary) >> runShortcut
	dictionary({"target":"Colour","for":"background"})
	runShortcut(name: "Banner Creator 2", input: Dictionary) >> runShortcut 1
	dictionary({"target":"Colour","for":"icon"})
	runShortcut(name: "Banner Creator 2", input: Dictionary) >> runShortcut 2
	dictionary({"target":"Type"})
	runShortcut(name: "Banner Creator 2", input: Dictionary) >> runShortcut 3
	dictionary({"icons":"${Shortcut Result}","type":"${Shortcut Result}"})
	setValue(key: "background", value: "${Shortcut Result}", dictionary: Dictionary) >> setValue
	setValue(key: "font", value: "${Shortcut Result}", dictionary: Dictionary) >> setValue 1
	dictionary({"target":"Main"})
	setValue(key: "dic", value: "${Dictionary}", dictionary: Dictionary) >> setValue 2
	runShortcut(name: "Google Font icon vCard", input: Dictionary) >> runShortcut 4
} else {
	getDictionaryFrom(input: ShortcutInput) >> getDictionaryFrom
	if(Dictionary != nil) {
		text(text: "${Dictionary.key(target)}") >> text
		if(Text == "Icons") {
			askForInput(prompt: "Enter the names of the google font icons on new lines. Do not worry about “_” instead of spaces and capitals", default: "${Dictionary.key(dic.icons)}") >> askForInput
			replaceText(input: "${Provided Input}", find: " ", replace: "_") >> replaceText
			changeCase(text: Updated Text, case: lowercase) >> changeCase
			output(result: "${Updated Text}")
		} >> IFResult 1
		if(Text == "Type") {
var E68A0306-1444-4C10-8F9E-1037937E966F = """BEGIN:VCARDN;CHARSET=utf-8:Outlined;;;;
PHOTO;ENCODING=b:￼END:VCARD

BEGIN:VCARDN;CHARSET=utf-8:Filled;;;;
PHOTO;ENCODING=b:￼END:VCARD

BEGIN:VCARDN;CHARSET=utf-8:Rounded;;;;
PHOTO;ENCODING=b:￼END:VCARD

BEGIN:VCARDN;CHARSET=utf-8:Sharp;;;;
PHOTO;ENCODING=b:￼END:VCARD

BEGIN:VCARDN;CHARSET=utf-8:Two Tone;;;;
PHOTO;ENCODING=b:￼END:VCARD"""
text("${E68A0306-1444-4C10-8F9E-1037937E966F}")
			setName(input: Text, name: "V.vcf") >> setName 1
			choose(list: Renamed Item, prompt: "What style of icon would you like to use?") >> choose 1
			output(result: "${Chosen Item.get(Name)}") >> output
		} >> IFResult 2
		if(Text == "Colour") {
			text(text: "false") >> text 1
var Solid = Text
var 91C84D24-6BA2-4C6A-9E00-30889D49B900 = """<!--Coloured vCards v1.2-->
<!--https://routinehub.co/shortcut/9882/-->
<canvas id="canvas"width="100px"height="100px"style="display:none;"></canvas><script>
const input = {
  "items": [
    {
      "name": "One Coloured",
      "colour":"#7E56BB"
},
 {
      "name": "Two Coloured",
      "colour":"#7E56BB-#583c82",
      "solid":true
},
 {
      "name": "Gradient",
      "colour":"#7E56BB-#583c82"
} 
  ]
}

function toHTML(insert){return insert.replace(/&/g,"&amp;").replace(/</g,"&lt;").replace(/>/g,"&gt;")}let canvas=document.getElementById("canvas"),ctx=canvas.getContext("2d");for(var item of input["items"]){let dictionary=item,colours,css;if(dictionary["colour"]){colours=dictionary["colour"]}else{colours=dictionary["color"]}colours=colours.split("-");if(colours.length==1){ctx.fillStyle=colours[0];css=colours[0]}else if(!dictionary["radial"]){let gradient=ctx.createLinearGradient(0,0,0,100);let deg=dictionary["deg"];if(deg){deg=deg.toLowerCase()}switch(deg){case"to left":deg=90;break;case"to right":deg=270;break;case"to top":deg=180;break;case"to bottom":deg=0;break;case"to top left":deg=315;break;case"to top right":deg=45;break;case"to bottom left":deg=135;break;case"to bottom right":deg=225;break;default:deg=parseInt(deg,10);if(deg<0||deg>360||!deg){deg=0}}if(dictionary["solid"]){gradient.addColorStop(0,colours[0]);gradient.addColorStop(0.499999,colours[0]);gradient.addColorStop(0.500001,colours[1]);gradient.addColorStop(1,colours[1]);css=`linear-gradient(${deg}deg, ${colours[0]} 0%, ${colours[0]} 49.9999%, ${colours[1]} 50.0001%, ${colours[1]} 100%)`}else{gradient.addColorStop(0,colours[0]);gradient.addColorStop(1,colours[1]);css=`linear-gradient(${deg}deg, ${colours[0]} 0%, ${colours[1]} 100%)`}ctx.translate(50,50);ctx.rotate(deg*Math.PI/180);ctx.translate(-50,-50);ctx.fillStyle=gradient;}else{let gradient=ctx.createRadialGradient(50,50,58,50,50,0);if(dictionary["solid"]){gradient.addColorStop(0,colours[0]);gradient.addColorStop(0.499999,colours[0]);gradient.addColorStop(0.500001,colours[1]);gradient.addColorStop(1,colours[1]);css=`radial-gradient(${colours[0]} 0%, ${colours[0]} 49.9999%, ${colours[1]} 50.0001%, ${colours[1]} 100%)`}else{gradient.addColorStop(0,colours[0]);gradient.addColorStop(1,colours[1]);css=`radial-gradient(${colours[0]} 0%, ${colours[1]} 100%)`}ctx.fillStyle=gradient;}let name="";if(dictionary["name"]){name=dictionary["name"];}let email="";if(dictionary["email"]){email=dictionary["email"];}let sub="";if(dictionary["sub"]){sub=dictionary["sub"];}ctx.fillRect(0,0,100,100);let dataURL=canvas.toDataURL();let base=  dataURL.split("data:image/png;base64,").join("");document.write("BEGIN:VCARD<br>N;CHARSET=utf-8:"+toHTML(name)+";;;;<br>ORG:"+toHTML(sub)+"<br>EMAIL:"+toHTML(email)+"<br>NOTE:"+toHTML(css)+"<br>PHOTO;ENCODING=b:"+toHTML(base)+"<br>END:VCARD<br>");ctx.setTransform(1, 0, 0, 1, 0, 0);ctx.clearRect(0, 0, canvas.width, canvas.height)}</script>"""
text("${91C84D24-6BA2-4C6A-9E00-30889D49B900}")
			url(url: "data:text/html;charset=utf-8,${Text}") >> url 1
			text(text: "${URL.as(RichText)}") >> text 2
			setName(input: Text, name: "V.vcf") >> setName 2
			choose(list: Renamed Item, prompt: "Choose your type of colour for the ${ShortcutInput.as(Dictionary).key(for)}.") >> choose 2
			if(Chosen Item == "One Coloured") {
				number(value: 1) >> number
			} else {
				if(Chosen Item == "Two Coloured") {
					text(text: "true") >> text 3
var Solid = Text
					number(value: 2) >> number 1
				} else {
					number(value: 2) >> number 2
				}
			} >> IFResult 3
			if(If Result == 2) {
var C421D0D7-C190-43A2-8396-45FDD4BF70E3 = """BEGIN:VCARDN;CHARSET=utf-8:Custome;;;;
PHOTO;ENCODING=b:￼END:VCARD

BEGIN:VCARDN;CHARSET=utf-8:Theme;;;;
PHOTO;ENCODING=b:￼END:VCARD"""
text("${C421D0D7-C190-43A2-8396-45FDD4BF70E3}")
				setName(input: Text, name: "V.vcf") >> setName 3
				choose(list: Renamed Item, prompt: "What type of colour would you like to use?") >> choose 3
				if(Chosen Item == "Custome") {
					number(value: 2)
				} else {
					number(value: 1) >> number 3
				}
			} else {
				number(value: 2) >> number 4
			} >> IFResult 4
			if(If Result == 1) {
				dictionary({"items":[				{				dictionary({"name":"Metal And Rust","colour":"#3a6186-#89253e"})},{				dictionary({"name":"Maroon","colour":"#c94b4b-#4b134f"})},{				dictionary({"name":"Classy Villa","colour":"#23074d-#cc5333"})},{				dictionary({"name":"Coal","colour":"#EB5757-#000000"})},{				dictionary({"name":"Wine","colour":"#ED213A-#93291E"})},{				dictionary({"name":"Bold","colour":"#CB356B-#BD3F32"})},{				dictionary({"name":"Bubble Gum","colour":"#bc4e9c-#f80759"})},{				dictionary({"name":"Vivid","colour":"#ee0979-#ff6a00"})},{				dictionary({"name":"Grape","colour":"#ad5389-#3c1053"})},{				dictionary({"name":"Grape Fruit","colour":"#e96443-#904e95"})},{				dictionary({"name":"Celestial","colour":"#C33764-#1D2671"})},{				dictionary({"name":"Citrus","colour":"#FDC830-#F37335"})},{				dictionary({"name":"Beach Sunset","colour":"#D66D75-#E29587"})},{				dictionary({"name":"Coral","colour":"#ff9966-#ff5e62"})},{				dictionary({"name":"Mango","colour":"#fc4a1a-#f7b733"})},{				dictionary({"name":"Peach","colour":"#FF5F6D-#FFC371"})},{				dictionary({"name":"Dark Sun","colour":"#F2994A-#F2C94C"})},{				dictionary({"name":"Salmon","colour":"#EF3B36-#FFFFFF"})},{				dictionary({"name":"Purple White","colour":"#BA5370-#F4E2D8"})},{				dictionary({"name":"Sulphur","colour":"#CAC531-#F3F9A7"})},{				dictionary({"name":"Blue Raspberry","colour":"#00B4DB-#0083B0"})},{				dictionary({"name":"Atmosphere","colour":"#000046-#1CB5E0"})},{				dictionary({"name":"Light Waters","colour":"#74ebd5-#ACB6E5"})},{				dictionary({"name":"Cloud","colour":"#1c92d2-#f2fcfe"})},{				dictionary({"name":"Cola Ice","colour":"#c0c0aa-#1cefff"})},{				dictionary({"name":"Magic","colour":"#302b63-#0f0c29"})},{				dictionary({"name":"Purple Pine","colour":"#20002c-#cbb4d4"})},{				dictionary({"name":"Beauty And The Breast","colour":"#F0F2F0-#000C40"})},{				dictionary({"name":"Deep Sea","colour":"#283c86-#45a247"})},{				dictionary({"name":"Cucumber","colour":"#11998e-#38ef7d"})},{				dictionary({"name":"Easy Mode","colour":"#DCE35B-#45B649"})},{				dictionary({"name":"Pacific Green","colour":"#34e89e-#0f3443"})},{				dictionary({"name":"Cactus","colour":"#3C3B3F-#605C3C"})},{				dictionary({"name":"Forest","colour":"#5A3F37-#2C7744"})},{				dictionary({"name":"Honey Dew","colour":"#43C6AC-#F8FFAE"})},{				dictionary({"name":"Lemonade","colour":"#a1ffce-#faffd1"})},{				dictionary({"name":"Frost","colour":"#000428-#004e92"})},{				dictionary({"name":"Mauve","colour":"#42275a-#734b6d"})},{				dictionary({"name":"Charcoal","colour":"#141E30-#243B55"})},{				dictionary({"name":"Deep Space","colour":"#000000-#434343"})},{				dictionary({"name":"Clash Of Colours","colour":"#2196f3-#f44336"})},{				dictionary({"name":"Pop","colour":"#16BFFD-#CB3066"})},{				dictionary({"name":"Zombie","colour":"#a80077-#66ff00"})},{				dictionary({"name":"Egypt","colour":"#544a7d-#ffd452"})},{				dictionary({"name":"Beach ball","colour":"#f7ff00-#db36a4"})},{				dictionary({"name":"Fire And Air","colour":"#ff4b1f-#1fddff"})},{				dictionary({"name":"Tropic","colour":"#30E8BF-#FF8235"})},{				dictionary({"name":"Sherbet","colour":"#f79d00-#64f38c"})},{				dictionary({"name":"Miami","colour":"#4DA0B0-#D39D38"})},{				dictionary({"name":"Purple And Green Grapes","colour":"#5614B0-#DBD65C"})}]})
var B2317413-6FA2-470B-99F0-6B549C9532F0 = """<!--Coloured vCards-->
<!--https://routinehub.co/shortcut/9882/-->
<canvas id="canvas"width="100px"height="100px"style="display:none;"></canvas><script>
const input = ￼

function toHTML(insert){return insert.replace(/&/g,"&amp;").replace(/</g,"&lt;").replace(/>/g,"&gt;")}let canvas=document.getElementById("canvas"),ctx=canvas.getContext("2d");for(var item of input["items"]){let dictionary=item,colours,css;if(dictionary["colour"]){colours=dictionary["colour"]}else{colours=dictionary["color"]}colours=colours.split("-");if(colours.length==1){ctx.fillStyle=colours[0];css=colours[0]}else if(!dictionary["radical"]){let gradient=ctx.createLinearGradient(0,0,0,100);let deg=dictionary["deg"];if(deg){deg=deg.toLowerCase()}switch(deg){case"to left":deg=90;break;case"to right":deg=270;break;case"to top":deg=180;break;case"to bottom":deg=0;break;case"to top left":deg=315;break;case"to top right":deg=45;break;case"to bottom left":deg=135;break;case"to bottom right":deg=225;break;default:deg=parseInt(deg,10);if(deg<0||deg>360||!deg){deg=0}}if(dictionary["solid"]){gradient.addColorStop(0,colours[0]);gradient.addColorStop(0.499999,colours[0]);gradient.addColorStop(0.500001,colours[1]);gradient.addColorStop(1,colours[1]);css=`linear-gradient(${deg}deg, ${colours[0]} 0%, ${colours[0]} 49.9999%, ${colours[1]} 50.0001%, ${colours[1]} 100%)`}else{gradient.addColorStop(0,colours[0]);gradient.addColorStop(1,colours[1]);css=`linear-gradient(${deg}deg, ${colours[0]} 0%, ${colours[1]} 100%)`}ctx.translate(50,50);ctx.rotate(deg*Math.PI/180);ctx.translate(-50,-50);ctx.fillStyle=gradient;}else{let gradient=ctx.createRadialGradient(50,50,58,50,50,0);if(dictionary["solid"]){gradient.addColorStop(0,colours[0]);gradient.addColorStop(0.499999,colours[0]);gradient.addColorStop(0.500001,colours[1]);gradient.addColorStop(1,colours[1]);css=`radical-gradient(${colours[0]} 0%, ${colours[0]} 49.9999%, ${colours[1]} 50.0001%, ${colours[1]} 100%)`}else{gradient.addColorStop(0,colours[0]);gradient.addColorStop(1,colours[1]);css=`radical-gradient(${colours[0]} 0%, ${colours[1]} 100%)`}ctx.fillStyle=gradient;}let name="";if(dictionary["name"]){name=dictionary["name"];}let email="";if(dictionary["email"]){email=dictionary["email"];}let sub="";if(dictionary["sub"]){sub=dictionary["sub"];}ctx.fillRect(0,0,100,100);let dataURL=canvas.toDataURL();let base=  dataURL.split("data:image/png;base64,").join("");document.write("BEGIN:VCARD<br>N;CHARSET=utf-8:"+toHTML(name)+";;;;<br>ORG:"+toHTML(sub)+"<br>EMAIL:"+toHTML(email)+"<br>NOTE:"+toHTML(css)+"<br>PHOTO;ENCODING=b:"+toHTML(base)+"<br>END:VCARD<br>");ctx.setTransform(1, 0, 0, 1, 0, 0);ctx.clearRect(0, 0, canvas.width, canvas.height)}</script>"""
text("${B2317413-6FA2-470B-99F0-6B549C9532F0}")
				url(url: "data:text/html;charset=utf-8,${Text}") >> url 2
				text(text: "${URL.as(RichText)}") >> text 4
				setName(input: Text, name: "V.vcf") >> setName 4
				choose(list: Renamed Item) >> choose 4
				matchText(text: "${Chosen Item.get(Notes)}", regex: "#[0-9a-fA-F]{6}") >> matchText
			} else {
				repeat(If Result) {
					if(If Result == 1) {
						text(text: "a") >> text 5
					} else {
						text(text: "another") >> text 6
					} >> IFResult 5
var AEEEE14D-F461-4EE3-A8E8-BC86445C5B15 = """<!--Coloured vCards-->
<!--https://routinehub.co/shortcut/9882/-->
<canvas id="canvas"width="100px"height="100px"style="display:none;"></canvas><script>
const input = {
  "items": [
     {
      "name": "Custome",
      "colour": "#fff-#000",
      "solid":true
    },

{
      "name": "Image Colour Picker",
      "colour": "#000-#fff",
      "solid":true
    },

    {
      "name": "Red",
      "colour": "#E16969"
    },
    {
      "name": "Vermilion",
      "colour": "#F0886B"
    },
    {
      "name": "Apricot",
      "colour": "#ECAA5E"
    },
    {
      "name": "Pollen",
      "colour": "#E7C640"
    },
    {
      "name": "Mint",
      "colour": "#6BC569"
    },
    {
      "name": "Turquoise",
      "colour": "#5ECAAC"
    },
    {
      "name": "Light Blue",
      "colour": "#5BC5D9"
    },
    {
      "name": "Cerulean",
      "colour": "#52B0F0"
    },
    {
      "name": "Delft Blue",
      "colour": "#4F66BF"
    },
    {
      "name": "Violet",
      "colour": "#7E56BB"
    },
    {
      "name": "Lilac",
      "colour": "#B07BDD"
    },
    {
      "name": "Light Pink",
      "colour": "#E78ED0"
    },
    {
      "name": "Fog",
      "colour": "#848C96"
    },
    {
      "name": "Limestone",
      "colour": "#949D94"
    },
    {
      "name": "Sand",
      "colour": "#968C87"
    }
  ]
}

function toHTML(insert){return insert.replace(/&/g,"&amp;").replace(/</g,"&lt;").replace(/>/g,"&gt;")}let canvas=document.getElementById("canvas"),ctx=canvas.getContext("2d");for(var item of input["items"]){let dictionary=item,colours,css;if(dictionary["colour"]){colours=dictionary["colour"]}else{colours=dictionary["color"]}colours=colours.split("-");if(colours.length==1){ctx.fillStyle=colours[0];css=colours[0]}else if(!dictionary["radical"]){let gradient=ctx.createLinearGradient(0,0,0,100);let deg=dictionary["deg"];if(deg){deg=deg.toLowerCase()}switch(deg){case"to left":deg=90;break;case"to right":deg=270;break;case"to top":deg=180;break;case"to bottom":deg=0;break;case"to top left":deg=315;break;case"to top right":deg=45;break;case"to bottom left":deg=135;break;case"to bottom right":deg=225;break;default:deg=parseInt(deg,10);if(deg<0||deg>360||!deg){deg=0}}if(dictionary["solid"]){gradient.addColorStop(0,colours[0]);gradient.addColorStop(0.499999,colours[0]);gradient.addColorStop(0.500001,colours[1]);gradient.addColorStop(1,colours[1]);css=`linear-gradient(${deg}deg, ${colours[0]} 0%, ${colours[0]} 49.9999%, ${colours[1]} 50.0001%, ${colours[1]} 100%)`}else{gradient.addColorStop(0,colours[0]);gradient.addColorStop(1,colours[1]);css=`linear-gradient(${deg}deg, ${colours[0]} 0%, ${colours[1]} 100%)`}ctx.translate(50,50);ctx.rotate(deg*Math.PI/180);ctx.translate(-50,-50);ctx.fillStyle=gradient;}else{let gradient=ctx.createRadialGradient(50,50,58,50,50,0);if(dictionary["solid"]){gradient.addColorStop(0,colours[0]);gradient.addColorStop(0.499999,colours[0]);gradient.addColorStop(0.500001,colours[1]);gradient.addColorStop(1,colours[1]);css=`radical-gradient(${colours[0]} 0%, ${colours[0]} 49.9999%, ${colours[1]} 50.0001%, ${colours[1]} 100%)`}else{gradient.addColorStop(0,colours[0]);gradient.addColorStop(1,colours[1]);css=`radical-gradient(${colours[0]} 0%, ${colours[1]} 100%)`}ctx.fillStyle=gradient;}let name="";if(dictionary["name"]){name=dictionary["name"];}let email="";if(dictionary["email"]){email=dictionary["email"];}let sub="";if(dictionary["sub"]){sub=dictionary["sub"];}ctx.fillRect(0,0,100,100);let dataURL=canvas.toDataURL();let base=  dataURL.split("data:image/png;base64,").join("");document.write("BEGIN:VCARD<br>N;CHARSET=utf-8:"+toHTML(name)+";;;;<br>ORG:"+toHTML(sub)+"<br>EMAIL:"+toHTML(email)+"<br>NOTE:"+toHTML(css)+"<br>PHOTO;ENCODING=b:"+toHTML(base)+"<br>END:VCARD<br>");ctx.setTransform(1, 0, 0, 1, 0, 0);ctx.clearRect(0, 0, canvas.width, canvas.height)}</script>"""
text("${AEEEE14D-F461-4EE3-A8E8-BC86445C5B15}")
					url(url: "data:text/html;charset=utf-8,${Text}") >> url 3
					text(text: "${URL.as(RichText)}") >> text 7
					setName(input: Text, name: "V.vcf") >> setName 5
					choose(list: Renamed Item, prompt: "Choose ${If Result} colour.") >> choose 5
					if(Chosen Item == "Custome") {
						askForInput(prompt: "Enter a hex, rgb, hsl or CSS colour name.", default: #) >> askForInput 1
					} else {
						if(Chosen Item == "Image Colour Picker") {
var 8FBB4078-1E76-42F4-9146-A4CD91579001 = """<canvas style=""id="canvas" width="1" height="1"></canvas><script>
  var canvas=document.getElementById("canvas"),
      ctx=canvas.getContext("2d"),
      a={"a":[]}
  function fill(c) {
    ctx.fillStyle=c
    ctx.fillRect(0,0,1,1)
 a["a"].push(canvas.toDataURL().replace("data:image/png;base64,",""))
  }
  for(var i = 0; i < 360; i++) {
    fill(`hsl(${i},50%,50%)`)
  }
  for(var i = 0; i < 100; i++) {
    fill(`hsl(0,0%,${i}%)`)
  }
  for(var i = 0; i < 360; i++) {
    fill(`hsl(${i},90%,50%)`)
  }
  document.write(JSON.stringify(a))
</script>"""
text("${8FBB4078-1E76-42F4-9146-A4CD91579001}")
							url(url: "data:text/html;charset=utf-8,${Text}") >> url 4
							text(text: "${URL.as(RichText)}") >> text 8
							decode(input: Text) >> decode
							choose(list: Base64 Encoded) >> choose 6
							decode(input: Chosen Item) >> decode 1
var 6A0A29BE-4A6C-4F28-8EE7-D4C6D99782DB = """<script>
      const rgbToHex = (r, g, b) => '#' + [r, g, b]
  .map(x => x.toString(16).padStart(2, '0')).join('')
      var img = new Image()
      img.src= "data:image/jpeg;base64,￼"
      img.onload = function() {
       var canvas = document.createElement("canvas"),
           ctx = canvas.getContext("2d")
       ctx.drawImage(img, 0, 0);
       let data = ctx.getImageData(0, 0, 1, 1).data;
      document.write(rgbToHex(...data))
      }
    </script>"""
text("${6A0A29BE-4A6C-4F28-8EE7-D4C6D99782DB}")
							url(url: "data:text/html;charset=utf-8,${Text}") >> url 5
							text(text: "${URL.as(RichText)}")
						} else {
							text(text: "${Chosen Item.get(Notes)}") >> text 9
						}
					} >> IFResult 6
				} >> RepeatResult
			} >> IFResult 7
			combineText(text: If Result, combine: Custom, separator: "-") >> combineText
			if(Combined Text .contains "-") {
var 7EF85377-EE91-4E54-8838-FC2D25F3A683 = """<!--Coloured vCards v1.3-->
<!--https://routinehub.co/shortcut/9882/-->
<canvas id="canvas"width="100px"height="100px"style="display:none;"></canvas><script>
const input = {
  "items": [
    {
      "name": "To Top",
      "colour": "￼",
      "solid":￼,
      "deg": "to top"
    },
    {
      "name": "To Bottom",
      "colour": "￼",
      "solid":￼,
      "deg": "to bottom"
    },
    {
      "name": "To Left",
      "colour": "￼",
      "solid":￼,
      "deg": "to left"
    },
    {
      "name": "To Right",
      "colour": "￼",
      "solid":￼,
      "deg": "to right"
    },
    {
      "name": "To Top Left",
      "colour": "￼",
      "solid":￼,
      "deg": "to top left"
    },
    {
      "name": "To Top Right",
      "colour": "￼",
      "solid":￼,
      "deg": "to top right"
    },
    {
      "name": "To Bottom Left",
      "colour": "￼",
      "solid":￼,
      "deg": "to bottom left"
    },
    {
      "name": "To Bottom Right",
      "colour": "￼",
      "solid":￼,
      "deg": "to bottom right"
    }
  ]
}

function toHTML(insert){return insert.replace(/&/g,"&amp;").replace(/</g,"&lt;").replace(/>/g,"&gt;")}let canvas=document.getElementById("canvas"),ctx=canvas.getContext("2d");for(var item of input["items"]){let dictionary=item,colours,css;if(dictionary["colour"]){colours=dictionary["colour"]}else{colours=dictionary["color"]}colours=colours.split("-");if(colours.length==1){ctx.fillStyle=colours[0];css=colours[0]}else if(!dictionary["radial"]){let gradient=ctx.createLinearGradient(0,0,0,100);let deg=dictionary["deg"];if(deg){deg=deg.toLowerCase()}switch(deg){case"to left":deg=90;break;case"to right":deg=270;break;case"to top":deg=180;break;case"to bottom":deg=0;break;case"to top left":deg=135;break;case"to top right":deg=225;break;case"to bottom left":deg=45;break;case"to bottom right":deg=315;break;default:deg=parseInt(deg,10);if(deg<0||deg>360||!deg){deg=0}}if(dictionary["solid"]){gradient.addColorStop(0,colours[0]);gradient.addColorStop(0.499999,colours[0]);gradient.addColorStop(0.500001,colours[1]);gradient.addColorStop(1,colours[1]);css=`linear-gradient(${deg}deg, ${colours[0]} 0%, ${colours[0]} 49.9999%, ${colours[1]} 50.0001%, ${colours[1]} 100%)`}else{gradient.addColorStop(0,colours[0]);gradient.addColorStop(1,colours[1]);css=`linear-gradient(${deg}deg, ${colours[0]} 0%, ${colours[1]} 100%)`}ctx.translate(50,50);ctx.rotate(deg*Math.PI/180);ctx.translate(-50,-50);ctx.fillStyle=gradient;}else{let gradient=ctx.createRadialGradient(50,50,58,50,50,0);if(dictionary["solid"]){gradient.addColorStop(0,colours[0]);gradient.addColorStop(0.499999,colours[0]);gradient.addColorStop(0.500001,colours[1]);gradient.addColorStop(1,colours[1]);css=`radial-gradient(${colours[0]} 0%, ${colours[0]} 49.9999%, ${colours[1]} 50.0001%, ${colours[1]} 100%)`}else{gradient.addColorStop(0,colours[0]);gradient.addColorStop(1,colours[1]);css=`radial-gradient(${colours[0]} 0%, ${colours[1]} 100%)`}ctx.fillStyle=gradient;}let name="";if(dictionary["name"]){name=dictionary["name"];}let email="";if(dictionary["email"]){email=dictionary["email"];}let sub="";if(dictionary["sub"]){sub=dictionary["sub"];}ctx.fillRect(0,0,100,100);let dataURL=canvas.toDataURL();let base=  dataURL.split("data:image/png;base64,").join("");document.write("BEGIN:VCARD<br>N;CHARSET=utf-8:"+toHTML(name)+";;;;<br>ORG:"+toHTML(sub)+"<br>EMAIL:"+toHTML(email)+"<br>NOTE:"+toHTML(css)+"<br>PHOTO;ENCODING=b:"+toHTML(base)+"<br>END:VCARD<br>");ctx.setTransform(1, 0, 0, 1, 0, 0);ctx.clearRect(0, 0, canvas.width, canvas.height)}</script>"""
text("${7EF85377-EE91-4E54-8838-FC2D25F3A683}")
				url(url: "data:text/html;charset=utf-8,${Text}") >> url 6
				text(text: "${URL.as(RichText)}") >> text 10
				setName(input: Text, name: "V.vcf") >> setName 6
				choose(list: Renamed Item, prompt: "Pick the rotation of the colours.") >> choose 7
			} >> IFResult 8
			dictionary({"colour":"${Combined Text}","deg":"${Chosen Item.get(Name)}","solid":})
			output(result: "${Dictionary}") >> output 1
		} >> IFResult 9
		if(Text == "Colour base") {
			dictionary({"No":"false","Yes":"true"})
			keysFrom(dictionary: Dictionary) >> keysFrom
var FA48FCE4-8962-49A0-AB35-954470EB6061 = """<!--Coloured vCards v1.3-->
<!--https://routinehub.co/shortcut/9882/-->
<canvas id="canvas"width="100px"height="100px"style="display:none;"></canvas><script>
const input = {
  "items": [
    {
      "name": "HI",
      "colour": "￼",
      "solid":￼,
      "deg": "￼"
    }
  ]
}

function toHTML(insert){return insert.replace(/&/g,"&amp;").replace(/</g,"&lt;").replace(/>/g,"&gt;")}let canvas=document.getElementById("canvas"),ctx=canvas.getContext("2d");for(var item of input["items"]){let dictionary=item,colours,css;if(dictionary["colour"]){colours=dictionary["colour"]}else{colours=dictionary["color"]}colours=colours.split("-");if(colours.length==1){ctx.fillStyle=colours[0];css=colours[0]}else if(!dictionary["radial"]){let gradient=ctx.createLinearGradient(0,0,0,100);let deg=dictionary["deg"];if(deg){deg=deg.toLowerCase()}switch(deg){case"to left":deg=90;break;case"to right":deg=270;break;case"to top":deg=180;break;case"to bottom":deg=0;break;case"to top left":deg=135;break;case"to top right":deg=225;break;case"to bottom left":deg=45;break;case"to bottom right":deg=315;break;default:deg=parseInt(deg,10);if(deg<0||deg>360||!deg){deg=0}}if(dictionary["solid"]){gradient.addColorStop(0,colours[0]);gradient.addColorStop(0.499999,colours[0]);gradient.addColorStop(0.500001,colours[1]);gradient.addColorStop(1,colours[1]);css=`linear-gradient(${deg}deg, ${colours[0]} 0%, ${colours[0]} 49.9999%, ${colours[1]} 50.0001%, ${colours[1]} 100%)`}else{gradient.addColorStop(0,colours[0]);gradient.addColorStop(1,colours[1]);css=`linear-gradient(${deg}deg, ${colours[0]} 0%, ${colours[1]} 100%)`}ctx.translate(50,50);ctx.rotate(deg*Math.PI/180);ctx.translate(-50,-50);ctx.fillStyle=gradient;}else{let gradient=ctx.createRadialGradient(50,50,58,50,50,0);if(dictionary["solid"]){gradient.addColorStop(0,colours[0]);gradient.addColorStop(0.499999,colours[0]);gradient.addColorStop(0.500001,colours[1]);gradient.addColorStop(1,colours[1]);css=`radial-gradient(${colours[0]} 0%, ${colours[0]} 49.9999%, ${colours[1]} 50.0001%, ${colours[1]} 100%)`}else{gradient.addColorStop(0,colours[0]);gradient.addColorStop(1,colours[1]);css=`radial-gradient(${colours[0]} 0%, ${colours[1]} 100%)`}ctx.fillStyle=gradient;}let name="";if(dictionary["name"]){name=dictionary["name"];}let email="";if(dictionary["email"]){email=dictionary["email"];}let sub="";if(dictionary["sub"]){sub=dictionary["sub"];}ctx.fillRect(0,0,100,100);let dataURL=canvas.toDataURL();let base=  dataURL.split("data:image/png;base64,").join("");document.write("BEGIN:VCARD<br>N;CHARSET=utf-8:"+toHTML(name)+";;;;<br>ORG:"+toHTML(sub)+"<br>EMAIL:"+toHTML(email)+"<br>NOTE:"+toHTML(css)+"<br>PHOTO;ENCODING=b:"+toHTML(base)+"<br>END:VCARD<br>");ctx.setTransform(1, 0, 0, 1, 0, 0);ctx.clearRect(0, 0, canvas.width, canvas.height)}</script>"""
text("${FA48FCE4-8962-49A0-AB35-954470EB6061}")
			url(url: "data:text/html;charset=utf-8,${Text}") >> url 7
			text(text: "${URL.as(RichText)}") >> text 11
			setName(input: Text, name: "V.vcf") >> setName 7
			contactDetail(detail: Contact Photo, contact: Renamed Item) >> contactDetail
			decode(input: Contact Photo) >> decode 2
			output(result: "${Base64 Encoded}") >> output 2
		} >> IFResult 10
		if(Text == "Icon base") {
			dictionary({"Outlined":"https://fonts.googleapis.com/icon?family=Material+Icons+Outlined","Filled":"https://fonts.googleapis.com/icon?family=Material+Icons","Rounded":"https://fonts.googleapis.com/icon?family=Material+Icons+Round","Sharp":"https://fonts.googleapis.com/icon?family=Material+Icons+Sharp","Two Tone":"https://fonts.googleapis.com/icon?family=Material+Icons+Two+Tone"})
			keysFrom(dictionary: Dictionary) >> keysFrom 1
			downloadURL(url: "${Dictionary Value}") >> downloadURL
			matchText(text: "${Contents of URL.as(RichText)}", regex: "(?<=url\().*?(?=\))") >> matchText 1
			dictionary({"Yes":"true","No":"false"})
			keysFrom(dictionary: Dictionary) >> keysFrom 2
			keysFrom(dictionary: Dictionary) >> keysFrom 3
var AC64CDAA-A947-4F88-9F4D-6A752620D2A9 = """<canvas id="c" height="166" width="166"></canvas>
<script>
  var c = document.getElementById("c"),
  ctx = c.getContext('2d');
  const material_font = new FontFace('google', 'url(￼)');
document.fonts.add(material_font);
material_font.load().then(() => {
  ctx.fillStyle = fill("￼","￼",￼)
  ctx.fillRect(0,0,c.width,c.height);
  ctx.fillStyle = fill("￼","￼",￼);
  ctx.font = '140px google';
  ctx.fillText('￼', 13, 153);
document.write(c.toDataURL().split("data:image/png;base64,").join(""))
})
  function fill(colour, deg,solid) {
  let w = c.width,
  h = c.height,
  fillStyle
  if(colour.includes("-")) {
    deg = deg.toLowerCase();
    let x1,x2,y1,y2
    switch(deg){
      case"to left":
        x1 = w, x2 = 0, y1 = 0, y2 = 0;
        break;
      case"to right":
        x1 = 0, x2 = w, y1 = 0, y2 = 0;
        break;
      case"to top":
        x1 = 0, x2 = 0, y1 = h, y2 = 0;
        break;
      case"to bottom":
        x1 = 0, x2 = 0, y1 = 0, y2 = h;
        break;
      case"to top left":
        x1 = w, x2 = 0, y1 = h, y2 = 0;
        break;
      case"to top right":
        x1 = 0, x2 = w, y1 = h, y2 = 0;
        break;
      case"to bottom left":
        x1 = w, x2 = 0, y1 = 0, y2 = h;
        break;
      case"to bottom right":
        x1 = 0, x2 = w, y1 = 0, y2 = h;
       }
    let gradient = ctx.createLinearGradient(x1,y1,x2,y2)
    if(solid) {
      gradient.addColorStop(0,colour.split("-")[0])
      gradient.addColorStop(0.4999,colour.split("-")[0])
      gradient.addColorStop(0.5001,colour.split("-")[1])
      gradient.addColorStop(1,colour.split("-")[1])
    } else {
      gradient.addColorStop(0,colour.split("-")[0])
      gradient.addColorStop(1,colour.split("-")[1])
    }
    fillStyle = gradient
  } else {
    fillStyle = colour
  }
  ctx.fillStyle = fillStyle
  }
</script>
"""
text("${AC64CDAA-A947-4F88-9F4D-6A752620D2A9}")
			url(url: "data:text/html;charset=utf-8,${Text}") >> url 8
			text(text: "${URL.as(RichText)}") >> text 12
			output(result: "${Text}") >> output 3
		} >> IFResult 11
		if(Text == "Main") {
			dictionary({"target":"Colour base"})
			setValue(key: "colour", value: "${Dictionary.key(dic.background)}", dictionary: Dictionary) >> setValue 3
			runShortcut(name: "Google Font icon vCard", input: Dictionary) >> runShortcut 5
			dictionary({"target":"Colour base"})
			setValue(key: "colour", value: "${Dictionary.key(dic.font)}", dictionary: Dictionary) >> setValue 4
			runShortcut(name: "Google Font icon vCard", input: Dictionary) >> runShortcut 6
			splitText(text: Dictionary) >> splitText
			count(input: Split Text) >> count
			math(input: Count, operation: -, operand: "1") >> math
			getItemFromList(list: Split Text) >> getItemFromList
			dictionary({"target":"Icon base"})
			dictionary({"icons":"${Item from List}","type":"${Dictionary.key(dic.type)}"})
			setValue(key: "background", value: "${Dictionary.key(dic.background)}", dictionary: Dictionary) >> setValue 5
			setValue(key: "font", value: "${Dictionary.key(dic.font)}", dictionary: Dictionary) >> setValue 6
			setValue(key: "dic", value: "${Dictionary}", dictionary: Dictionary) >> setValue 7
			runShortcut(name: "Google Font icon vCard", input: Dictionary) >> runShortcut 7
			dictionary({"target":"Main"})
			dictionary({"icons":"${Dictionary.key(dic.icons)}","type":"${Dictionary.key(dic.type)}"})
			setValue(key: "background", value: "${Dictionary.key(dic.background)}", dictionary: Dictionary) >> setValue 8
			setValue(key: "font", value: "${Dictionary.key(dic.font)}", dictionary: Dictionary) >> setValue 9
			setValue(key: "dic", value: "${Dictionary}", dictionary: Dictionary) >> setValue 10
			keysFrom(dictionary: Dictionary) >> keysFrom 4
var F33C0DCB-ED6C-4E1D-8C8A-DF7070409C67 = """BEGIN:VCARDN;CHARSET=utf-8:Icons;;;;
ORG:￼ + ￼ more
PHOTO;ENCODING=b:￼END:VCARD

BEGIN:VCARDN;CHARSET=utf-8:Background;;;;
ORG:￼
PHOTO;ENCODING=b:￼END:VCARD

BEGIN:VCARDN;CHARSET=utf-8:Icon Colour;;;;
ORG:￼
PHOTO;ENCODING=b:￼END:VCARD

BEGIN:VCARDN;CHARSET=utf-8:Type;;;;
ORG:￼
PHOTO;ENCODING=b:￼END:VCARD

BEGIN:VCARDN;CHARSET=utf-8:View Icons;;;;
ORG:In a vCard menu
PHOTO;ENCODING=b:￼END:VCARD

BEGIN:VCARDN;CHARSET=utf-8:Exit;;;;
ORG:And save icons
PHOTO;ENCODING=b:￼END:VCARD"""
text("${F33C0DCB-ED6C-4E1D-8C8A-DF7070409C67}")
			setName(input: Text, name: "V.vcf") >> setName 8
			choose(list: Renamed Item, prompt: "Tap on an item to edit it or complete an action.") >> choose 8
			if(Chosen Item == "Icons") {
				dictionary({"target":"Icons","dic":{"icons":"${Dictionary.key(dic.icons)}"}})
				runShortcut(name: "Google Font icon vCard", input: Dictionary) >> runShortcut 8
				setValue(key: "dic.icons", value: "${Shortcut Result}", dictionary: Dictionary) >> setValue 11
				runShortcut(name: "Google Font icon vCard", input: Dictionary) >> runShortcut 9
			} >> IFResult 12
			if(Chosen Item == "Background") {
				dictionary({"target":"Colour","for":"background"})
				runShortcut(name: "Google Font icon vCard", input: Dictionary) >> runShortcut 10
				setValue(key: "dic.background", value: "${Shortcut Result}", dictionary: Dictionary) >> setValue 12
				runShortcut(name: "Google Font icon vCard", input: Dictionary) >> runShortcut 11
			} >> IFResult 13
			if(Chosen Item == "Icon Colour") {
				dictionary({"target":"Colour","for":"icon"})
				runShortcut(name: "Google Font icon vCard", input: Dictionary) >> runShortcut 12
				setValue(key: "dic.font", value: "${Shortcut Result}", dictionary: Dictionary) >> setValue 13
				runShortcut(name: "Google Font icon vCard", input: Dictionary) >> runShortcut 13
			} >> IFResult 14
			if(Chosen Item == "Type") {
				dictionary({"target":"Type"})
				runShortcut(name: "Google Font icon vCard", input: Dictionary) >> runShortcut 14
				setValue(key: "dic.type", value: "${Shortcut Result}", dictionary: Dictionary) >> setValue 14
				runShortcut(name: "Google Font icon vCard", input: Dictionary) >> runShortcut 15
			} >> IFResult 15
			if(Chosen Item == "View Icons") {
				splitText(text: Dictionary) >> splitText 1
				repeatEach(Split Text) {
					dictionary({"target":"Icon base"})
					dictionary({"icons":"${Repeat Item}","type":"${Dictionary.key(dic.type)}"})
					setValue(key: "background", value: "${Dictionary.key(dic.background)}", dictionary: Dictionary) >> setValue 15
					setValue(key: "font", value: "${Dictionary.key(dic.font)}", dictionary: Dictionary) >> setValue 16
					setValue(key: "dic", value: "${Dictionary}", dictionary: Dictionary) >> setValue 17
					runShortcut(name: "Google Font icon vCard", input: Dictionary) >> runShortcut 16
var 1FA371A4-36F9-4CD5-A7D8-B5583AB843E6 = """BEGIN:VCARDN;CHARSET=utf-8:￼;;;; 
PHOTO;ENCODING=b:￼END:VCARD"""
text("${1FA371A4-36F9-4CD5-A7D8-B5583AB843E6}")
				} >> RepeatResult 1
				text(text: "${Repeat Results}") >> text 13
				setName(input: Text, name: "V.vcf") >> setName 9
				choose(list: Renamed Item, prompt: "Tap on an item to continue.") >> choose 9
				runShortcut(name: "Google Font icon vCard", input: Dictionary) >> runShortcut 17
			} >> IFResult 16
			if(Chosen Item == "Exit") {
				splitText(text: Dictionary) >> splitText 2
				repeatEach(Split Text) {
					dictionary({"target":"Icon base"})
					dictionary({"icons":"${Repeat Item}","type":"${Dictionary.key(dic.type)}"})
					setValue(key: "background", value: "${Dictionary.key(dic.background)}", dictionary: Dictionary) >> setValue 18
					setValue(key: "font", value: "${Dictionary.key(dic.font)}", dictionary: Dictionary) >> setValue 19
					setValue(key: "dic", value: "${Dictionary}", dictionary: Dictionary) >> setValue 20
					runShortcut(name: "Google Font icon vCard", input: Dictionary) >> runShortcut 18
				} >> RepeatResult 2
var A27E7D31-3143-49A0-8C3E-F56FA25CEAF1 = """BEGIN:VCARDN;CHARSET=utf-8:Save Images;;;;
PHOTO;ENCODING=b:￼END:VCARD

BEGIN:VCARDN;CHARSET=utf-8:Copy JSON;;;;
PHOTO;ENCODING=b:￼END:VCARD

BEGIN:VCARDN;CHARSET=utf-8:Share To Fancy List Maker;;;;
PHOTO;ENCODING=b:￼END:VCARD"""
text("${A27E7D31-3143-49A0-8C3E-F56FA25CEAF1}")
				setName(input: Text, name: "V.vcf") >> setName 10
				choose(list: Renamed Item, prompt: "Chose your saving method", multiple: false) >> choose 10
				if(Chosen Item .contains "Save Images") {
					decode(input: Repeat Results) >> decode 3
					saveToCameraRoll(image: Base64 Encoded) >> saveToCameraRoll
				} >> IFResult 17
				if(Chosen Item .contains "Copy JSON") {
//Unable to get shortcuts action is.workflow.actions.setvariable
					repeatEach(Repeat Results) {
						getItemFromList(list: Split Text, type: Item At Index, index: Repeat Index) >> getItemFromList 1
						setValue(key: "${Item from List}", value: "${Repeat Item}", dictionary: Dic) >> setValue 21
var Dic = Dictionary
					} >> RepeatResult 3
					setClipboard(variable: Dic) >> setClipboard
				} else {
					if(Chosen Item == "Share To Fancy List Maker") {
						getShortcuts() >> getShortcuts
						if(My Shortcuts .contains "Fancy List Maker") {
							alert(alert: "Would you like to download it?", title: "You do not have Fancy List Maker")
							openURL(url: "https://routinehub.co/shortcut/9083/") >> openURL
							exit()
						} >> IFResult 18
						repeatEach(Repeat Results) {
							getItemFromList(list: Split Text, type: Item At Index, index: Repeat Index) >> getItemFromList 2
var 8AEC075C-B354-4320-88C6-615B19EF073B = """BEGIN:VCARDN;CHARSET=utf-8:￼;;;;
PHOTO;ENCODING=b:￼END:VCARD"""
text("${8AEC075C-B354-4320-88C6-615B19EF073B}")
						} >> RepeatResult 4
						text(text: "${Repeat Results}") >> text 14
						runShortcut(name: "Fancy List Maker", input: Text) >> runShortcut 19
					}
				} >> IFResult 19
				showResult(text: "Saving Method Complete")
				exit()
			}
		}
	} >> IFResult 20
} >> IFResult 21
