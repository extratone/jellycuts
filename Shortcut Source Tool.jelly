import Shortcuts
#Color: Red, #Icon: microscope

/*
Copy and paste multiple actions, view/edit/save/import or web-review shortcuts
2025-03-31 	v5.0.1
https://routinehub.co/user/gluebyte
https://bsky.app/profile/gluebyte.bsky.social
*/
randomNumber(min: 1, max: 2) >> randomNumber
if(Random Number == 1) { >> IFResult
	getIP() >> getIP
	if(Current IP Address != nil) {
		downloadURL(url: "https://updatecheck.gluebyte.workers.dev/?id=33C37587") >> downloadURL
		if(Contents of URL .contains "2025-03-31") { >> IFResult 1
			menu(, [üåè  Go to RoutineHub, üëæ  Download Update, ‚Æê  Not Now]) {
			case("üåè  Go to RoutineHub"):
				openURL(url: "https://routinehub.co/shortcut/5256/")
				exit()
			case("üëæ  Download Update"):
				downloadURL(url: "https://routinehub.co/api/v1/shortcuts/5256/versions/latest") >> downloadURL 1
				matchText(text: "${Contents of URL}", regex: "(?<="id":\D?)\d+") >> matchText
				expandURL(url: "https://routinehub.co/download/${Matches}/") >> expandURL
				replaceText(input: "${Expanded URL}", find: "^.+icloud.com/", replace: "shortcuts://", isRegex: true) >> replaceText
				openURL(url: Updated Text) >> openURL
				exit()
			case("‚Æê  Not Now"):
			} >> MenuResult
		}
	} >> IFResult 2
} >> IFResult 3
if(ShortcutInput != nil) {
var file = ShortcutInput
} else { >>  4
	menu(

Get Shortcut Source from:

, [üìã  Clipboard (iCloud link / plist / json), üìù  File, üí´  Shortcut]) {
	case("üìã  Clipboard (iCloud link / plist / json)"): >> MenuResult 1
var file = Clipboard
	case("üìù  File"): >> MenuResult 2
		selectFile() >> selectFile
	case("üí´  Shortcut"): >> MenuResult 3
		runShortcut(name: "Shortcut Source Helper") >> runShortcut
		if(Shortcut Result == nil) {
			exit()
		} >> IFResult 4
	} >> MenuResult 4
} >> IFResult 5
if(file != nil) { >> IFResult 6
	if(file .beginsWith "https://www.icloud.com/shortcuts/") {
		replaceText(input: "${file}", find: "icloud.com/shortcuts/", replace: "icloud.com/shortcuts/api/records/") >> replaceText 1
		downloadURL(url: "${Updated Text}") >> downloadURL 2
		downloadURL(url: "${Contents of URL.as(Dictionary).key(fields.shortcut.value.downloadURL)}") >> downloadURL 3
		setName(input: Contents of URL, name: "${Contents of URL.as(Dictionary).key(fields.name.value)}.plist") >> setName
	} >> IFResult 7
} >> IFResult 8
if(If Result .beginsWith "{") { >> IFResult 9
	setName(input: If Result, name: "${If Result.get(Name)}.json") >> setName 1
} else { >>  2
	setName(input: If Result, name: "${If Result.as(File).get(Name)}.plist") >> setName 2
	getFileOfType(input: Renamed Item, type: "com.apple.property-list") >> getFileOfType
} >> IFResult 10
var file = If Result
setValue(key: "a", value: "${file.get(Name)}") >> setValue
replaceText(input: "${Dictionary}", find: "\u0023", replace: "\\u0023", isRegex: true) >> replaceText 2
url(url: "data:text/html;charset=utf-8,<body/><script>document.body.textContent=encodeURIComponent(((a=${Updated Text}.a).length>a.normalize().length)?a.split('').join('\u2009'):a)</script>") >> url
decodeURL(url: "${URL.as(RichText)}") >> decodeURL
list(items: (
    "\Ud83e\Uddd0  Quick Look Source",
    "\Ud83d\Udcdd  Save Source",
    "\Ud83d\Udcbb  Share Source",
    "\U270f\Ufe0f  Edit/Restore Source",
    "\U2753  Replace \U2018++\U2019 with New Lines in Import Questions",
    "\U2702\Ufe0f  Copy Actions between Empty Comments",
    "\Ud83d\Udd0d\Ud83d\Udd0d  Compare with Other Shortcut",
    "\Ud83d\Udd0d  Create Web Review (trim large text)",
    "\Ud83d\Udd0d  Create Web Review (expand all)",
    "\Ud83d\Udd0d  Create Web Review"
)) >> list
choose(list: List, prompt: "
${URL Encoded Text}.${ActionOutput} (${file.get(File Size)})
") >> command
if(command .beginsWith "‚úÇÔ∏è") { >> IFResult 11
	replaceText(input: "${file}", find: "(?s)^.*?(?<=\n\t\t<dict>\n\t\t\t<key>WFWorkflowActionIdentifier</key>\n\t\t\t<string>is.workflow.actions.comment</string>\n\t\t\t<key>WFWorkflowActionParameters</key>\n\t\t\t<dict(?:/|>\n\t\t\t\t<key>WFCommentActionText</key>\n\t\t\t\t<string></string>\n\t\t\t</dict)>\n\t\t</dict>)(.*?)(?=\n\t\t<dict>\n\t\t\t<key>WFWorkflowActionIdentifier</key>\n\t\t\t<string>is.workflow.actions.comment</string>\n\t\t\t<key>WFWorkflowActionParameters</key>\n\t\t\t<dict(?:/|>\n\t\t\t\t<key>WFCommentActionText</key>\n\t\t\t\t<string></string>\n\t\t\t</dict)>\n\t\t</dict>|\n\t</array>).*$", replace: "<dict><key>actions</key><array>$1</array></dict>", isRegex: true) >> replaceText 3
	if(Updated Text .beginsWith "<dict") {
	} else {
		count(input: file) >> count
		alert(alert: "

‚õîÔ∏è No actions found between
	two empty comments ‚õîÔ∏è

Copy all ${Count} actions?

", tincel: $2)
		replaceText(input: "${file}", find: "(?s)^.*?(?<=<key>WFWorkflowActions</key>\n\t<array>)(.*?)(?=\n\t</array>).*$", replace: "<dict><key>actions</key><array>$1</array></dict>", isRegex: true) >> replaceText 4
	} >> IFResult 12
	setName(input: If Result, name: "a.plist") >> setName 3
	keysFrom(dictionary: Renamed Item) >> keysFrom
	replaceText(input: "${DeviceDetails.get(System Version)}", find: "\.(\d+).*", replace: "$1", isRegex: true) >> replaceText 5
	if(DeviceDetails !=) {
		math(input: Updated Text, operation: -, operand: "29") >> math
	} >> IFResult 13
	if(If Result > 144) {
//Unable to get shortcuts action com.sindresorhus.Actions.SetUniformTypeIdentifier
	} else {
		repeatEach(Dictionary Value) {
//Unable to get shortcuts action com.sindresorhus.Actions.SetUniformTypeIdentifier
/*
Please install the Actions app

https://apps.apple.com/app/id1586435171
*/
		} >> RepeatResult
	} >> IFResult 14
	setClipboard(variable: If Result) >> setClipboard
	count(input: Dictionary Value) >> count 1
	alert(alert: "


üìã  ${Count} actions copied to clipboard  üìã

‚Äã
", tincel: false)
	exit()
} >> IFResult 15
if(command .beginsWith "üîç") { >> IFResult 16
	repeat(2) { >> RepeatResult 1
		replaceText(input: "${file.get(Name)}", find: "&", replace: "&amp;") >> replaceText 6
		replaceText(input: "${Updated Text}", find: "<", replace: "&lt;") >> shortcutname
		dictionary({})
		setValue(key: "name", value: "${shortcutname}", dictionary: Dictionary) >> setValue 1
		replaceText(input: "${Dictionary}", find: "\u0023", replace: "\\u0023", isRegex: true) >> replaceText 7
		getFileOfType(input: file, type: "public.json") >> getFileOfType 1
var src = File of Type
		if(src .contains "{"__type__":"data","__value__":"YnBsaXN0") { >> IFResult 17
			matchText(text: "${src}", regex: "([^"]+)":\{"__type__":"data","__value__":"(YnBsaXN0[^"]+)") >> matchText 1
			repeatEach(Matches) {
				getMatchGroup(matches: Repeat Item 2) >> getMatchGroup
				getMatchGroup(matches: Repeat Item 2, index: "2") >> b64
				decode(input: b64) >> decode 1
				setName(input: Base64 Encoded, name: "a.plist") >> setName 4
				nothing()
				if(Text == "UserActivityData") {
					keysFrom(dictionary: Renamed Item) >> keysFrom 1
				} >> IFResult 18
				if(Text == "IntentData") {
					keysFrom(dictionary: Renamed Item) >> keysFrom 2
				} >> IFResult 19
				dictionary({"k":"${If Result}${ActionOutput}"})
				replaceText(input: "${Dictionary}", find: "^\{"k":|\}$", isRegex: true) >> replaceText 8
				replaceText(input: "${src}", find: "{"__type__":"data","__value__":"${b64}"}", replace: "${Updated Text}") >> replaceText 9
var src = Updated Text
				nothing()
			} >> RepeatResult 2
		} >> IFResult 20
		replaceText(input: "${src}", find: "\u0023", replace: "\\u0023", isRegex: true) >> src
		getShortcuts() >> getShortcuts
		setValue(key: "n", value: "${My Shortcuts}") >> setValue 2
		replaceText(input: "${Dictionary}", find: "\u0023", replace: "\\u0023", isRegex: true) >> sNames
var 095B022C-F7D0-40FE-A73B-2BE3765FEBBF = """const idDict = {
"is.workflow.actions.conditional":[{
	"name":"If ",
	"group":"gGray",
},{
	"name":"Otherwise",
	"group":"gGray",
},{
	"name":"End If",
	"group":"gGray",
}],
"is.workflow.actions.repeat.count":[{
	"name":"Repeat $\ufffc0 Times",
	"group":"gGray",
	"param":{
		"WFRepeatCount":"$\ufffc0",
		"$\ufffc0":"1",
}},{},{
	"name":"End Repeat Times",
	"group":"gGray",
}],
"is.workflow.actions.repeat.each":[{
	"name":"Repeat with Each in $\ufffc0",
	"group":"gGray",
},{},{
	"name":"End Repeat with Each",
	"group":"gGray",
}],
"is.workflow.actions.choosefrommenu":[{
	"name":"Choose from Menu",
	"group":"gGray",
},{
	"name":"Menu Item $\ufffc0",
	"group":"gGray",
	"param":{
		"WFMenuItemTitle":"$\ufffc0",
}},{
	"name":"End Menu",
	"group":"gGray",
}],
"is.workflow.actions.runworkflow":[{
	"name":"Run Shortcut $\ufffc1",
	"param":{
		"WFWorkflowName":"$\ufffc1",
}}],
"is.workflow.actions.exit":[{
	"name":"Stop This Shortcut",
	"group":"gGray",
}],
"is.workflow.actions.output":[{
	"name":"Stop and Output $\ufffc0",
	"group":"gGray",
	"param":{
		"WFOutput":"$\ufffc0",
}}],
"is.workflow.actions.hide.app":[{
	"name":"Hide $\ufffc0",
	"param":{
		"WFHideAppMode":"$\ufffc0",
		"$\ufffc0":"App",
}}],
"is.workflow.actions.quit.app":[{
	"name":"Quit $\ufffc0",
	"param":{
		"WFQuitAppMode":"$\ufffc0",
		"$\ufffc0":"App",
}}],
"is.workflow.actions.waittoreturn":[{
	"name":"Wait to Return",
	"group":"gGray",
}],
"is.workflow.actions.nothing":[{
	"name":"Nothing",
	"group":"gGray",
}],
"is.workflow.actions.comment":[{
	"name":"Comment",
	"group":"gYellow",
	"param":{
		"WFCommentActionText":"\u0023",
}}],
"is.workflow.actions.detect.text":[{
	"name":"Get Text from $\ufffc0",
	"group":"gYellow",
}],
"is.workflow.actions.detect.number":[{
	"name":"Get Numbers from $\ufffc0",
}],
"is.workflow.actions.detect.images":[{
	"name":"Get Images from $\ufffc0",
	"group":"gBlue",
}],
"is.workflow.actions.detect.dictionary":[{
	"name":"Get Dictionary from $\ufffc0",
	"group":"gOrange",
}],
"is.workflow.actions.detect.link":[{
	"name":"Get URLs from $\ufffc0",
	"group":"gBlue",
}],
"is.workflow.actions.detect.date":[{
	"name":"Get Dates from $\ufffc0",
}],
"is.workflow.actions.detect.contacts":[{
	"name":"Get Contacts from $\ufffc0",
}],
"is.workflow.actions.getvariable":[{
	"name":"Get Variable $\ufffc0",
	"group":"gOrange",
	"param":{
		"WFVariable":"$\ufffc0",
}}],
"is.workflow.actions.setvariable":[{
	"name":"Set Variable $\ufffc1 to $\ufffc0",
	"group":"gOrange",
	"param":{
		"WFVariableName":"$\ufffc1",
}}],
"is.workflow.actions.appendvariable":[{
	"name":"Add $\ufffc0 to Variable $\ufffc1",
	"group":"gOrange",
	"param":{
		"WFVariableName":"$\ufffc1",
}}],
"is.workflow.actions.setitemname":[{
	"name":"Set Name of $\ufffc0 to $\ufffc1",
	"param":{
		"WFName":"$\ufffc1",
}}],
"is.workflow.actions.getitemname":[{
	"name":"Get Name of $\ufffc0",
}],
"is.workflow.actions.getitemtype":[{
	"name":"Get Type of $\ufffc0",
}],
"is.workflow.actions.ask":[{
	"name":"Ask for $\ufffc0 Input",
	"param":{
		"WFInputType":"$\ufffc0",
		"$\ufffc0":"Text",
}}],
"is.workflow.actions.selectphoto":[{
	"name":"Select Photos",
}],
"is.workflow.actions.alert":[{
	"name":"Show Alert $\ufffc0",
	"group":"gYellow",
	"param":{
		"WFAlertActionMessage":"$\ufffc0",
}}],
"is.workflow.actions.showresult":[{
	"name":"Show Result",
	"group":"gYellow",
	"param":{
		"Text":"\u0023",
}}],
"is.workflow.actions.notification":[{
	"name":"Show Notification $\ufffc0",
	"group":"gRed",
	"param":{
		"WFNotificationActionBody":"$\ufffc0",
}}],
"is.workflow.actions.previewdocument":[{
	"name":"Quick Look $\ufffc0",
	"group":"gYellow",
}],
"is.workflow.actions.speaktext":[{
	"name":"Speak Text",
	"group":"gRed",
}],
"is.workflow.actions.makespokenaudiofromtext":[{
	"name":"Make Spoken Audio from $\ufffc0",
	"group":"gRed",
}],
"com.apple.ShortcutsActions.TranscribeAudioAction":[{ // 17
	"name":"Transcribe Audio $\ufffc0 to Text",
	"group":"gRed",
	"param":{
		"audioFile":"$\ufffc0",
}}],
"is.workflow.actions.gettext":[{
	"name":"Text",
	"group":"gYellow",
	"param":{
		"WFTextActionText":"\u0023",
}}],
"is.workflow.actions.text.split":[{
	"name":"Split Text $\ufffc0 by $\ufffc1",
	"group":"gYellow",
	"param":{
		"text":"$\ufffc0",
		"WFTextSeparator":"$\ufffc1",
		"$\ufffc1":"New Lines",
}}],
"is.workflow.actions.text.combine":[{
	"name":"Combine Text $\ufffc0 with $\ufffc1",
	"group":"gYellow",
	"param":{
		"text":"$\ufffc0",
		"WFTextSeparator":"$\ufffc1",
		"$\ufffc1":"New Lines",
}}],
"is.workflow.actions.text.replace":[{
	"name":"Replace Text $\ufffc1 with $\ufffc2 in $\ufffc0",
	"group":"gYellow",
	"param":{
		"WFReplaceTextFind":"$\ufffc1",
		"WFReplaceTextReplace":"$\ufffc2",
}}],
"is.workflow.actions.text.match":[{
	"name":"Match Text $\ufffc0 in $\ufffc1",
	"group":"gYellow",
	"param":{
		"WFMatchTextPattern":"$\ufffc0",
		"text":"$\ufffc1",
		"$\ufffc1":"[0-9a-zA-Z]",
}}],
"is.workflow.actions.text.match.getgroup":[{
	"name":"Get Match $\ufffc0 $\ufffc1 in $\ufffc2",
	"group":"gYellow",
	"param":{
		"WFGetGroupType":"$\ufffc0",
		"WFGroupIndex":"$\ufffc1",
		"matches":"$\ufffc2",
		"$\ufffc0":"Group At Index",
		"$\ufffc1":"1",
}}],
"is.workflow.actions.base64encode":[{
	"name":"Base64 $\ufffc1 $\ufffc0",
	"param":{
		"WFEncodeMode":"$\ufffc1",
		"$\ufffc1":"Encode",
}}],
"is.workflow.actions.urlencode":[{
	"name":"URL $\ufffc1 $\ufffc0",
	"group":"gBlue",
	"param":{
		"WFEncodeMode":"$\ufffc1",
		"$\ufffc1":"Encode",
}}],
"is.workflow.actions.setclipboard":[{
	"name":"Copy $\ufffc0 to Clipboard",
	"group":"gBlue",
}],
"is.workflow.actions.getclipboard":[{
	"name":"Get Clipboard",
	"group":"gBlue",
}],
"is.workflow.actions.number":[{
	"name":"Number $\ufffc0",
	"param":{
		"WFNumberActionNumber":"$\ufffc0",
}}],
"is.workflow.actions.count":[{
	"name":"Count $\ufffc0 in $\ufffc1",
	"param":{
		"WFCountType":"$\ufffc0",
		"Input":"$\ufffc1",
		"$\ufffc0":"Items",
}}],
"is.workflow.actions.math":[{
	"name":"Calculate $\ufffc0 $\ufffc1 $\ufffc2",
	"param":{
		"WFMathOperation":"$\ufffc1",
		"WFMathOperand":"$\ufffc2",
		"$\ufffc1":"+",
}}],
"is.workflow.actions.statistics":[{
	"name":"Calculate the $\ufffc1 of $\ufffc0",
	"param":{
		"Input":"$\ufffc0",
		"WFStatisticsOperation":"$\ufffc1",
		"$\ufffc1":"Average",
}}],
"is.workflow.actions.calculateexpression":[{
	"name":"Calculate Expression $\ufffc0",
	"param":{
		"Input":"$\ufffc0",
}}],
"is.workflow.actions.dictionary":[{
	"name":"Dictionary",
	"group":"gOrange",
	"param":{
		"WFItems":"\u0023",
}}],
"is.workflow.actions.getvalueforkey":[{
	"name":"Get Dictionary $\ufffc1 in $\ufffc0",
	"group":"gOrange",
	"param":{
		"WFGetDictionaryValueType":"$\ufffc1",
}}],
"is.workflow.actions.setvalueforkey":[{
	"name":"Set Dictionary Value for $\ufffc0 to $\ufffc1 in $\ufffc2",
	"group":"gOrange",
	"param":{
		"WFDictionaryKey":"$\ufffc0",
		"WFDictionaryValue":"$\ufffc1",
		"WFDictionary":"$\ufffc2"
}}],
"is.workflow.actions.list":[{
	"name":"List",
	"group":"gOrange",
	"param":{
		"WFItems":"\u0023",
}}],
"is.workflow.actions.getitemfromlist":[{
	"name":"Get $\ufffc1 from List $\ufffc0",
	"group":"gOrange",
	"param":{
		"WFItemSpecifier":"$\ufffc1",
		"$\ufffc1":"First Item",
}}],
"is.workflow.actions.choosefromlist":[{
	"name":"Choose from List $\ufffc0",
	"group":"gOrange",
}],
"is.workflow.actions.getrichtextfrommarkdown":[{
	"name":"Make Rich Text from Markdown $\ufffc0",
	"group":"gBlue",
}],
"is.workflow.actions.getrichtextfromhtml":[{
	"name":"Make Rich Text from HTML $\ufffc0",
	"group":"gBlue",
	"param":{
		"WFHTML":"$\ufffc0",
}}],
"is.workflow.actions.getmarkdownfromrichtext":[{
	"name":"Make Markdown from Rich Text $\ufffc0",
	"group":"gBlue",
}],
"is.workflow.actions.gethtmlfromrichtext":[{
	"name":"Make HTML from Rich Text $\ufffc0",
	"group":"gBlue",
}],
"is.workflow.actions.documentpicker.save":[{
	"name":"Save File $\ufffc0",
	"group":"gBlue",
}],
"is.workflow.actions.documentpicker.open":[{
	"name":"Get File at Path $\ufffc0 from Folder",
	"group":"gBlue",
	"param":{
		"WFGetFilePath":"$\ufffc0",
}}],
"is.workflow.actions.file.delete":[{
	"name":"Delete Files $\ufffc0",
	"group":"gBlue",
}],
"com.apple.DocumentsApp.ScanDocument":[{ 	// 17
	"name":"Scan Document",
	"group":"gBlue",
}],
"com.apple.DocumentsApp.SearchFile":[{ 	// 17
	"name":"Search $\ufffc0 in Files",
	"param":{
		"searchPhrase":"$\ufffc0",
}}],
"com.apple.Spotlight.SearchSpotlightIntent":[{ 	// 18.1
	"name":"Search $\ufffc0 in Spotlight",
	"param":{
		"criteria":"$\ufffc0",
}}],
"com.apple.DocumentManagerUICore.RecentsAvocadoIntentHandler.DOCOpenLocationIntent":[{ 	// 18.1
	"name":"Open Location in Files",
	"group":"gBlue",
}],
"is.workflow.actions.savetocameraroll":[{
	"name":"Save Photos $\ufffc0 to $\ufffc1",
	"param":{
		"WFCameraRollSelectedGroup":"$\ufffc1",
		"$\ufffc1":"Recents",
}}],
"is.workflow.actions.deletephotos":[{
	"name":"Delete Photos $\ufffc0",
	"param":{
		"photos":"$\ufffc0",
}}],
"is.workflow.actions.photos.createalbum":[{
	"name":"Create Photo Album $\ufffc1 with $\ufffc0",
	"param":{
		"AlbumName":"$\ufffc1",
}}],
"is.workflow.actions.removefromalbum":[{
	"name":"Remove $\ufffc0 from Photo Album $\ufffc1",
	"param":{
		"WFRemoveAlbumSelectedGroup":"$\ufffc1",
}}],
"com.apple.mobileslideshow.StreamShareService":[{
	"name":"Post $\ufffc0 to Shared Album",
	"param":{
		"ImageInput":"$\ufffc0",
}}],
"is.workflow.actions.url":[{
	"name":"URL $\ufffc0",
	"group":"gBlue",
	"param":{
		"WFURLActionURL":"$\ufffc0",
}}],
"is.workflow.actions.openurl":[{
	"name":"Open URL $\ufffc0",
	"group":"gBlue",
}],
"is.workflow.actions.showwebpage":[{
	"name":"Show Web View at $\ufffc0",
	"param":{
		"WFURL":"$\ufffc0",
}}],
"is.workflow.actions.downloadurl":[{
	"name":"Get Contents of URL $\ufffc0",
	"group":"gGreen",
	"param":{
		"WFURL":"$\ufffc0",
}}],
"is.workflow.actions.getwebpagecontents":[{
	"name":"Get Contents of Web Page at $\ufffc0",
}],
"is.workflow.actions.safari.geturl":[{
	"name":"Get Current Web Page from Safari",
}],
"is.workflow.actions.runjavascriptonwebpage":[{
	"name":"Run JavaScript on $\ufffc0",
	"param":{
		"WFJavaScript":"\u0023",
}}],
"is.workflow.actions.runapplescript":[{
	"name":"Run AppleScript with $\ufffc0",
	"param":{
		"Input":"$\ufffc0",
		"Script":"\u0023",
}}],
"is.workflow.actions.runjavascriptforautomation":[{
	"name":"Run JXA with $\ufffc0",
	"param":{
		"Input":"$\ufffc0",
		"Script":"\u0023",
}}],
"is.workflow.actions.runshellscript":[{
	"name":"Run Shell Script",
}],
"is.workflow.actions.date":[{
	"name":"Date $\ufffc0",
	"group":"gRed",
	"param":{
		"WFDateActionMode":"$\ufffc0",
		"$\ufffc0":"Current Date",
}}],
"is.workflow.actions.format.date":[{
	"name":"Format Date $\ufffc0",
	"group":"gRed",
	"param":{
		"WFDate":"$\ufffc0",
}}],
"is.workflow.actions.adjustdate":[{
	"name":"Adjust $\ufffc0 Date $\ufffc1",
	"group":"gRed",
	"param":{
		"WFDate":"$\ufffc1",
		"WFAdjustOperation":"$\ufffc0",
		"$\ufffc0":"Add",
}}],
"is.workflow.actions.gettimebetweendates":[{
	"name":"Get Time Between $\ufffc1 and $\ufffc0 in $\ufffc2",
	"group":"gRed",
	"param":{
		"WFTimeUntilFromDate":"$\ufffc1",
		"WFTimeUntilUnit":"$\ufffc2",
		"$\ufffc2":"Minutes",
}}],
"is.workflow.actions.converttimezone":[{
	"name":"Convert Time Zone of $\ufffc0",
	"group":"gRed",
	"param":{
		"Date":"$\ufffc0",
}}],
"is.workflow.actions.addnewevent":[{
	"name":"Add New Event $\ufffc0 from $\ufffc1 to $\ufffc2",
	"param":{
		"WFCalendarItemTitle":"$\ufffc0",
		"WFCalendarItemStartDate":"$\ufffc1",
		"WFCalendarItemEndDate":"$\ufffc2",
}}],
"is.workflow.actions.removeevents":[{
	"name":"Remove Events $\ufffc0",
	"param":{
		"WFInputEvents":"$\ufffc0",
}}],
"is.workflow.actions.getupcomingevents":[{
	"name":"Get Upcoming $\ufffc0 Events from $\ufffc1",
	"param":{
		"WFGetUpcomingItemCount":"$\ufffc0",
		"WFGetUpcomingItemCalendar":"$\ufffc1",
		"$\ufffc0":"1",
		"$\ufffc1":"All Calendars",
}}],
"is.workflow.actions.addnewcalendar":[{
	"name":"Add New Calendar $\ufffc0",
	"param":{
		"CalendarName":"$\ufffc0",
}}],
"is.workflow.actions.addnewcontact":[{
	"name":"Add New Contact $\ufffc0 $\ufffc1",
	"param":{
		"WFContactFirstName":"$\ufffc0",
		"WFContactLastName":"$\ufffc1",
}}],
"is.workflow.actions.contacts":[{
	"name":"Contacts",
}],
"is.workflow.actions.selectcontacts":[{
	"name":"Select Contact",
}],
"is.workflow.actions.setters.calendarevents":[{
	"name":"$\ufffc1 $\ufffc2 of Calendar Event $\ufffc0",
	"param":{
		"Mode":"$\ufffc1",
		"$\ufffc1":"Set",
		"WFContentItemPropertyName":"$\ufffc2",
}}],
"is.workflow.actions.setters.contacts":[{
	"name":"$\ufffc1 $\ufffc2 of Contact $\ufffc0",
	"param":{
		"Mode":"$\ufffc1",
		"$\ufffc1":"Set",
		"WFContentItemPropertyName":"$\ufffc2",
}}],
"is.workflow.actions.setters.reminders":[{
	"name":"$\ufffc1 $\ufffc2 of Reminder $\ufffc0",
	"param":{
		"Mode":"$\ufffc1",
		"$\ufffc1":"Set",
		"WFContentItemPropertyName":"$\ufffc2",
}}],
"com.apple.mobiletimer-framework.MobileTimerIntents.MTToggleAlarmIntent":[{
	"name":"$\ufffc0 Alarm $\ufffc9",
	"param":{
		"operation":"$\ufffc0",
		"$\ufffc0":"Turn",
		"state":"$\ufffc9",
}}],
"com.apple.mobiletimer-framework.MobileTimerIntents.MTCreateAlarmIntent":[{ // 17
	"name":"Add Alarm for $\ufffc0 called $\ufffc1",
	"param":{
		"dateComponents":"$\ufffc0",
		"name":"$\ufffc1",
		"$\ufffc1":"Alarm",
}}],
"com.apple.mobiletimer.DeleteAlarmIntent":[{ // 17
	"name":"Delete Alarms",
}],
"com.apple.clock.DeleteAlarmIntent":[{ // 17
	"name":"Delete Alarms",
}],
"com.apple.mobiletimer.EditSleepAlarmIntent":[{ // 17
	"name":"$\ufffc0 Next Sleep Alarm",
	"param":{
		"operation":"$\ufffc0",
		"$\ufffc0":"Skip",
}}],
"com.apple.mobiletimer-framework.MobileTimerIntents.MTGetAlarmsIntent":[{ 	// 17
	"name":"Find Alarm $\ufffc0",
	"param":{
		"WFContentItemInputParameter":"$\ufffc0",
		"$\ufffc0":"All Alarm",
}}],
"com.apple.mobiletimer.LapStopwatchIntent":[{ // 17
	"name":"Lap Stopwatch",
}],
"com.apple.clock.LapStopwatchIntent":[{ // 17
	"name":"Lap Stopwatch",
}],
"com.apple.mobiletimer.ResetStopwatchIntent":[{ // 17
	"name":"Reset Stopwatch",
}],
"com.apple.clock.ResetStopwatchIntent":[{ // 17
	"name":"Reset Stopwatch",
}],
"com.apple.mobiletimer.StartStopwatchIntent":[{ // 17
	"name":"Start Stopwatch",
}],
"com.apple.clock.StartStopwatchIntent":[{ // 17
	"name":"Start Stopwatch",
}],
"com.apple.mobiletimer.StopStopwatchIntent":[{ // 17
	"name":"Stop Stopwatch",
}],
"com.apple.clock.StopStopwatchIntent":[{ // 17
	"name":"Stop Stopwatch",
}],
"com.apple.mobiletimer.OpenTab":[{ // 16
	"name":"Open Clock Tab $\ufffc0",
	"param":{
		"tab":"$\ufffc0",
}}],
"com.apple.clock.OpenTab":[{ // 16
	"name":"Open Clock Tab $\ufffc0",
	"param":{
		"tab":"$\ufffc0",
}}],
"is.workflow.actions.appendnote":[{
	"name":"Append $\ufffc0 to Note $\ufffc1",
	"group":"gYellow",
	"param":{
		"WFNote":"$\ufffc1",
}}],
"is.workflow.actions.shownote":[{
	"name":"Show Note $\ufffc0",
	"group":"gYellow",
}],
"com.apple.mobilenotes.SharingExtension":[{
	"name":"Create Note with $\ufffc0",
	"group":"gYellow",
	"param":{
		"WFCreateNoteInput":"$\ufffc0",
}}],
"com.apple.mobilenotes.DeleteNotesLinkAction":[{ // 16
	"name":"Delete Notes",
	"group":"gYellow",
}],
"com.apple.Notes.DeleteNotesLinkAction":[{ // 16
	"name":"Delete Notes",
	"group":"gYellow",
}],
"com.apple.mobilenotes.PinNotesLinkAction":[{ // 16
	"name":"$\ufffc0 to/from Pinned Notes",
	"group":"gYellow",
	"param":{
		"operation":"$\ufffc0",
		"$\ufffc0":"Add",
}}],
"com.apple.Notes.PinNotesLinkAction":[{ // 16
	"name":"$\ufffc0 to/from Pinned Notes",
	"group":"gYellow",
	"param":{
		"operation":"$\ufffc0",
		"$\ufffc0":"Add",
}}],
"com.apple.mobilenotes.OpenAccountLinkAction":[{ // 16
	"name":"Open Notes Account",
	"group":"gYellow",
}],
"com.apple.Notes.OpenAccountLinkAction":[{ // 16
	"name":"Open Notes Account",
	"group":"gYellow",
}],
"com.apple.mobilenotes.ChangeSettingLinkAction":[{ // 16
	"name":"$\ufffc0 Notes Setting $\ufffc1",
	"group":"gYellow",
	"param":{
		"changeOperation":"$\ufffc0",
		"$\ufffc0":"Enable",
		"setting":"$\ufffc1",
}}],
"com.apple.Notes.ChangeSettingLinkAction":[{ // 16
	"name":"$\ufffc0 Notes Setting $\ufffc1",
	"group":"gYellow",
	"param":{
		"changeOperation":"$\ufffc0",
		"$\ufffc0":"Enable",
		"setting":"$\ufffc1",
}}],
"com.apple.mobilenotes.OpenAppLocationLinkAction":[{ // 16
	"name":"Open Notes View $\ufffc0",
	"group":"gYellow",
	"param":{
		"target":"$\ufffc0",
}}],
"com.apple.Notes.OpenAppLocationLinkAction":[{ // 16
	"name":"Open Notes View $\ufffc0",
	"group":"gYellow",
	"param":{
		"target":"$\ufffc0",
}}],
"com.apple.Notes.CloseNoteLinkAction":[{ // 16
	"name":"Close Note $\ufffc0",
	"group":"gYellow",
	"param":{
		"target":"$\ufffc0",
}}],
"com.apple.Notes.CloseAppLocationLinkAction":[{ // 16
	"name":"Close Notes View $\ufffc0",
	"group":"gYellow",
	"param":{
		"target":"$\ufffc0",
}}],
"com.apple.mobilenotes.CreateFolderLinkAction":[{ // 16
	"name":"Create Notes Folder $\ufffc0",
	"group":"gYellow",
	"param":{
		"name":"$\ufffc0",
}}],
"com.apple.Notes.CreateFolderLinkAction":[{ // 16
	"name":"Create Notes Folder $\ufffc0",
	"group":"gYellow",
	"param":{
		"name":"$\ufffc0",
}}],
"com.apple.mobilenotes.DeleteFoldersLinkAction":[{ // 16
	"name":"Delete Notes Folders",
	"group":"gYellow",
}],
"com.apple.Notes.DeleteFoldersLinkAction":[{ // 16
	"name":"Delete Notes Folders",
	"group":"gYellow",
}],
"com.apple.mobilenotes.MoveNotesToFolderLinkAction":[{ // 16
	"name":"Move Notes to Folder",
	"group":"gYellow",
}],
"com.apple.Notes.MoveNotesToFolderLinkAction":[{ // 16
	"name":"Move Notes to Folder",
	"group":"gYellow",
}],
"com.apple.mobilenotes.ICNotesFolderIntent":[{ // 16
	"name":"Show Notes Folder",
	"group":"gYellow",
}],
"com.apple.Notes.ICNotesFolderIntent":[{ // 16
	"name":"Show Notes Folder",
	"group":"gYellow",
}],
"com.apple.mobilenotes.AddTagsToNotesLinkAction":[{ // 16
	"name":"Add Tags to Notes",
	"group":"gYellow",
}],
"com.apple.Notes.AddTagsToNotesLinkAction":[{ // 16
	"name":"Add Tags to Notes",
	"group":"gYellow",
}],
"com.apple.mobilenotes.CreateTagLinkAction":[{ // 16
	"name":"Create Notes Tag $\ufffc0",
	"group":"gYellow",
	"param":{
		"name":"$\ufffc0",
}}],
"com.apple.Notes.CreateTagLinkAction":[{ // 16
	"name":"Create Notes Tag $\ufffc0",
	"group":"gYellow",
	"param":{
		"name":"$\ufffc0",
}}],
"com.apple.mobilenotes.DeleteTagsLinkAction":[{ // 16
	"name":"Delete Notes Tags",
	"group":"gYellow",
}],
"com.apple.Notes.DeleteTagsLinkAction":[{ // 16
	"name":"Delete Notes Tags",
	"group":"gYellow",
}],
"com.apple.mobilenotes.OpenTagLinkAction":[{ // 16
	"name":"Open Notes Tag",
	"group":"gYellow",
}],
"com.apple.Notes.OpenTagLinkAction":[{ // 16
	"name":"Open Notes Tag",
	"group":"gYellow",
}],
"com.apple.mobilenotes.RemoveTagsFromNotesLinkAction":[{ // 16
	"name":"Remove Tags from Notes",
	"group":"gYellow",
}],
"com.apple.Notes.RemoveTagsFromNotesLinkAction":[{ // 16
	"name":"Remove Tags from Notes",
	"group":"gYellow",
}],
"com.apple.freeform.CRLiOSCreateBoardIntent":[{ // 17
	"name":"Create New Freeform Board",
}],
"com.apple.freeform.CRLiOSOpenBoardIntent":[{ // 17
	"name":"Open Freeform Board $\ufffc8",
	"param":{
		"$\ufffc8":"board.title.key",
		"board":"$\ufffc9",
}}],
"com.apple.freeform.CRLCreateBoardIntent":[{ // 18
	"name":"Create Freeform Board $\ufffc0",
	"param":{
		"title":"$\ufffc0",
}}],
"com.apple.freeform.CRLOpenBoardIntent":[{ // 18
	"name":"Open Freeform Board $\ufffc8",
	"param":{
		"$\ufffc8":"target.title.key",
		"target":"$\ufffc9",
}}],
"com.apple.journal.CreateEntryIntent":[{ // 18
	"name":"Create Journal Entry $\ufffc0 with $\ufffc1",
	"param":{
		"message":"$\ufffc0",
		"title":"$\ufffc1",
}}],
"com.apple.journal.CreateEntryAudioIntent":[{ // 18
	"name":"Create Journal Entry",
}],
"com.apple.journal.SearchEntriesIntent":[{ // 18
	"name":"Search $\ufffc0 in Journal",
	"param":{
		"criteria":"$\ufffc0",
}}],
"com.apple.Passbook.OpenPassIntent":[{ // 18
	"name":"Open Card $\ufffc8 in Wallet",
	"param":{
		"$\ufffc8":"target.title.key",
		"target":"$\ufffc9",
}}],
"is.workflow.actions.showincalendar":[{
	"name":"Open $\ufffc0 in Calendar",
	"param":{
		"WFEvent":"$\ufffc0",
}}],
"is.workflow.actions.addnewreminder":[{
	"name":"Add New Reminder $\ufffc0 to $\ufffc1 with $\ufffc2",
	"param":{
		"WFCalendarItemTitle":"$\ufffc0",
		"WFCalendarItemCalendar":"$\ufffc1",
		"WFAlertEnabled":"$\ufffc2",
		"$\ufffc1":"Reminders",
		"$\ufffc2":"No Alert",
}}],
"is.workflow.actions.removereminders":[{
	"name":"Remove Reminders $\ufffc0",
	"param":{
		"WFInputReminders":"$\ufffc0",
}}],
"is.workflow.actions.getupcomingreminders":[{
	"name":"Get Upcoming $\ufffc0 Reminders from $\ufffc1",
	"param":{
		"WFGetUpcomingItemCount":"$\ufffc0",
		"WFGetUpcomingItemCalendar":"$\ufffc1",
		"$\ufffc0":"1",
		"$\ufffc1":"All Lists",
}}],
"com.apple.reminders.TTRCreateListAppIntent":[{ // 16
	"name":"Create Reminders List $\ufffc0",
	"param":{
		"name":"$\ufffc0",
}}],
"com.apple.reminders.TTRSearchRemindersAppIntent":[{ // 16
	"name":"Search $\ufffc0 in Reminders",
	"param":{
		"searchPhrase":"$\ufffc0",
}}],
"com.apple.reminders.TTROpenSmartListAppIntent":[{ // 16.1
	"name":"Open Smart Reminder List $\ufffc0",
	"param":{
		"target":"$\ufffc0",
}}],
"com.apple.VoiceMemos.SearchRecordings":[{ // 16
	"name":"Search $\ufffc0 in Voice Memos",
	"param":{
		"searchPhrase":"$\ufffc0",
}}],
"com.apple.VoiceMemos.CreateFolder":[{ // 16
	"name":"Create Voice Memos Folder $\ufffc0",
	"param":{
		"name":"$\ufffc0",
}}],
"com.apple.VoiceMemos.DeleteFolder":[{ // 16
	"name":"Delete Voice Memos Folders",
}],
"com.apple.VoiceMemos.OpenFolder":[{ // 16
	"name":"Open Voice Memos Folder",
}],
"com.apple.VoiceMemos.CreateRecording":[{ // 16
	"name":"Create Voice Recording $\ufffc0",
	"param":{
		"name":"$\ufffc0",
}}],
"com.apple.VoiceMemos.CreateRecording":[{ // 16
	"name":"Create Voice Recording $\ufffc0",
	"param":{
		"name":"$\ufffc0",
}}],
"com.apple.VoiceMemos.RecordVoiceMemoIntent":[{ // 16
	"name":"Create Voice Recording $\ufffc0",
	"param":{
		"name":"$\ufffc0",
}}],
"com.apple.VoiceMemos.PlayRecording":[{ // 16
	"name":"Play Voice Recording",
}],
"com.apple.VoiceMemos.SelectRecording":[{ // 16
	"name":"Open Voice Recording",
}],
"com.apple.VoiceMemos.StopRecording":[{ // 17
	"name":"Stop Voice Recording",
}],
"com.apple.VoiceMemos.ChangeRecordingPlaybackSetting":[{ // 16
	"name":"$\ufffc0 Voice Memo Playback Setting $\ufffc1",
	"param":{
		"changeOperation":"$\ufffc0",
		"setting":"$\ufffc1",
		"$\ufffc0":"Enable",
}}],
"com.apple.mobilemail.OpenMailboxEntityAction":[{ // 16
	"name":"Open Mailbox",
}],
"com.apple.mobilemail.SearchMessagesAction":[{ // 16
	"name":"Search $\ufffc0 in Mail",
	"param":{
		"searchPhrase":"$\ufffc0",
}}],
"com.apple.SafetyMonitorApp.SafetyMonitorIntent":[{ 	// 18.1
	"name":"Send a Check In",
}],
"com.apple.mail.mailMessageEntity":[{ // 16
	"name":"Search $\ufffc0 in Mail",
	"param":{
		"searchPhrase":"$\ufffc0",
}}],
"is.workflow.actions.takephoto":[{
	"name":"Take $\ufffc0 Photos with $\ufffc1 Camera",
	"param":{
		"WFPhotoCount":"$\ufffc0",
		"WFCameraCaptureDevice":"$\ufffc1",
		"$\ufffc0":"1",
		"$\ufffc1":"Back",
}}],
"is.workflow.actions.takevideo":[{
	"name":"Take Video with $\ufffc0 Camera",
	"param":{
		"WFCameraCaptureDevice":"$\ufffc0",
		"$\ufffc0":"Back",
}}],
"com.apple.ShortcutsActions.OpenCameraAction":[{ 	// 17
	"name":"Open $\ufffc8 in Camera",
	"param":{
		"$\ufffc8":"cameraMode.title.key",
		"cameraMode":"$\ufffc9",
}}],
"is.workflow.actions.posters.get":[{ // 16.2
	"name":"Get $\ufffc0 Wallpaper",
	"param":{
		"WFPosterType":"$\ufffc0",
		"$\ufffc0":"All",
}}],
"is.workflow.actions.posters.switch":[{ // 16.2
	"name":"Switch Wallpaper to $\ufffc8",
	"param":{
		"$\ufffc8":"WFPoster.name",
		"WFPoster":"$\ufffc9",
}}],
"is.workflow.actions.wallpaper.set":[{
	"name":"Set $\ufffc1 Wallpaper Photo to $\ufffc0",
	"param":{
		"WFWallpaperLocation":"$\ufffc1",
		"$\ufffc1":"Lock Screen, Home Screen",
}}],
"is.workflow.actions.getonscreencontent":[{
	"name":"Get What‚Äôs On Screen",
	"group":"gRed",
}],
"is.workflow.actions.timer.start":[{
	"name":"Start Timer for $\ufffc0",
	"param":{
		"WFDuration":"$\ufffc0",
}}],
"com.apple.mobiletimer.CancelTimerIntent":[{ 	// 17
	"name":"Cancel Current Timer",
}],
"com.apple.mobiletimer.PauseTimerIntent":[{ 	// 17
	"name":"Pause Current Timer",
}],
"com.apple.mobiletimer.ResumeTimerIntent":[{ 	// 17
	"name":"Resume Current Timer",
}],
"com.apple.mobiletimer.GetCurrentTimerDetailsIntent":[{ 	// 17
	"name":"Get $\ufffc0 of Current Timer",
	"param":{
		"mode":"$\ufffc0",
		"$\ufffc0":"Remaining Time",
}}],
"is.workflow.actions.detect.phonenumber":[{
	"name":"Get Phone Numbers from $\ufffc0",
	"group":"gGreen",
}],
"is.workflow.actions.phonenumber":[{
	"name":"Phone Number",
	"group":"gGreen",
}],
"is.workflow.actions.selectphone":[{
	"name":"Select Phone Number",
	"group":"gGreen",
}],
"com.apple.facetime.facetime":[{
	"name":"$\ufffc0 Call $\ufffc1",
	"group":"gGreen",
	"param":{
		"WFFaceTimeType":"$\ufffc0",
		"WFFaceTimeContact":"$\ufffc1",
		"$\ufffc0":"FaceTime",
}}],
"com.apple.mobilephone.call":[{
	"name":"Call $\ufffc0",
	"group":"gGreen",
	"param":{
		"WFCallContact":"$\ufffc0",
}}],
"is.workflow.actions.sendmessage":[{
	"name":"Send Message $\ufffc0",
	"group":"gGreen",
	"param":{
		"WFSendMessageContent":"$\ufffc0",
}}],
"com.apple.MobileSMS.OpenConversationIntent":[{ 	// 18.4
	"name":"Open Messages Conversation",
	"group":"gGreen",
}],
"is.workflow.actions.sendemail":[{
	"name":"Send Email $\ufffc0 as $\ufffc1",
	"param":{
		"WFSendEmailActionInputAttachments":"$\ufffc0",
		"WFSendEmailActionSubject":"$\ufffc1",
}}],
"is.workflow.actions.email":[{
	"name":"Email Address",
}],
"is.workflow.actions.detect.emailaddress":[{
	"name":"Get Email Addresses from $\ufffc0",
}],
"is.workflow.actions.selectemail":[{
	"name":"Select Email Address",
}],
"is.workflow.actions.detect.address":[{
	"name":"Get Addresses from $\ufffc0",
	"group":"gGreen",
}],
"is.workflow.actions.getdistance":[{
	"name":"Get Distance",
	"group":"gGreen",
}],
"is.workflow.actions.gethalfwaypoint":[{
	"name":"Get Halfway Point",
	"group":"gGreen",
}],
"is.workflow.actions.getmapslink":[{
	"name":"Get Maps URL from $\ufffc0",
	"group":"gGreen",
}],
"is.workflow.actions.gettraveltime":[{
	"name":"Get $\ufffc0 Time",
	"group":"gGreen",
	"param":{
		"WFGetDirectionsActionMode":"$\ufffc0",
		"$\ufffc0":"Driving",
}}],
"is.workflow.actions.searchlocalbusinesses":[{
	"name":"Find Places",
	"group":"gGreen",
}],
"is.workflow.actions.getdirections":[{
	"name":"Open $\ufffc0 Directions using $\ufffc1",
	"group":"gGreen",
	"param":{
		"WFGetDirectionsActionMode":"$\ufffc0",
		"WFGetDirectionsActionApp":"$\ufffc1",
		"$\ufffc0":"Driving",
		"$\ufffc1":"Maps",
}}],
"is.workflow.actions.searchmaps":[{
	"name":"Open in Maps",
	"group":"gGreen",
}],
"is.workflow.actions.ride.requestride":[{
	"name":"Request Ride",
	"group":"gGreen",
}],
"is.workflow.actions.address":[{
	"name":"Street Address",
	"group":"gGreen",
}],
"is.workflow.actions.addtoplaylist":[{
	"name":"Add Music $\ufffc0 to Playlist $\ufffc1",
	"group":"gRed",
	"param":{
		"WFPlaylistName":"$\ufffc1",
		"$\ufffc1":"My Music Library",
}}],
"is.workflow.actions.addmusictoupnext":[{
	"name":"Add Music $\ufffc0 to $\ufffc1 of Playing Next",
	"group":"gRed",
	"param":{
		"WFMusic":"$\ufffc0",
		"WFWhenToPlay":"$\ufffc1",
		"$\ufffc1":"Next",
}}],
"is.workflow.actions.clearupnext":[{
	"name":"Clear Playing Next",
	"group":"gRed",
}],
"is.workflow.actions.createplaylist":[{
	"name":"Create Playlist $\ufffc0 with $\ufffc1",
	"group":"gRed",
	"param":{
		"WFPlaylistName":"$\ufffc0",
		"WFPlaylistItems":"$\ufffc1",
}}],
"is.workflow.actions.getcurrentsong":[{
	"name":"Get $\ufffc0",
	"group":"gRed",
	"param":{
		"Subject":"$\ufffc0",
		"$\ufffc0":"Current Song",
}}],
"is.workflow.actions.get.playlist":[{
	"name":"Get Songs in Playlist $\ufffc0",
	"group":"gRed",
	"param":{
		"WFPlaylistName":"$\ufffc0",
}}],
"is.workflow.actions.playmusic":[{
	"name":"Play Music $\ufffc0",
	"group":"gRed",
	"param":{
		"WFMediaItems":"$\ufffc0",
}}],
"is.workflow.actions.seek":[{
	"name":"Seek $\ufffc0 $\ufffc1",
	"group":"gRed",
	"param":{
		"WFSeekBehavior":"$\ufffc0",
		"WFTimeInterval":"$\ufffc1",
		"$\ufffc0":"To Time",
}}],
"is.workflow.actions.exportsong":[{
	"name":"Select Music",
	"group":"gRed",
}],
"is.workflow.actions.importaudiofiles":[{
	"name":"Import Audio $\ufffc0 into Music",
}],
"com.apple.musicrecognition.RecognizeMusicIntent":[{ 	// 17
	"name":"Recognize Music",
	"group":"gBlue",
}],
"is.workflow.actions.getlatestphotoimport":[{
	"name":"Get Last Import",
}],
"is.workflow.actions.getlatestbursts":[{
	"name":"Get Latest $\ufffc0 Bursts",
	"param":{
		"WFGetLatestPhotoCount":"$\ufffc0",
		"$\ufffc0":"1",
}}],
"is.workflow.actions.getlatestlivephotos":[{
	"name":"Get Latest $\ufffc0 Live Photos",
	"param":{
		"WFGetLatestPhotoCount":"$\ufffc0",
		"$\ufffc0":"1",
}}],
"is.workflow.actions.getlastphoto":[{
	"name":"Get Latest $\ufffc0 Photos",
	"param":{
		"WFGetLatestPhotoCount":"$\ufffc0",
		"$\ufffc0":"1",
}}],
"is.workflow.actions.getlastscreenshot":[{
	"name":"Get Latest $\ufffc0 Screenshots",
	"param":{
		"WFGetLatestPhotoCount":"$\ufffc0",
		"$\ufffc0":"1",
}}],
"is.workflow.actions.getlastvideo":[{
	"name":"Get Latest $\ufffc0 Videos",
	"param":{
		"WFGetLatestPhotoCount":"$\ufffc0",
		"$\ufffc0":"1",
}}],
"com.apple.mobileslideshow.OpenCollectionIntent":[{ 	// 17
	"name":"Open Photo Collection $\ufffc8",
	"param":{
		"$\ufffc8":"target.title.key",
		"target":"$\ufffc9",
}}],
"is.workflow.actions.getepisodesforpodcast":[{
	"name":"Get Episodes of Podcast $\ufffc0",
}],
"is.workflow.actions.getpodcastsfromlibrary":[{
	"name":"Get Podcasts from Library",
}],
"is.workflow.actions.playpodcast":[{
	"name":"Play Podcast $\ufffc0",
	"param":{
		"WFPodcastShow":"$\ufffc0",
}}],
"is.workflow.actions.searchpodcasts":[{
	"name":"Find Podcasts",
}],
"is.workflow.actions.podcasts.subscribe":[{
	"name":"Follow Podcast $\ufffc0",
}],
"is.workflow.actions.reminders.showlist":[{
	"name":"Open Reminders List $\ufffc0",
	"param":{
		"WFList":"$\ufffc0",
		"$\ufffc0":"Reminders",
}}],
"is.workflow.actions.readinglist":[{
	"name":"Add $\ufffc0 to Reading List",
	"param":{
		"WFURL":"$\ufffc0",
}}],
"is.workflow.actions.getarticle":[{
	"name":"Get Article from $\ufffc0 using Safari Reader",
	"param":{
		"WFWebPage":"$\ufffc0",
}}],
"is.workflow.actions.searchweb":[{
	"name":"Search Web $\ufffc1 for $\ufffc0",
	"param":{
		"WFSearchWebDestination":"$\ufffc1",
		"$\ufffc1":"Google",
		"WFInputText":"$\ufffc0",
}}],
"com.apple.mobilesafari.OpenBookmark":[{ // 16
	"name":"Open Safari Bookmark",
}],
"com.apple.mobilesafari.OpenReadingListItem":[{ // 16
	"name":"Open Reading List Item",
}],
"com.apple.mobilesafari.OpenView":[{ // 16
	"name":"Open Safari View",
}],
"com.apple.mobilesafari.ChangeReaderModeState":[{ // 16
	"name":"$\ufffc0 Safari Reader",
	"param":{
		"changeOperation":"$\ufffc0",
		"$\ufffc0":"Enable",
}}],
"com.apple.mobilesafari.CreateNewTabGroup":[{ // 16
	"name":"Create Tab Group $\ufffc0",
	"param":{
		"name":"$\ufffc0",
}}],
"com.apple.mobilesafari.OpenTabGroup":[{ // 16
	"name":"Open Tab Group",
}],
"com.apple.Safari.OpenTabGroup":[{ // 16
	"name":"Open Tab Group",
}],
"com.apple.mobilesafari.CloseTab":[{ // 16
	"name":"Close Tab",
}],
"com.apple.mobilesafari.CreateNewPrivateTab":[{ // 16
	"name":"Create New Private Tab",
}],
"com.apple.mobilesafari.CreateNewTab":[{ // 16
	"name":"Create New Tab",
}],
"com.apple.mobilesafari.OpenTab":[{ // 16
	"name":"Open Tab",
}],
"com.apple.iBooks.openin":[{ // 16.2
	"name":"Open PDF $\ufffc0 in Books",
	"group":"gOrange",
	"param":{
		"BooksInput":"$\ufffc0",
}}],
"com.apple.iBooks.BookReaderChangeThemeIntent":[{ // 16.2
	"name":"$\ufffc0 Book Appearance $\ufffc1",
	"group":"gOrange",
	"param":{
		"changeOperation":"$\ufffc0",
		"$\ufffc0":"Enable",
		"setting":"$\ufffc1",
}}],
"com.apple.iBooks.BookReaderChangePageNavigationIntent":[{ // 16.2
	"name":"$\ufffc0 Book Page Navigation $\ufffc1",
	"group":"gOrange",
	"param":{
		"changeOperation":"$\ufffc0",
		"$\ufffc0":"Enable",
		"setting":"$\ufffc1",
}}],
"com.apple.iBooks.OpenTabBarItemIntent":[{ // 16.2
	"name":"Change View in Books",
	"group":"gOrange",
}],
"com.apple.iBooks.OpenBookIntent":[{ // 16.2
	"name":"Open Book",
	"group":"gOrange",
}],
"com.apple.iBooks.OpenDefaultCollectionIntent":[{ // 16.2
	"name":"Open Book Collection $\ufffc8",
	"group":"gOrange",
	"param":{
		"$\ufffc8":"target.title.key",
		"target":"$\ufffc9",
}}],
"com.apple.iBooks.OpenRecentBookIntent":[{ // 16.2
	"name":"Open Current Book",
	"group":"gOrange",
}],
"com.apple.iBooks.PlayAudiobookIntent":[{ // 16.2
	"name":"Play Audiobook",
	"group":"gOrange",
}],
"com.apple.iBooks.PlayRecentAudiobookIntent":[{ // 16.2
	"name":"Play Current Audiobook",
	"group":"gOrange",
}],
"com.apple.iBooks.SearchBooksIntent":[{ // 16.2
	"name":"Search $\ufffc0 in Books",
	"group":"gOrange",
	"param":{
		"searchPhrase":"$\ufffc0",
}}],
"com.apple.iBooks.BookReaderNavigatePagesIntent":[{ // 16.2
	"name":"Turn Book to $\ufffc0 Page",
	"group":"gOrange",
	"param":{
		"direction":"$\ufffc0",
}}],
"com.apple.AccessibilityUtilities.AXSettingsShortcuts.AXStartMagnifierIntent":[{
	"name":"Open Magnifier",
}],
"com.apple.Magnifier.DescribeThisIntent":[{ // 18
	"name":"Describe This in Magnifier",
}],
"com.apple.Magnifier.StartDetectionTypeIntent":[{ // 18
	"name":"Detect $\ufffc0 in Magnifier",
	"param":{
		"detectionType":"$\ufffc0",
}}],
"com.apple.Magnifier.PointAndSpeakIntent":[{ // 18
	"name":"Start Point & Speak in Magnifier",
}],
"com.apple.Magnifier.ReaderModeIntent":[{ // 18
	"name":"Open Reader in Magnifier",
}],
"com.apple.Magnifier.StartActivityAppIntent":[{ // 18
	"name":"Start Activity $\ufffc8 in Magnifier",
	"param":{
		"$\ufffc8":"activity.title.key",
		"activity":"$\ufffc9",
}}],
"is.workflow.actions.getmyworkflows":[{
	"name":"Get My Shortcuts",
}],
"com.apple.shortcuts.OpenNavigationDestinationAction":[{ // 16
	"name":"Open Shortcuts Folder",
}],
"com.apple.shortcuts.CreateWorkflowAction":[{ // 16
	"name":"Create Shortcut $\ufffc0",
	"param":{
		"name":"$\ufffc0",
}}],
"is.workflow.actions.openworkflow":[{
	"name":"Open Shortcut $\ufffc0",
	"param":{
		"WFWorkflow":"$\ufffc0",
}}],
"com.apple.shortcuts.DeleteWorkflowAction":[{ // 16
	"name":"Delete Shortcuts $\ufffc8",
	"param":{
		"$\ufffc8":"entities.title.key",
		"entities":"$\ufffc9",
}}],
"com.apple.shortcuts.SearchShortcutsAction":[{ // 16.1
	"name":"Search $\ufffc0 in Shortcuts",
	"param":{
		"searchPhrase":"$\ufffc0",
}}],
"com.apple.shortcuts.AddShortcutToHomeScreenAction":[{ // 18
	"name":"Add Shortcut $\ufffc8 to Home Screen",
	"param":{
		"$\ufffc8":"shortcut.title.key",
		"shortcut":"$\ufffc9",
}}],
"com.apple.shortcuts.CreateFolderAction":[{ // 18
	"name":"Create Shortcuts Folder $\ufffc0",
	"param":{
		"name":"$\ufffc0",
}}],
"com.apple.shortcuts.CreateShortcutiCloudLinkAction":[{ // 18
	"name":"Create iCloud Link for Shortcut $\ufffc8",
	"param":{
		"$\ufffc8":"shortcut.title.key",
		"shortcut":"$\ufffc9",
}}],
"com.apple.shortcuts.RenameShortcutAction":[{ // 18
	"name":"Rename Shortcut $\ufffc8 to $\ufffc1",
	"param":{
		"$\ufffc8":"shortcut.title.key",
		"shortcut":"$\ufffc9",
		"name":"$\ufffc1",
}}],
"com.apple.shortcuts.MoveShortcutToFolderAction":[{ // 18
	"name":"Move Shortcuts $\ufffc7 to $\ufffc8",
	"param":{
		"$\ufffc8":"folder.title.key",
		"folder":"$\ufffc9",
		"$\ufffc80":"All Shortcuts",
		"$\ufffc7":"shortcuts.title.key",
		"shortcuts":"$\ufffc9",
}}],
"is.workflow.actions.weather.currentconditions":[{
	"name":"Get Current Weather",
	"group":"gBlue",
}],
"is.workflow.actions.weather.forecast":[{
	"name":"Get $\ufffc0 Weather Forecast",
	"group":"gBlue",
	"param":{
		"WFWeatherForecastType":"$\ufffc0",
		"$\ufffc0":"Daily",
}}],
"com.apple.weather.WeatherIntent":[{ // 16
	"name":"Show Weather",
}],
"is.workflow.actions.openapp":[{
	"name":"Open App $\ufffc0",
	"param":{
		"WFAppIdentifier":"$\ufffc0",
}}],
"is.workflow.actions.handoff":[{
	"name":"Continue in Shortcuts app",
	"group":"gGray",
}],
"is.workflow.actions.dismisssiri":[{
	"name":"Dismiss Siri and Continue",
	"group":"gGray",
}],
"is.workflow.actions.returntohomescreen":[{
	"name":"Go to Home Screen",
}],
"is.workflow.actions.delay":[{
	"name":"Wait $\ufffc0 seconds",
	"group":"gGray",
	"param":{
		"WFDelayTime":"$\ufffc0",
		"$\ufffc0":"1",
}}],
"is.workflow.actions.reboot":[{ 	// 16.4
	"name":"$\ufffc0 this Device",
	"group":"gGray",
	"param":{
		"WFShutdownMode":"$\ufffc0",
		"$\ufffc0":"Shut Down",
}}],
"is.workflow.actions.lockscreen":[{ 	// 16.4
	"name":"Lock Screen",
	"group":"gGray",
}],
"is.workflow.actions.displaysleep":[{ 	// 16.4
	"name":"Set Display to Sleep",
	"group":"gGray",
}],
"is.workflow.actions.logout":[{ 	// 16.4
	"name":"Log Out User",
	"group":"gGray",
}],
"is.workflow.actions.sleep":[{ 	// 16.4
	"name":"Put this Mac to Sleep",
	"group":"gGray",
}],
"is.workflow.actions.hash":[{
	"name":"Generate $\ufffc1 Hash of $\ufffc0",
	"param":{
		"WFHashType":"$\ufffc1",
		"$\ufffc1":"MD5",
}}],
"is.workflow.actions.viewresult":[{
	"name":"View Content Graph of $\ufffc0",
	"group":"gYellow",
}],
"is.workflow.actions.round":[{
	"name":"Round Number $\ufffc0 to $\ufffc1",
	"param":{
		"WFRoundTo":"$\ufffc1",
		"$\ufffc1":"Ones Place",
}}],
"is.workflow.actions.measurement.convert":[{
	"name":"Convert Measurement $\ufffc0 into $\ufffc1",
	"param":{
		"WFMeasurementUnitType":"$\ufffc1",
		"$\ufffc1":"Length",
		"$\ufffc2":"meters",
}}],
"is.workflow.actions.measurement.create":[{
	"name":"Measurement $\ufffc1 $\ufffc0",
	"param":{
		"WFMeasurementUnit":"$\ufffc0",
		"WFMeasurementUnitType":"$\ufffc1",
		"$\ufffc1":"Length",
}}],
"is.workflow.actions.format.filesize":[{
	"name":"Format File Size $\ufffc0 into $\ufffc1",
	"group":"gBlue",
	"param":{
		"WFFileSize":"$\ufffc0",
		"WFFileSizeFormat":"$\ufffc1",
		"$\ufffc1":"Closest Unit",
}}],
"is.workflow.actions.format.number":[{
	"name":"Format Number $\ufffc0 to $\ufffc1 decimal places",
	"param":{
		"WFNumber":"$\ufffc0",
		"WFNumberFormatDecimalPlaces":"$\ufffc1",
		"$\ufffc1":"2",
}}],
"is.workflow.actions.number.random":[{
	"name":"Random Number between $\ufffc0 and $\ufffc1",
	"param":{
		"WFRandomNumberMinimum":"$\ufffc0",
		"WFRandomNumberMaximum":"$\ufffc1",
}}],
"is.workflow.actions.openxcallbackurl":[{
	"name":"Open X-Callback URL $\ufffc0",
	"group":"gBlue",
	"param":{
		"WFXCallbackURL":"$\ufffc0",
}}],
"is.workflow.actions.getcurrentlocation":[{
	"name":"Get Current Location",
	"group":"gBlue",
}],
"is.workflow.actions.location":[{
	"name":"Location",
	"group":"gGreen",
}],
"is.workflow.actions.getparkedcarlocation":[{ // 16
	"name":"Get Parked Car Location",
	"group":"gGreen",
}],
"is.workflow.actions.setparkedcar":[{ // 16
	"name":"Set Parked Car Location",
	"group":"gGreen",
}],
"is.workflow.actions.intercom":[{ 	// 16.4
	"name":"Intercom $\ufffc0",
	"group":"gOrange",
}],
"is.workflow.actions.setairdropreceiving":[{ 	// 16.4
	"name":"Set AirDrop Receiving to $\ufffc0",
	"param":{
		"WFAirDropState":"$\ufffc0",
		"$\ufffc0":"Everyone for 10 Minutes",
}}],
"is.workflow.actions.airdropdocument":[{
	"name":"AirDrop",
}],
"is.workflow.actions.share":[{
	"name":"Share $\ufffc0",
	"group":"gBlue",
}],
"is.workflow.actions.runextension":[{
	"name":"Share $\ufffc0 with App $\ufffc1",
	"param":{
		"WFAppIdentifier":"$\ufffc1",
}}],
"is.workflow.actions.recordaudio":[{
	"name":"Record Audio",
	"group":"gRed",
}],
"is.workflow.actions.addframetogif":[{
	"name":"Add Frame $\ufffc0 to GIF $\ufffc1",
	"param":{
		"WFImage":"$\ufffc0",
		"WFInputGIF":"$\ufffc1",
}}],
"is.workflow.actions.getframesfromimage":[{
	"name":"Get Frames from Image $\ufffc0",
	"param":{
		"WFImage":"$\ufffc0",
}}],
"is.workflow.actions.makegif":[{
	"name":"Make GIF from $\ufffc0",
}],
"is.workflow.actions.makevideofromgif":[{
	"name":"Make Video from GIF $\ufffc0",
	"param":{
		"WFInputGIF":"$\ufffc0",
}}],
"is.workflow.actions.image.combine":[{
	"name":"Combine Images $\ufffc0 $\ufffc1",
	"group":"gBlue",
	"param":{
		"WFImageCombineMode":"$\ufffc1",
		"$\ufffc1":"Horizontally",
}}],
"is.workflow.actions.image.crop":[{
	"name":"Crop Image $\ufffc0",
	"group":"gBlue",
}],
"is.workflow.actions.image.flip":[{
	"name":"Flip Image $\ufffc0 $\ufffc1",
	"group":"gBlue",
	"param":{
		"WFImageFlipDirection":"$\ufffc1",
		"$\ufffc1":"Horizontally",
}}],
"is.workflow.actions.avairyeditphoto":[{
	"name":"Markup $\ufffc0",
	"group":"gBlue",
	"param":{
		"WFDocument":"$\ufffc0",
}}],
"is.workflow.actions.image.mask":[{
	"name":"Mask Image $\ufffc0 with $\ufffc1",
	"group":"gBlue",
	"param":{
		"WFMaskType":"$\ufffc1",
		"$\ufffc1":"Rounded Rectangle",
}}],
"is.workflow.actions.overlayimageonimage":[{
	"name":"Overlay Image $\ufffc1 with $\ufffc0",
	"group":"gBlue",
	"param":{
		"WFImage":"$\ufffc1",
}}],
"is.workflow.actions.overlaytext":[{
	"name":"Overlay Text $\ufffc0 on $\ufffc1 at $\ufffc2",
	"group":"gBlue",
	"param":{
		"WFText":"$\ufffc0",
		"WFImage":"$\ufffc1",
		"WFTextPosition":"$\ufffc2",
		"$\ufffc2":"Center",
}}],
"is.workflow.actions.image.resize":[{
	"name":"Resize Image $\ufffc0 to $\ufffc1",
	"group":"gBlue",
	"param":{
		"WFImage":"$\ufffc0",
		"WFImageResizeKey":"$\ufffc1",
		"$\ufffc1":"Size",
}}],
"is.workflow.actions.image.rotate":[{
	"name":"Rotate Image/Video $\ufffc0 by $\ufffc1 degrees",
	"group":"gBlue",
	"param":{
		"WFImage":"$\ufffc0",
		"WFImageRotateAmount":"$\ufffc1",
		"$\ufffc1":"90",
}}],
"is.workflow.actions.image.convert":[{
	"name":"Convert Image $\ufffc0 to $\ufffc1",
	"group":"gBlue",
	"param":{
		"WFImageFormat":"$\ufffc1",
		"$\ufffc1":"JPEG",
}}],
"is.workflow.actions.image.removebackground":[{ // 16
	"name":"Remove Image Background from $\ufffc0",
	"group":"gBlue",
}],
"is.workflow.actions.pausemusic":[{
	"name":"Play/Pause $\ufffc0",
	"group":"gRed",
	"param":{
		"WFPlayPauseBehavior":"$\ufffc0",
		"$\ufffc0":"Play/Pause",
}}],
"is.workflow.actions.listeningmode.set":[{ // 16
	"name":"Set Noise Control Mode to $\ufffc0",
	"group":"gRed",
	"param":{
		"WFListeningMode":"$\ufffc0",
}}],
"is.workflow.actions.skipback":[{
	"name":"Skip Back to the $\ufffc0",
	"group":"gRed",
	"param":{
		"WFSkipBackBehavior":"$\ufffc0",
		"$\ufffc0":"Beginning",
}}],
"is.workflow.actions.skipforward":[{
	"name":"Skip Forward",
	"group":"gRed",
}],
"is.workflow.actions.encodemedia":[{
	"name":"Encode Media $\ufffc0",
	"group":"gBlue",
	"param":{
		"WFMedia":"$\ufffc0",
}}],
"is.workflow.actions.trimvideo":[{
	"name":"Trim Media $\ufffc0",
	"group":"gBlue",
	"param":{
		"WFInputMedia":"$\ufffc0",
}}],
"is.workflow.actions.unzip":[{
	"name":"Extract Archive $\ufffc0",
	"group":"gBlue",
	"param":{
		"WFArchive":"$\ufffc0",
}}],
"is.workflow.actions.makezip":[{
	"name":"Make $\ufffc1 Archive from $\ufffc0",
	"group":"gBlue",
	"param":{
		"WFArchiveFormat":"$\ufffc1",
		"$\ufffc1":".zip",
}}],
"is.workflow.actions.file.append":[{
	"name":"$\ufffc1 $\ufffc0 to Text File",
	"group":"gBlue",
	"param":{
		"WFAppendFileWriteMode":"$\ufffc1",
		"$\ufffc1":"Append",
}}],
"is.workflow.actions.file.createfolder":[{
	"name":"Create Folder $\ufffc0",
	"group":"gBlue",
	"param":{
		"WFFilePath":"$\ufffc0",
}}],
"is.workflow.actions.file.getlink":[{
	"name":"Get Link to File $\ufffc0",
	"group":"gBlue",
	"param":{
		"WFFile":"$\ufffc0",
}}],
"is.workflow.actions.file":[{
	"name":"File",
	"group":"gBlue",
}],
"is.workflow.actions.folder":[{
	"name":"Folder",
	"group":"gBlue",
}],
"is.workflow.actions.file.getfoldercontents":[{
	"name":"Get Contents of Folder",
	"group":"gBlue",
}],
"is.workflow.actions.getparentdirectory":[{
	"name":"Get Parent Directory of $\ufffc0",
	"group":"gBlue",
}],
"is.workflow.actions.finder.getselectedfiles":[{
	"name":"Get Selected Files in Finder",
	"group":"gBlue",
}],
"is.workflow.actions.file.reveal":[{
	"name":"Reveal Files $\ufffc0 in Finder",
	"group":"gBlue",
	"param":{
		"WFFile":"$\ufffc0",
}}],
"is.workflow.actions.file.move":[{
	"name":"Move File $\ufffc0",
	"group":"gBlue",
	"param":{
		"WFFile":"$\ufffc0",
}}],
"is.workflow.actions.file.rename":[{
	"name":"Rename File $\ufffc0 to $\ufffc1",
	"group":"gBlue",
	"param":{
		"WFFile":"$\ufffc0",
		"WFNewFilename":"$\ufffc1",
}}],
"is.workflow.actions.file.label":[{
	"name":"Label Files $\ufffc0 with $\ufffc1",
	"group":"gBlue",
	"param":{
		"WFLabelColorNumber":"$\ufffc1",
}}],
"com.apple.finder.GetInfo":[{ 	// 18.1
	"name":"Get Info in Finder",
	"group":"gBlue",
}],
"com.apple.HydraUSDAppIntents.ConvertToUSDZ":[{ 	// 18.1
	"name":"Convert File to USDZ",
}],
"is.workflow.actions.file.select":[{
	"name":"Select File",
	"group":"gBlue",
}],
"is.workflow.actions.dropbox.open":[{
	"name":"Get Dropbox File",
}],
"is.workflow.actions.dropbox.savefile":[{
	"name":"Save Dropbox File $\ufffc0",
}],
"is.workflow.actions.dropbox.createfolder":[{
	"name":"Create Dropbox Folder",
}],
"is.workflow.actions.dropbox.appendfile":[{
	"name":"Append $\ufffc0 to Dropbox Text File",
	"param":{
		"WFFile":"$\ufffc0",
		"WFNewFilename":"$\ufffc1",
}}],
"is.workflow.actions.gettypeaction":[{
	"name":"Get File of Type $\ufffc1 from $\ufffc0",
	"param":{
		"WFFileType":"$\ufffc1",
		"$\ufffc1":"public.rtf",
}}],
"is.workflow.actions.makepdf":[{
	"name":"Make PDF from $\ufffc0",
	"group":"gBlue",
}],
"is.workflow.actions.splitpdf":[{
	"name":"Split PDF $\ufffc0",
	"group":"gBlue",
}],
"is.workflow.actions.gettextfrompdf":[{
	"name":"Get $\ufffc1 from PDF $\ufffc0",
	"group":"gYellow",
	"param":{
		"WFGetTextFromPDFTextType":"$\ufffc1",
		"$\ufffc1":"Text",
}}],
"is.workflow.actions.makeimagefrompdfpage":[{
	"name":"Make $\ufffc1 from PDF $\ufffc0",
	"group":"gBlue",
	"param":{
		"WFMakeImageFromPDFPageImageFormat":"$\ufffc1",
		"$\ufffc1":"PNG image",
}}],
"is.workflow.actions.makeimagefromrichtext":[{ 	// 17
	"name":"Make Image from Rich Text $\ufffc0",
	"group":"gBlue",
}],
"is.workflow.actions.compresspdf":[{ // 16
	"name":"Optimize File Size of PDF $\ufffc0",
	"group":"gBlue",
}],
"is.workflow.actions.print":[{
	"name":"Print $\ufffc0",
}],
"is.workflow.actions.generatebarcode":[{
	"name":"Generate QR Code from $\ufffc0",
	"param":{
		"WFText":"$\ufffc0",
}}],
"is.workflow.actions.scanbarcode":[{
	"name":"Scan QR or Barcode",
}],
"is.workflow.actions.dictatetext":[{
	"name":"Dictate Text",
}],
"is.workflow.actions.getnameofemoji":[{
	"name":"Get Name of Emoji in $\ufffc0",
	"group":"gYellow",
}],
"is.workflow.actions.showdefinition":[{
	"name":"Show Definition of $\ufffc0",
	"group":"gRed",
	"param":{
		"Word":"$\ufffc0",
}}],
"is.workflow.actions.text.changecase":[{
	"name":"Change $\ufffc0 to $\ufffc1",
	"group":"gYellow",
	"param":{
		"text":"$\ufffc0",
		"WFCaseType":"$\ufffc1",
		"$\ufffc1":"UPPERCASE",
}}],
"is.workflow.actions.text.trimwhitespace":[{ 	// 18.1
	"name":"Trim Whitespace from $\ufffc0",
	"group":"gYellow",
}],
"is.workflow.actions.correctspelling":[{
	"name":"Correct Spelling of $\ufffc0",
	"group":"gYellow",
	"param":{
		"text":"$\ufffc0",
}}],
"is.workflow.actions.text.translate":[{
	"name":"Translate $\ufffc0 from $\ufffc1 to $\ufffc2",
	"param":{
		"WFInputText":"$\ufffc0",
		"WFSelectedFromLanguage":"$\ufffc1",
		"WFSelectedLanguage":"$\ufffc2",
		"$\ufffc1":"Detected Language",
		"$\ufffc2":"Default",
}}],
"is.workflow.actions.detectlanguage":[{
	"name":"Detect Language of $\ufffc0",
}],
"is.workflow.actions.extracttextfromimage":[{
	"name":"Extract Text from Image $\ufffc0",
	"group":"gBlue",
	"param":{
		"WFImage":"$\ufffc0",
}}],
"is.workflow.actions.rss":[{
	"name":"Get $\ufffc0 Items from RSS Feed $\ufffc1",
	"group":"gOrange",
	"param":{
		"WFRSSItemQuantity":"$\ufffc0",
		"WFRSSFeedURL":"$\ufffc1",
		"$\ufffc0":"10",
		"$\ufffc1":"https://www.apple.com/newsroom/rss-feed.rss",
}}],
"is.workflow.actions.rss.extract":[{
	"name":"Get RSS Feeds from Page $\ufffc0",
	"group":"gOrange",
	"param":{
		"WFURLs":"$\ufffc0",
}}],
"is.workflow.actions.url.expand":[{
	"name":"Expand URL $\ufffc0",
	"group":"gBlue",
	"param":{
		"URL":"$\ufffc0",
}}],
"is.workflow.actions.geturlcomponent":[{
	"name":"Get $\ufffc0 of URL $\ufffc1",
	"group":"gBlue",
	"param":{
		"WFURLComponent":"$\ufffc0",
		"WFURL":"$\ufffc1",
		"$\ufffc0":"Scheme",
}}],
"is.workflow.actions.url.getheaders":[{
	"name":"Get Headers of URL $\ufffc0",
	"group":"gGreen",
}],
"is.workflow.actions.runsshscript":[{
	"name":"Run Script Over SSH",
}],
"is.workflow.actions.health.quantity.log":[{
	"name":"Log Health Sample",
}],
"is.workflow.actions.health.workout.log":[{
	"name":"Log Workout",
}],
"com.apple.Health.OpenDataTypeIntent":[{ 	// 18.1
	"name":"Open Health Data Type $\ufffc8",
	"param":{
		"$\ufffc8":"target.title.key",
		"target":"$\ufffc9",
}}],
"com.apple.Health.OpenViewIntent":[{ 	// 18.1
	"name":"Open Health View $\ufffc8",
	"param":{
		"$\ufffc8":"target.title.key",
		"target":"$\ufffc9",
}}],
"com.apple.Health.OpenSearchIntent":[{ 	// 18.1
	"name":"Search $\ufffc0 in Health",
	"param":{
		"criteria":"$\ufffc0",
}}],
"com.apple.Health.OpenSleepScheduleIntent":[{ 	// 18.1
	"name":"Open Sleep Schedule",
}],
"is.workflow.actions.workout.start":[{
	"group":"gGreen",
	"name":"Start Workout",
}],
"is.workflow.actions.workout.end":[{ 	// 17
	"group":"gGreen",
	"name":"End Workout",
}],
"is.workflow.actions.filter.files":[{
	"name":"Filter Files $\ufffc0",
	"param":{
		"WFContentItemInputParameter":"$\ufffc0",
}}],
"is.workflow.actions.filter.photos":[{
	"name":"Find Photos $\ufffc0",
	"param":{
		"WFContentItemInputParameter":"$\ufffc0",
		"$\ufffc0":"All Photos",
}}],
"is.workflow.actions.filter.calendarevents":[{
	"name":"Find Calendar Events $\ufffc0 where",
	"param":{
		"WFContentItemInputParameter":"$\ufffc0",
		"$\ufffc0":"All Calendar Events",
}}],
"is.workflow.actions.filter.contacts":[{
	"name":"Find Contacts $\ufffc0",
	"param":{
		"WFContentItemInputParameter":"$\ufffc0",
		"$\ufffc0":"All Contacts",
}}],
"is.workflow.actions.filter.notes":[{
	"name":"Find Notes",
	"group":"gYellow",
	"param":{
		"WFContentItemInputParameter":"$\ufffc0",
		"$\ufffc0":"All Notes",
}}],
"is.workflow.actions.filter.reminders":[{
	"name":"Find Reminders",
	"param":{
		"WFContentItemInputParameter":"$\ufffc0",
		"$\ufffc0":"All Reminders",
}}],
"is.workflow.actions.filter.eventattendees":[{
	"name":"Filter Event Attendees $\ufffc0",
	"param":{
		"WFContentItemInputParameter":"$\ufffc0",
}}],
"is.workflow.actions.filter.music":[{
	"name":"Find Music $\ufffc0",
	"group":"gRed",
	"param":{
		"WFContentItemInputParameter":"$\ufffc0",
		"$\ufffc0":"All Music",
}}],
"is.workflow.actions.filter.articles":[{
	"name":"Filter Articles $\ufffc0",
	"param":{
		"WFContentItemInputParameter":"$\ufffc0",
}}],
"is.workflow.actions.filter.locations":[{
	"name":"Filter Locations $\ufffc0",
	"group":"gGreen",
	"param":{
		"WFContentItemInputParameter":"$\ufffc0",
}}],
"is.workflow.actions.filter.images":[{
	"name":"Filter Images $\ufffc0",
	"group":"gBlue",
	"param":{
		"WFContentItemInputParameter":"$\ufffc0",
}}],
"is.workflow.actions.filter.health.quantity":[{
	"name":"Find Health Samples $\ufffc0",
	"param":{
		"WFContentItemInputParameter":"$\ufffc0",
		"$\ufffc0":"All Health Samples",
}}],
"is.workflow.actions.filter.windows":[{
	"name":"Find Windows $\ufffc0",
	"param":{
		"WFContentItemInputParameter":"$\ufffc0",
		"$\ufffc0":"All Windows",
}}],
"com.apple.mobilesafari.BookmarkEntity":[{ // 16
	"name":"Find Safari Bookmarks $\ufffc0",
	"param":{
		"WFContentItemInputParameter":"$\ufffc0",
		"$\ufffc0":"All Bookmarks",
}}],
"com.apple.mobilesafari.ReadingListItemEntity":[{ // 16
	"name":"Find Reading List Items $\ufffc0",
	"param":{
		"WFContentItemInputParameter":"$\ufffc0",
		"$\ufffc0":"All Lists",
}}],
"com.apple.mobilesafari.TabGroupEntity":[{ // 16
	"name":"Find Tab Groups $\ufffc0",
	"param":{
		"WFContentItemInputParameter":"$\ufffc0",
		"$\ufffc0":"All Tab Groups",
}}],
"com.apple.mobilesafari.TabEntity":[{ // 16
	"name":"Find Tabs $\ufffc0",
	"param":{
		"WFContentItemInputParameter":"$\ufffc0",
		"$\ufffc0":"All Tabs",
}}],
"is.workflow.actions.filter.apps":[{ 	// 16.4
	"name":"Find Apps $\ufffc0",
	"param":{
		"WFContentItemInputParameter":"$\ufffc0",
		"$\ufffc0":"All Apps",
}}],
"is.workflow.actions.filter.displays":[{ 	// 16.4
	"name":"Find Displays $\ufffc0",
	"param":{
		"WFContentItemInputParameter":"$\ufffc0",
		"$\ufffc0":"All Displays",
}}],
"com.apple.ShortcutsActions.CellularPlanEntity":[{ 	// 17
	"name":"Find Cellular Plans $\ufffc0",
	"group":"gGreen",
	"param":{
		"WFContentItemInputParameter":"$\ufffc0",
		"$\ufffc0":"All Plans",
}}],
"is.workflow.actions.properties.calendarevents":[{
	"name":"Get $\ufffc1 of Calendar Events $\ufffc0",
	"param":{
		"WFContentItemPropertyName":"$\ufffc1",
		"$\ufffc1":"Start Date",
}}],
"is.workflow.actions.properties.reminders":[{
	"name":"Get $\ufffc1 of Reminders $\ufffc0",
	"param":{
		"WFContentItemPropertyName":"$\ufffc1",
		"$\ufffc1":"List",
}}],
"is.workflow.actions.properties.eventattendees":[{
	"name":"Get $\ufffc1 of Event Attendees $\ufffc0",
	"param":{
		"WFContentItemPropertyName":"$\ufffc1",
		"$\ufffc1":"Status",
}}],
"is.workflow.actions.properties.contacts":[{
	"name":"Get $\ufffc1 of Contacts $\ufffc0",
	"param":{
		"WFContentItemPropertyName":"$\ufffc1",
		"$\ufffc1":"Group",
}}],
"is.workflow.actions.properties.itunesartist":[{
	"name":"Get $\ufffc1 of iTunes Artist $\ufffc0",
	"param":{
		"WFContentItemPropertyName":"$\ufffc1",
		"$\ufffc1":"Genre",
}}],
"is.workflow.actions.properties.itunesstore":[{
	"name":"Get $\ufffc1 of iTunes Product $\ufffc0",
	"param":{
		"WFContentItemPropertyName":"$\ufffc1",
		"$\ufffc1":"Artist",
}}],
"is.workflow.actions.properties.music":[{
	"name":"Get $\ufffc1 of Music $\ufffc0",
	"group":"gRed",
	"param":{
		"WFContentItemPropertyName":"$\ufffc1",
		"$\ufffc1":"Artist",
}}],
"is.workflow.actions.properties.appstore":[{
	"name":"Get $\ufffc1 of App Store App $\ufffc0",
	"param":{
		"WFContentItemPropertyName":"$\ufffc1",
		"$\ufffc1":"Artist",
}}],
"is.workflow.actions.properties.podcastshow":[{
	"name":"Get $\ufffc1 of Podcast from $\ufffc0",
	"param":{
		"WFContentItemPropertyName":"$\ufffc1",
		"$\ufffc1":"Feed URL",
}}],
"is.workflow.actions.properties.podcast":[{
	"name":"Get $\ufffc1 of Podcast Episode $\ufffc0",
	"param":{
		"WFContentItemPropertyName":"$\ufffc1",
		"$\ufffc1":"Store ID",
}}],
"is.workflow.actions.properties.articles":[{
	"name":"Get $\ufffc1 of Article $\ufffc0",
	"param":{
		"WFContentItemPropertyName":"$\ufffc1",
		"$\ufffc1":"Title",
}}],
"is.workflow.actions.properties.safariwebpage":[{
	"name":"Get $\ufffc1 of Safari Webpage $\ufffc0",
	"param":{
		"WFContentItemPropertyName":"$\ufffc1",
		"$\ufffc1":"Page Contents",
}}],
"com.apple.mobilesafari.ListenToPage":[{ 	// 17
	"name":"Listen to Safari Page",
}],
"is.workflow.actions.properties.weather.conditions":[{
	"name":"Get $\ufffc1 of Weather Conditions $\ufffc0",
	"group":"gBlue",
	"param":{
		"WFContentItemPropertyName":"$\ufffc1",
		"$\ufffc1":"Date",
}}],
"is.workflow.actions.properties.locations":[{
	"name":"Get $\ufffc1 of Locations $\ufffc0",
	"group":"gGreen",
	"param":{
		"WFContentItemPropertyName":"$\ufffc1",
//		"$\ufffc1":"Latitude",		// removed from iOS 16
}}],
"is.workflow.actions.properties.images":[{
	"name":"Get $\ufffc1 of Images $\ufffc0",
	"group":"gBlue",
	"param":{
		"WFContentItemPropertyName":"$\ufffc1",
		"$\ufffc1":"Album",
}}],
"is.workflow.actions.properties.files":[{
	"name":"Get $\ufffc1 of Files $\ufffc0",
	"group":"gBlue",
	"param":{
		"WFContentItemPropertyName":"$\ufffc1",
		"$\ufffc1":"File Size",
}}],
"is.workflow.actions.properties.health.quantity":[{
	"name":"Get $\ufffc1 of Health Sample $\ufffc0",
	"param":{
		"WFContentItemPropertyName":"$\ufffc1",
		"$\ufffc1":"Type",
}}],
"is.workflow.actions.properties.parkedcar":[{ // 16
	"name":"Get $\ufffc1 from Parked Car $\ufffc0",
	"group":"gGreen",
	"param":{
		"WFContentItemPropertyName":"$\ufffc1",
}}],
"is.workflow.actions.getclassaction":[{
	"name":"Get Object of Class $\ufffc0 from $\ufffc0",
	"param":{
		"Class":"$\ufffc0",
		"Input":"$\ufffc1",
		"$\ufffc0":"NSURL",
}}],
"is.workflow.actions.openin":[{
	"name":"Open File $\ufffc0",
}],
"is.workflow.actions.gethomeaccessorystate":[{
	"name":"Get the State of My Home",
}],
"is.workflow.actions.homeaccessory":[{
	"name":"Control My Home",
}],
"is.workflow.actions.setplaybackdestination":[{
	"name":"$\ufffc0 Playback Destination",
	"group":"gRed",
	"param":{
		"WFMediaRouteOperation":"$\ufffc0",
		"$\ufffc0":"Set",
}}],
"is.workflow.actions.handoffplayback":[{
	"name":"Hand Off Playback",
	"group":"gRed",
}],
"is.workflow.actions.searchitunes":[{
	"name":"Find iTunes Store Items for $\ufffc0",
	"param":{
		"WFSearchTerm":"$\ufffc0",
}}],
"is.workflow.actions.showinstore":[{
	"name":"Show $\ufffc0 in iTunes Store",
	"param":{
		"WFProduct":"$\ufffc0",
}}],
"is.workflow.actions.searchappstore":[{
	"name":"Find App Store Apps for $\ufffc0",
	"param":{
		"WFSearchTerm":"$\ufffc0",
}}],
"com.apple.AppStore.PageNavigationIntent":[{ 	// 18.1
	"name":"Open App Store Page $\ufffc0",
	"param":{
		"target":"$\ufffc0",
}}],
"is.workflow.actions.getdevicedetails":[{
	"name":"Get Device Details $\ufffc0",
	"group":"gBlue",
	"param":{
		"WFDeviceDetail":"$\ufffc0",
		"$\ufffc0":"Device Name",
}}],
"is.workflow.actions.getcurrentapp":[{ 	// 18.2
	"name":"Get $\ufffc0 App",
	"group":"gBlue",
	"param":{
		"WFVisibleAppScope":"$\ufffc0",
		"$\ufffc0":"Current",
}}],
"is.workflow.actions.getbatterylevel":[{
	"name":"Get Battery Status $\ufffc0",
	"group":"gGreen",
	"param":{
		"Subject":"$\ufffc0",
		"$\ufffc0":"Battery Level",
}}],
"is.workflow.actions.setvolume":[{
	"name":"Set $\ufffc0 Volume to $\ufffc1",
	"group":"gRed",
	"param":{
		"WFVolumeSetting":"$\ufffc0",
		"$\ufffc0":"Media",
		"WFVolume":"$\ufffc1",
		"$\ufffc1":"0.5",
}}],
"is.workflow.actions.setbrightness":[{
	"name":"Set Brightness to $\ufffc0",
	"param":{
		"WFBrightness":"$\ufffc0",
		"$\ufffc0":"0.5",
}}],
"is.workflow.actions.playsound":[{
	"name":"Play Sound $\ufffc0",
	"group":"gRed",
}],
"is.workflow.actions.vibrate":[{
	"name":"Vibrate Device",
	"group":"gRed",
}],
"com.apple.ShortcutsActions.GetOrientationAction":[{ // 17.4
	"name":"Get Orientation",
	"group":"gRed",
}],
"com.apple.ShortcutsActions.GetPhysicalActivity":[{ // 17.4
	"name":"Get Physical Activity",
	"group":"gOrange",
}],
"is.workflow.actions.takescreenshot":[{
	"name":"Take Screenshot",
}],
"com.apple.AccessibilityUtilities.AXSettingsShortcuts.AXStartGuidedAccessIntent":[{
	"name":"Start Guided Access",
}],
"com.apple.AccessibilityUtilities.AXSettingsShortcuts.AXStartSpeakScreenIntent":[{
	"name":"Start Speak Screen",
}],
"com.apple.AccessibilityUtilities.AXSettingsShortcuts.AXSetLargeTextIntent":[{
	"name":"Set Text Size to $\ufffc0",
	"param":{
		"textSize":"$\ufffc0",
		"$\ufffc0":"Extra Small",
}}],
"com.apple.AccessibilityUtilities.AXSettingsShortcuts.AXSetBackgroundSoundVolumeIntent":[{
	"name":"Set Background Sounds $\ufffc1 to $\ufffc0",
	"param":{
		"volume":"$\ufffc0",
		"$\ufffc0":"0.1",
		"volumeType":"$\ufffc1",
		"$\ufffc1":"Volume",
}}],
"com.apple.AccessibilityUtilities.AXSettingsShortcuts.AXSetBackgroundSoundVolumeWhenMediaIsPlayingIntent":[{
	"name":"Set Background Sounds Volume to $\ufffc0 When Media is Playing",
	"param":{
		"volume":"$\ufffc0",
		"$\ufffc0":"0.1",
}}],
"com.apple.AccessibilityUtilities.AXSettingsShortcuts.AXSetBackgroundSoundIntent":[{
	"name":"Change Background Sound to $\ufffc0",
	"param":{
		"backgroundSound":"$\ufffc0",
		"$\ufffc0":"Balanced Noise",
}}],
"com.apple.AccessibilityUtilities.AXSettingsShortcuts.AXToggleBackgroundSoundsIntent":[{
	"name":"$\ufffc0 Background Sounds $\ufffc1 $\ufffc9",
	"param":{
		"operation":"$\ufffc0",
		"$\ufffc0":"Turn",
		"setting":"$\ufffc1",
		"$\ufffc1":"",
		"state":"$\ufffc9",
}}],
"com.apple.AccessibilityUtilities.AXSettingsShortcuts.AXToggleBackgroundSoundsWhenMediaIsPlayingIntent":[{
	"name":"$\ufffc0 Use Background Sounds When Media is Playing $\ufffc9",
	"param":{
		"operation":"$\ufffc0",
		"$\ufffc0":"Turn",
		"state":"$\ufffc9",
}}],
"com.apple.AccessibilityUtilities.AXSettingsShortcuts.AXToggleAssistiveTouchIntent":[{
	"name":"$\ufffc0 AssistiveTouch $\ufffc9",
	"param":{
		"operation":"$\ufffc0",
		"$\ufffc0":"Turn",
		"state":"$\ufffc9",
}}],
"com.apple.AccessibilityUtilities.AXSettingsShortcuts.AXToggleAudioDescriptionsIntent":[{
	"name":"$\ufffc0 Audio Descriptions $\ufffc9",
	"param":{
		"operation":"$\ufffc0",
		"$\ufffc0":"Turn",
		"state":"$\ufffc9",
}}],
"com.apple.UniversalAccess.UASettingsShortcuts.UAToggleAudioDescriptionsIntent":[{
	"name":"$\ufffc0 Audio Descriptions $\ufffc9",
	"param":{
		"operation":"$\ufffc0",
		"$\ufffc0":"Turn",
		"state":"$\ufffc9",
}}],
"com.apple.AccessibilityUtilities.AXSettingsShortcuts.AXToggleClassicInvertIntent":[{
	"name":"$\ufffc0 Classic Invert $\ufffc9",
	"param":{
		"operation":"$\ufffc0",
		"$\ufffc0":"Turn",
		"state":"$\ufffc9",
}}],
"com.apple.UniversalAccess.UASettingsShortcuts.UAToggleClassicInvertIntent":[{
	"name":"$\ufffc0 Classic Invert $\ufffc9",
	"param":{
		"operation":"$\ufffc0",
		"$\ufffc0":"Turn",
		"state":"$\ufffc9",
		"$\ufffc9":{"default":0},
}}],
"com.apple.AccessibilityUtilities.AXSettingsShortcuts.AXToggleCaptionsIntent":[{
	"name":"$\ufffc0 Closed Captions+SDH $\ufffc9",
	"param":{
		"operation":"$\ufffc0",
		"$\ufffc0":"Turn",
		"state":"$\ufffc9",
}}],
"com.apple.UniversalAccess.UASettingsShortcuts.UAToggleCaptionsIntent":[{
	"name":"$\ufffc0 Closed Captions+SDH $\ufffc9",
	"param":{
		"operation":"$\ufffc0",
		"$\ufffc0":"Turn",
		"state":"$\ufffc9",
}}],
"com.apple.AccessibilityUtilities.AXSettingsShortcuts.AXToggleContrastIntent":[{
	"name":"$\ufffc0 Increase Contrast $\ufffc9",
	"param":{
		"operation":"$\ufffc0",
		"$\ufffc0":"Turn",
		"state":"$\ufffc9",
}}],
"com.apple.UniversalAccess.UASettingsShortcuts.UAToggleContrastIntent":[{
	"name":"$\ufffc0 Increase Contrast $\ufffc9",
	"param":{
		"operation":"$\ufffc0",
		"$\ufffc0":"Turn",
		"state":"$\ufffc9",
}}],
"com.apple.AccessibilityUtilities.AXSettingsShortcuts.AXToggleLEDFlashIntent":[{
	"name":"$\ufffc0 LED Flash $\ufffc9",
	"param":{
		"operation":"$\ufffc0",
		"$\ufffc0":"Turn",
		"state":"$\ufffc9",
}}],
"com.apple.AccessibilityUtilities.AXSettingsShortcuts.AXToggleMonoAudioIntent":[{
	"name":"$\ufffc0 Mono Audio $\ufffc9",
	"param":{
		"operation":"$\ufffc0",
		"$\ufffc0":"Turn",
		"state":"$\ufffc9",
}}],
"com.apple.UniversalAccess.UASettingsShortcuts.UAToggleMonoAudioIntent":[{
	"name":"$\ufffc0 Mono Audio $\ufffc9",
	"param":{
		"operation":"$\ufffc0",
		"$\ufffc0":"Turn",
		"state":"$\ufffc9",
}}],
"com.apple.AccessibilityUtilities.AXSettingsShortcuts.AXToggleReduceMotionIntent":[{
	"name":"$\ufffc0 Reduce Motion $\ufffc9",
	"param":{
		"operation":"$\ufffc0",
		"$\ufffc0":"Turn",
		"state":"$\ufffc9",
}}],
"com.apple.UniversalAccess.UASettingsShortcuts.UAToggleReduceMotionIntent":[{
	"name":"$\ufffc0 Reduce Motion $\ufffc9",
	"param":{
		"operation":"$\ufffc0",
		"$\ufffc0":"Turn",
		"state":"$\ufffc9",
		"$\ufffc9":{"default":0},
}}],
"com.apple.AccessibilityUtilities.AXSettingsShortcuts.AXToggleTransparencyIntent":[{
	"name":"$\ufffc0 Reduce Transparency $\ufffc9",
	"param":{
		"operation":"$\ufffc0",
		"$\ufffc0":"Turn",
		"state":"$\ufffc9",
}}],
"com.apple.UniversalAccess.UASettingsShortcuts.UAToggleTransparencyIntent":[{
	"name":"$\ufffc0 Reduce Transparency $\ufffc9",
	"param":{
		"operation":"$\ufffc0",
		"$\ufffc0":"Turn",
		"state":"$\ufffc9",
}}],
"com.apple.AccessibilityUtilities.AXSettingsShortcuts.AXToggleSmartInvertIntent":[{
	"name":"$\ufffc0 Smart Invert $\ufffc9",
	"param":{
		"operation":"$\ufffc0",
		"$\ufffc0":"Turn",
		"state":"$\ufffc9",
}}],
"com.apple.UniversalAccess.UASettingsShortcuts.UAToggleSmartInvertIntent":[{
	"name":"$\ufffc0 Smart Invert $\ufffc9",
	"param":{
		"operation":"$\ufffc0",
		"$\ufffc0":"Turn",
		"state":"$\ufffc9",
}}],
"com.apple.AccessibilityUtilities.AXSettingsShortcuts.AXToggleSwitchControlIntent":[{
	"name":"$\ufffc0 Switch Control $\ufffc9",
	"param":{
		"operation":"$\ufffc0",
		"$\ufffc0":"Turn",
		"state":"$\ufffc9",
}}],
"com.apple.UniversalAccess.UASettingsShortcuts.UAToggleSwitchControlIntent":[{
	"name":"$\ufffc0 Switch Control $\ufffc9",
	"param":{
		"operation":"$\ufffc0",
		"$\ufffc0":"Turn",
		"state":"$\ufffc9",
}}],
"com.apple.AccessibilityUtilities.AXSettingsShortcuts.AXSetSwitchControlSwitchIntent":[{ // 18
	"name":"$\ufffc0 $\ufffc9 Switch Control Switch",
	"param":{
		"operation":"$\ufffc0",
		"$\ufffc0":"Turn",
		"state":"$\ufffc9",
}}],
"com.apple.AccessibilityUtilities.AXSettingsShortcuts.AXToggleVoiceControlIntent":[{
	"name":"$\ufffc0 Voice Control $\ufffc9",
	"param":{
		"operation":"$\ufffc0",
		"$\ufffc0":"Turn",
		"state":"$\ufffc9",
}}],
"com.apple.UniversalAccess.UASettingsShortcuts.UAToggleVoiceControlIntent":[{
	"name":"$\ufffc0 Voice Control $\ufffc9",
	"param":{
		"operation":"$\ufffc0",
		"$\ufffc0":"Turn",
		"state":"$\ufffc9",
}}],
"com.apple.AccessibilityUtilities.AXSettingsShortcuts.AXToggleVoiceOverIntent":[{
	"name":"$\ufffc0 VoiceOver $\ufffc9",
	"param":{
		"operation":"$\ufffc0",
		"$\ufffc0":"Turn",
		"state":"$\ufffc9",
}}],
"com.apple.UniversalAccess.UASettingsShortcuts.UAToggleVoiceOverIntent":[{
	"name":"$\ufffc0 VoiceOver $\ufffc9",
	"param":{
		"operation":"$\ufffc0",
		"$\ufffc0":"Turn",
		"state":"$\ufffc9",
}}],
"com.apple.AccessibilityUtilities.AXSettingsShortcuts.AXToggleWhitePointIntent":[{
	"name":"$\ufffc0 White Point $\ufffc9",
	"param":{
		"operation":"$\ufffc0",
		"$\ufffc0":"Turn",
		"state":"$\ufffc9",
}}],
"com.apple.AccessibilityUtilities.AXSettingsShortcuts.AXToggleZoomIntent":[{
	"name":"$\ufffc0 Zoom $\ufffc9",
	"param":{
		"operation":"$\ufffc0",
		"$\ufffc0":"Turn",
		"state":"$\ufffc9",
}}],
"com.apple.UniversalAccess.UASettingsShortcuts.UAToggleZoomIntent":[{
	"name":"$\ufffc0 Zoom $\ufffc9",
	"param":{
		"operation":"$\ufffc0",
		"$\ufffc0":"Turn",
		"state":"$\ufffc9",
}}],
"com.apple.UniversalAccess.UASettingsShortcuts.UAToggleMouseKeysIntent":[{
	"name":"$\ufffc0 Mouse Keys $\ufffc9",
	"param":{
		"operation":"$\ufffc0",
		"$\ufffc0":"Turn",
		"state":"$\ufffc9",
		"$\ufffc9":{"default":0},
}}],
"com.apple.UniversalAccess.UASettingsShortcuts.UAToggleFullKeyboardAccessIntent":[{
	"name":"$\ufffc0 Full Keyboard Access $\ufffc9",
	"param":{
		"operation":"$\ufffc0",
		"$\ufffc0":"Turn",
		"state":"$\ufffc9",
		"$\ufffc9":{"default":0},
}}],
"com.apple.UniversalAccess.UASettingsShortcuts.UAToggleColorFiltersIntent":[{
	"name":"$\ufffc0 Color Filters $\ufffc9",
	"param":{
		"operation":"$\ufffc0",
		"$\ufffc0":"Turn",
		"state":"$\ufffc9",
		"$\ufffc9":{"default":0},
}}],
"com.apple.UniversalAccess.UASettingsShortcuts.UAToggleHeadPointerIntent":[{
	"name":"$\ufffc0 Head Pointer $\ufffc9",
	"param":{
		"operation":"$\ufffc0",
		"$\ufffc0":"Turn",
		"state":"$\ufffc9",
		"$\ufffc9":{"default":0},
}}],
"com.apple.UniversalAccess.UASettingsShortcuts.UAToggleSlowKeysIntent":[{
	"name":"$\ufffc0 Slow Keys $\ufffc9",
	"param":{
		"operation":"$\ufffc0",
		"$\ufffc0":"Turn",
		"state":"$\ufffc9",
		"$\ufffc9":{"default":0},
}}],
"com.apple.UniversalAccess.UASettingsShortcuts.UAToggleStickyKeysIntent":[{
	"name":"$\ufffc0 Skicky Keys $\ufffc9",
	"param":{
		"operation":"$\ufffc0",
		"$\ufffc0":"Turn",
		"state":"$\ufffc9",
		"$\ufffc9":{"default":0},
}}],
"com.apple.UniversalAccess.UASettingsShortcuts.UAToggleAlternatePointerActionsIntent":[{
	"name":"$\ufffc0 Alternate Pointer Actions $\ufffc9",
	"param":{
		"operation":"$\ufffc0",
		"$\ufffc0":"Turn",
		"state":"$\ufffc9",
		"$\ufffc9":{"default":0},
}}],
"com.apple.UniversalAccess.UASettingsShortcuts.UAToggleAccessibilityKeyboardIntent":[{
	"name":"$\ufffc0 Accessibility Keyboard $\ufffc9",
	"param":{
		"operation":"$\ufffc0",
		"$\ufffc0":"Turn",
		"state":"$\ufffc9",
		"$\ufffc9":{"default":0},
}}],
"com.apple.UniversalAccess.UASettingsShortcuts.UAToggleHoverTextIntent":[{ // 18
	"name":"$\ufffc0 Hover Text $\ufffc9",
	"param":{
		"operation":"$\ufffc0",
		"$\ufffc0":"Turn",
		"state":"$\ufffc9",
		"$\ufffc9":{"default":0},
}}],
"com.apple.UniversalAccess.UASettingsShortcuts.UAToggleHoverTypingIntent":[{ // 18
	"name":"$\ufffc0 Hover Typing $\ufffc9",
	"param":{
		"operation":"$\ufffc0",
		"$\ufffc0":"Turn",
		"state":"$\ufffc9",
		"$\ufffc9":{"default":0},
}}],
"com.apple.AccessibilityUtilities.AXSettingsShortcuts.AXSetLeftRightBalanceIntent":[{ 	// 17
	"name":"$\ufffc0 Left/Right Balance",
	"param":{
		"operation":"$\ufffc0",
		"$\ufffc0":"Toggle",
}}],
"is.workflow.actions.flashlight":[{
	"name":"$\ufffc0 Flashlight $\ufffc9",
	"group":"gBlue",
	"param":{
		"operation":"$\ufffc0",
		"$\ufffc0":"Turn",
		"state":"$\ufffc9",
}}],
"is.workflow.actions.airplanemode.set":[{
	"name":"$\ufffc0 Airplane Mode $\ufffc9",
	"group":"gOrange",
	"param":{
		"operation":"$\ufffc0",
		"$\ufffc0":"Turn",
		"OnValue":"$\ufffc9",
		"$\ufffc9":{"key":"OnValue"},
}}],
"is.workflow.actions.bluetooth.set":[{
	"name":"$\ufffc0 Bluetooth $\ufffc9",
	"group":"gBlue",
	"param":{
		"operation":"$\ufffc0",
		"$\ufffc0":"Turn",
		"OnValue":"$\ufffc9",
		"$\ufffc9":{"key":"OnValue"},
}}],
"is.workflow.actions.cellulardata.set":[{
	"name":"$\ufffc0 Cellular Data $\ufffc9",
	"group":"gGreen",
	"param":{
		"operation":"$\ufffc0",
		"$\ufffc0":"Turn",
		"OnValue":"$\ufffc9",
		"$\ufffc9":{"key":"OnValue"},
}}],
"is.workflow.actions.lowpowermode.set":[{
	"name":"$\ufffc0 Low Power Mode $\ufffc9",
	"group":"gOrange",
	"param":{
		"operation":"$\ufffc0",
		"$\ufffc0":"Turn",
		"OnValue":"$\ufffc9",
		"$\ufffc9":{"key":"OnValue"},
}}],
"is.workflow.actions.orientationlock.set":[{
	"name":"$\ufffc0 Orientation Lock $\ufffc9",
	"group":"gRed",
	"param":{
		"operation":"$\ufffc0",
		"$\ufffc0":"Turn",
		"OnValue":"$\ufffc9",
		"$\ufffc9":{"key":"OnValue"},
}}],
"is.workflow.actions.appearance":[{
	"name":"$\ufffc0 Appearance $\ufffc9",
	"group":"gBlue",
	"param":{
		"operation":"$\ufffc0",
		"$\ufffc0":"Turn",
		"style":"$\ufffc9",
		"$\ufffc9":{"key":"style","default":"dark","dict":{"dark":"dark", "light":"light"}},
}}],
"is.workflow.actions.wifi.set":[{
	"name":"$\ufffc0 Wi-Fi $\ufffc9",
	"group":"gBlue",
	"param":{
		"operation":"$\ufffc0",
		"$\ufffc0":"Turn",
		"OnValue":"$\ufffc9",
		"$\ufffc9":{"key":"OnValue"},
}}],
"is.workflow.actions.dnd.getfocus":[{ // 16
	"name":"Get Current Focus",
}],
"is.workflow.actions.dnd.set":[{
	"name":"$\ufffc0 Focus $\ufffc9",
	"param":{
		"Operation":"$\ufffc0",
		"$\ufffc0":"Turn",
		"Enabled":"$\ufffc9",
		"$\ufffc9":{"key":"Enabled","default":0},
}}],
"is.workflow.actions.cellular.rat.set":[{
	"name":"Set Voice & Data Mode to $\ufffc0 on $\ufffc1 (< iOS 17)",
	"group":"gGreen",
	"param":{
		"ratMode":"$\ufffc0",
		"sim":"$\ufffc1",
}}],
"com.apple.ShortcutsActions.SetVoiceDataModeAction":[{ // 17
	"name":"Set Voice & Data Mode to $\ufffc7 on $\ufffc8",
	"group":"gGreen",
	"param":{
		"$\ufffc7":"ratMode.title.key",
		"$\ufffc8":"sim.title.key",
		"ratMode":"$\ufffc9",
		"sim":"$\ufffc9",
}}],
"com.apple.mobilecal.SetCalendarFocusConfiguration":[{ // 16
	"name":"$\ufffc0 Calendar Focus Filter",
	"param":{
		"Mode":"$\ufffc0",
		"$\ufffc0":"Set",
}}],
"com.apple.iCal.SetCalendarFocusConfiguration":[{ // 16
	"name":"$\ufffc0 Calendar Focus Filter",
	"param":{
		"Mode":"$\ufffc0",
		"$\ufffc0":"Set",
}}],
"com.apple.mobilemail.MailFocusConfigurationAction":[{ // 16
	"name":"$\ufffc0 Mail Focus Filter",
	"param":{
		"Mode":"$\ufffc0",
		"$\ufffc0":"Set",
}}],
"com.apple.mail.MailFocusConfigurationAction":[{ // 16
	"name":"$\ufffc0 Mail Focus Filter",
	"param":{
		"Mode":"$\ufffc0",
		"$\ufffc0":"Set",
}}],
"com.apple.MobileSMS.ConversationListFocusFilterAction":[{ // 16
	"name":"$\ufffc0 Messages Focus Filter",
	"param":{
		"Mode":"$\ufffc0",
		"$\ufffc0":"Set",
}}],
"com.apple.mobilesafari.OpenTabGroupForFocus":[{ // 16
	"name":"$\ufffc0 Safari Focus Filter",
	"param":{
		"Mode":"$\ufffc0",
		"$\ufffc0":"Set",
}}],
"com.apple.Safari.OpenTabGroupForFocus":[{ // 16
	"name":"$\ufffc0 Safari Focus Filter",
	"param":{
		"Mode":"$\ufffc0",
		"$\ufffc0":"Set",
}}],
"com.apple.Music.MusicPrivacyFocusFilter":[{ // 18
	"name":"$\ufffc0 Music Focus Filter",
	"param":{
		"Mode":"$\ufffc0",
		"$\ufffc0":"Set",
}}],
"is.workflow.actions.personalhotspot.set":[{ // 16
	"name":"$\ufffc0 Personal Hotspot $\ufffc9",
	"group":"gGreen",
	"param":{
		"operation":"$\ufffc0",
		"$\ufffc0":"Turn",
		"OnValue":"$\ufffc9",
		"$\ufffc9":{"key":"OnValue"},
}}],
"is.workflow.actions.personalhotspot.password.set":[{ // 17
	"name":"Set Hotspot Password to $\ufffc0",
	"group":"gGreen",
}],
"is.workflow.actions.personalhotspot.password.get":[{ // 17
	"name":"Get Hotspot Password",
	"group":"gGreen",
}],
"com.apple.ShortcutsActions.ResetCellularDataStatisticsAction":[{ // 17
	"name":"Reset Cellular Data Statistics",
	"group":"gGreen",
}],
"com.apple.ShortcutsActions.SetDataRoamingAction":[{ // 17
	"name":"$\ufffc0 Data Roaming $\ufffc9 for $\ufffc8",
	"group":"gGreen",
	"param":{
		"operation":"$\ufffc0",
		"$\ufffc0":"Turn",
		"state":"$\ufffc9",
		"$\ufffc8":"plan.title.key",
		"plan":"$\ufffc9",
}}],
"com.apple.ShortcutsActions.SetDefaultCellularPlanAction":[{ // 17
	"name":"Set Default $\ufffc0 Line to $\ufffc8",
	"group":"gGreen",
	"param":{
		"type":"$\ufffc0",
		"$\ufffc0":"Voice",
		"$\ufffc8":"plan.title.key",
		"plan":"$\ufffc9",
}}],
"com.apple.ShortcutsActions.ToggleCellularPlanAction":[{ // 17
	"name":"$\ufffc0 $\ufffc8 Cellular Plan $\ufffc9",
	"group":"gGreen",
	"param":{
		"operation":"$\ufffc0",
		"$\ufffc0":"Turn",
		"state":"$\ufffc9",
		"$\ufffc8":"plan.title.key",
		"plan":"$\ufffc9",
}}],
"com.apple.ShortcutsActions.SetSilentModeAction":[{ // 17
	"name":"$\ufffc0 Silent Mode $\ufffc9",
	"group":"gRed",
	"param":{
		"operation":"$\ufffc0",
		"$\ufffc0":"Turn",
		"state":"$\ufffc9",
}}],
"com.apple.ShortcutsActions.ShowControlCenterAction":[{ // 18.1
	"name":"$\ufffc0 Control Center",
	"param":{
		"operation":"$\ufffc0",
		"$\ufffc0":"Show",
}}],
"com.apple.AccessibilityUtilities.AXSettingsShortcuts.AXToggleColorFiltersIntent":[{ // 16
	"name":"$\ufffc0 Color Filters $\ufffc9",
	"param":{
		"operation":"$\ufffc0",
		"$\ufffc0":"Turn",
		"state":"$\ufffc9",
}}],
"com.apple.AccessibilityUtilities.AXSettingsShortcuts.AXToggleLiveCaptionsIntent":[{ // 16
	"name":"$\ufffc0 Live Captions $\ufffc9",
	"param":{
		"operation":"$\ufffc0",
		"$\ufffc0":"Turn",
		"state":"$\ufffc9",
}}],
"com.apple.NanoSettings.NPRFSetAlwaysOnIntent":[{ // 16
	"name":"$\ufffc0 Apple Watch Always On $\ufffc9",
	"param":{
		"operation":"$\ufffc0",
		"$\ufffc0":"Turn",
		"state":"$\ufffc9",
}}],
"com.apple.NanoSettings.NPRFSetAutoLaunchAudioAppsIntent":[{ // 16
	"name":"$\ufffc0 Apple Watch Auto-Launch Audio Clips $\ufffc9",
	"param":{
		"operation":"$\ufffc0",
		"$\ufffc0":"Turn",
		"state":"$\ufffc9",
}}],
"com.apple.NanoSettings.NPRFSetFlashLightIntent":[{ // 16
	"name":"$\ufffc0 Apple Watch Flashlight $\ufffc9",
	"param":{
		"operation":"$\ufffc0",
		"$\ufffc0":"Turn",
		"state":"$\ufffc9",
}}],
"com.apple.NanoSettings.NPRFSetSchoolTimeIntent":[{ // 16
	"name":"$\ufffc0 Apple Watch Schooltime $\ufffc9",
	"param":{
		"operation":"$\ufffc0",
		"$\ufffc0":"Turn",
		"state":"$\ufffc9",
}}],
"com.apple.NanoSettings.NPRFSetSilentModeIntent":[{ // 16
	"name":"$\ufffc0 Apple Watch Silent Mode $\ufffc9",
	"param":{
		"operation":"$\ufffc0",
		"$\ufffc0":"Turn",
		"state":"$\ufffc9",
}}],
"com.apple.NanoSettings.NPRFSetTheaterModeIntent":[{ // 16
	"name":"$\ufffc0 Apple Watch Theater Mode $\ufffc9",
	"param":{
		"operation":"$\ufffc0",
		"$\ufffc0":"Turn",
		"state":"$\ufffc9",
}}],
"com.apple.NanoSettings.NPRFSetWakeOnWristRaiseIntent":[{ // 16
	"name":"$\ufffc0 Apple Watch Wake on Wrist Raise $\ufffc9",
	"param":{
		"operation":"$\ufffc0",
		"$\ufffc0":"Turn",
		"state":"$\ufffc9",
}}],
"com.apple.NanoSettings.NPRFSetWaterLockIntent":[{ // 16
	"name":"$\ufffc0 Apple Watch Water Lock $\ufffc9",
	"param":{
		"operation":"$\ufffc0",
		"$\ufffc0":"Turn",
		"state":"$\ufffc9",
}}],
"is.workflow.actions.display.always-on.set":[{ 	// 16.4
	"name":"$\ufffc0 Always On Display $\ufffc9",
	"param":{
		"operation":"$\ufffc0",
		"$\ufffc0":"Turn",
		"OnValue":"$\ufffc9",
		"$\ufffc9":{"key":"OnValue"},
}}],
"is.workflow.actions.nightshift.set":[{ 	// 16.4
	"name":"$\ufffc0 Night Shift $\ufffc9",
	"group":"gOrange",
	"param":{
		"operation":"$\ufffc0",
		"$\ufffc0":"Turn",
		"OnValue":"$\ufffc9",
		"$\ufffc9":{"key":"OnValue"},
}}],
"is.workflow.actions.truetone.set":[{ 	// 16.4
	"name":"$\ufffc0 True Tone $\ufffc9",
	"group":"gBlue",
	"param":{
		"operation":"$\ufffc0",
		"$\ufffc0":"Turn",
		"OnValue":"$\ufffc9",
		"$\ufffc9":{"key":"OnValue"},
}}],
"is.workflow.actions.announcenotifications.set":[{ 	// 16.4
	"name":"$\ufffc0 Announce Notifications $\ufffc9",
	"param":{
		"operation":"$\ufffc0",
		"$\ufffc0":"Turn",
		"OnValue":"$\ufffc9",
		"$\ufffc9":{"key":"OnValue"},
}}],
"is.workflow.actions.silenceunknowncallers.set":[{ 	// 16.4
	"name":"$\ufffc0 Silence Unknown Calls $\ufffc9",
	"group":"gGreen",
	"param":{
		"operation":"$\ufffc0",
		"$\ufffc0":"Turn",
		"OnValue":"$\ufffc9",
		"$\ufffc9":{"key":"OnValue"},
}}],
"is.workflow.actions.stagemanager.set":[{ 	// 16.4
	"name":"$\ufffc0 Stage Manager $\ufffc9",
	"group":"gBlue",
	"param":{
		"operation":"$\ufffc0",
		"$\ufffc0":"Turn",
		"state":"$\ufffc9",
}}],
"com.apple.AccessibilityUtilities.AXSettingsShortcuts.AXToggleAutoAnswerCallsIntent":[{ 	// 16.4
	"name":"$\ufffc0 Auto-Answer Calls $\ufffc9",
	"group":"gGray",
	"param":{
		"operation":"$\ufffc0",
		"$\ufffc0":"Turn",
		"state":"$\ufffc9",
}}],
"com.apple.mobilenotes.ChangeSettingLinkAction":[{ 	// 18.4
	"name":"Set Notes Settings",
}],
"com.apple.VoiceMemos.ChangeRecordingPlaybackSetting":[{ 	// 18.4
	"name":"Set Recording Playback Settings",
}],
"com.apple.iBooks.WFAppSettingEntityUpdaterAction":[{ 	// 18.4
	"name":"Set Books Settings",
}],
"com.apple.mobilecal.WFAppSettingEntityUpdaterAction":[{ 	// 18.4
	"name":"Set Calendar Settings",
}],
"com.apple.freeform.WFAppSettingEntityUpdaterAction":[{ 	// 18.4
	"name":"Set Freeform Settings",
}],
"com.apple.Maps.WFAppSettingEntityUpdaterAction":[{ 	// 18.4
	"name":"Set Maps Settings",
}],
"com.apple.news.WFAppSettingEntityUpdaterAction":[{ 	// 18.4
	"name":"Set News Settings",
}],
"com.apple.reminders.WFAppSettingEntityUpdaterAction":[{ 	// 18.4
	"name":"Set Reminders Settings",
}],
"com.apple.mobilesafari.WFAppSettingEntityUpdaterAction":[{ 	// 18.4
	"name":"Set Safari Settings",
}],
"com.apple.tv.WFAppSettingEntityUpdaterAction":[{ 	// 18.4
	"name":"Set TV Settings",
}],
"com.apple.VoiceMemos.WFAppSettingEntityUpdaterAction":[{ 	// 18.4
	"name":"Set Voice Memos Settings",
}],
"com.apple.weather.WFAppSettingEntityUpdaterAction":[{ 	// 18.4
	"name":"Set Weather Settings",
}],
"com.apple.iBooks.WFGetAppSettingAction":[{ 	// 18.4}
	"name":"Get Books Settings",
}],
"com.apple.mobilecal.WFGetAppSettingAction":[{ 	// 18.4}
	"name":"Get Calendar Settings",
}],
"com.apple.freeform.WFGetAppSettingAction":[{ 	// 18.4
	"name":"Get Freeform Settings",
}],
"com.apple.Maps.WFGetAppSettingAction":[{ 	// 18.4
	"name":"Get Maps Settings",
}],
"com.apple.news.WFGetAppSettingAction":[{ 	// 18.4
	"name":"Get News Settings",
}],
"com.apple.reminders.WFGetAppSettingAction":[{ 	// 18.4}
	"name":"Get Reminders Settings",
}],
"com.apple.mobilesafari.WFGetAppSettingAction":[{ 	// 18.4}
	"name":"Get Safari Settings",
}],
"com.apple.tv.WFGetAppSettingAction":[{ 	// 18.4
	"name":"Get TV Settings",
}],
"com.apple.VoiceMemos.WFGetAppSettingAction":[{ 	// 18.4
	"name":"Get Voice Memos Settings",
}],
"com.apple.weather.WFGetAppSettingAction":[{ 	// 18.4
	"name":"Get Weather Settings",
}],
"is.workflow.actions.openpasswords":[{ 	// 17
	"name":"Show Passwords",
}],
"is.workflow.actions.connecttoservers":[{
	"name":"Connect to Servers $\ufffc0",
}],
"is.workflow.actions.mountdiskimage":[{
	"name":"Mount Disk Image $\ufffc0",
}],
"is.workflow.actions.ejectdisk":[{
	"name":"Eject Disk $\ufffc0",
}],
"is.workflow.actions.makediskimage":[{
	"name":"Make Disk Image with $\ufffc0",
}],
"is.workflow.actions.movewindow":[{
	"name":"Move Window $\ufffc0 to $\ufffc1",
	"param":{
		"WFWindow":"$\ufffc0",
		"WFPosition":"$\ufffc1",
		"$\ufffc1":"Center",
}}],
"is.workflow.actions.resizewindow":[{
	"name":"Resize Window $\ufffc0 to $\ufffc1",
	"param":{
		"WFWindow":"$\ufffc0",
		"WFConfiguration":"$\ufffc1",
		"$\ufffc1":"Fit Screen",
}}],
"is.workflow.actions.splitscreen":[{
	"name":"Split Screen between $\ufffc0 and $\ufffc1",
	"param":{
		"WFPrimaryAppIdentifier":"$\ufffc0",
		"WFSecondaryAppIdentifier":"$\ufffc1",
}}],
"is.workflow.actions.startscreensaver":[{
	"name":"Start Screen Saver",
}],
"is.workflow.actions.getipaddress":[{
	"name":"Get Current IP Address",
	"group":"gBlue",
}],
"is.workflow.actions.getwifi":[{
	"name":"Get Network Details of $\ufffc0",
	"group":"gBlue",
	"param":{
		"WFNetworkDetailsNetwork":"$\ufffc0",
		"$\ufffc0":"Wi-Fi",
}}],
"is.workflow.actions.vpn.set":[{ 	// 16.4
	"name":"$\ufffc0 VPN",
	"group":"gBlue",
	"param":{
		"WFVPNOperation":"$\ufffc0",
		"$\ufffc0":"Connect",
}}],
"is.workflow.actions.watchmedo":[{
	"name":"Watch Me Do",
}],
"com.apple.TVRemoteUIService.LaunchScreenSaverIntent":[{
	"name":"Launch Screen Saver on Apple TV",
}],
"com.apple.TVRemoteUIService.LaunchApplicationIntent":[{
	"name":"Open App on Apple TV",
}],
"com.apple.TVRemoteUIService.PauseContentIntent":[{
	"name":"Play/Pause Apple TV",
	"param":{
		"mediaCommand":"$\ufffc0",
		"$\ufffc0":"Play/Pause",
}}],
"com.apple.TVRemoteUIService.LaunchRemoteIntent":[{
	"name":"Show Remote Control",
}],
"com.apple.TVRemoteUIService.SleepAppleTVIntent":[{
	"name":"Sleep Apple TV",
}],
"com.apple.TVRemoteUIService.WakeAppleTVIntent":[{
	"name":"Wake Apple TV",
}],
"com.apple.TVRemoteUIService.ToggleCaptionsIntent":[{ 	// 17
	"name":"$\ufffc0 Captions for Apple TV",
	"param":{
		"toggle":"$\ufffc0",
		"$\ufffc0":"Turn",
}}],
"com.apple.TVRemoteUIService.ToggleSystemAppearanceIntent":[{ 	// 17
	"name":"Set $\ufffc0 Mode on Apple TV",
	"param":{
		"appearanceToggle":"$\ufffc0",
		"$\ufffc0":"Light",
}}],
"com.apple.TVRemoteUIService.ReduceLoudSoundsIntent":[{ 	// 17
	"name":"Set Reduce Loud Sounds $\ufffc9 Mode on Apple TV",
	"param":{
		"toggle":"$\ufffc9",
}}],
"com.apple.TVRemoteUIService.LaunchRemoteIntent":[{ 	// 17
	"name":"Show Remote Control for Apple TV",
}],
"com.apple.TVRemoteUIService.SkipContentIntent":[{ 	// 17
	"name":"Skip $\ufffc0 $\ufffc1 Seconds on Apple TV",
	"param":{
		"skipCommand":"$\ufffc0",
		"$\ufffc0":"Forward",
		"skipDuration":"$\ufffc1",
		"$\ufffc1":"10",
}}],
"com.apple.TVRemoteUIService.SleepAppleTVIntent":[{ 	// 17
	"name":"Sleep Apple TV",
}],
"com.apple.TVRemoteUIService.WakeAppleTVIntent":[{ 	// 17
	"name":"Wake Apple TV",
}],
"com.apple.TVRemoteUIService.SwitchUserAccountIntent":[{ 	// 17
	"name":"Switch User Account on Apple TV",
}],
"com.apple.AccessibilityUtilities.AXSettingsShortcuts.AXStartRemoteWatchScreenIntent":[{ // 16
	"name":"Start Apple Watch Remote Screen",
}],
"com.apple.PBBridgeSupport.BridgeIntents.COSGetCurrentGizmoFaceIntent":[{ // 16
	"name":"Get Currently Active Watch Face",
}],
"com.apple.PBBridgeSupport.BridgeIntents.COSListGizmoFacesIntent":[{ // 16
	"name":"Get List of Watch Faces",
}],
"com.apple.PBBridgeSupport.BridgeIntents.COSSetGizmoFaceIntent":[{ // 16
	"name":"Set Acive Watch Face",
}],
"com.apple.NanoSettings.NPRFPingMyPhoneIntent":[{ // 16
	"name":"Ping My iPhone with Lights $\ufffc0",
	"param":{
		"state":"$\ufffc0",
		"$\ufffc0":"Off",
}}],
"com.apple.tips.CollectionOpenIntent":[{ // 17
	"name":"Open Tips Collection $\ufffc8",
	"param":{
		"$\ufffc8":"collection.title.key",
		"collection":"$\ufffc9",
}}],
"com.apple.helpviewer.CollectionOpenIntent":[{ // 18.1
	"name":"Open Tips Collection $\ufffc8",
	"param":{
		"$\ufffc8":"collection.title.key",
		"collection":"$\ufffc9",
}}],
"is.workflow.actions.giphy":[{
	"name":"Search Giphy GIFs",
}],
"is.workflow.actions.cloudapp.upload":[{
	"name":"Upload to CloudApp",
}],
"is.workflow.actions.evernote.append":[{
	"name":"Append to Evernote",
}],
"is.workflow.actions.evernote.delete":[{
	"name":"Delete Evernotes",
}],
"is.workflow.actions.evernote.get":[{
	"name":"Get Evernotes",
}],
"is.workflow.actions.evernote.getlink":[{
	"name":"Get Evernote Link",
}],
"is.workflow.actions.evernote.new":[{
	"name":"Create New Evernote",
}],
"is.workflow.actions.goodreader.open":[{
	"name":"Open in GoodReader",
}],
"is.workflow.actions.imgur.upload":[{
	"name":"Upload to Imgur",
}],
"is.workflow.actions.instapaper.add":[{
	"name":"Add to Instapaper",
}],
"is.workflow.actions.instapaper.get":[{
	"name":"Get Instapaper Bookmarks",
}],
"is.workflow.actions.lightroom.import":[{
	"name":"Import to Lightroom",
}],
"is.workflow.actions.pinboard.add":[{
	"name":"Add to Pinboard",
}],
"is.workflow.actions.pinboard.get":[{
	"name":"Get Pinboard Bookmarks",
}],
"is.workflow.actions.pocket.add":[{
	"name":"Add to Pocket",
}],
"is.workflow.actions.pocket.get":[{
	"name":"Get Items from Pocket",
}],
"is.workflow.actions.postonfacebook":[{
	"name":"Post on Facebook",
}],
"is.workflow.actions.properties.trello":[{
	"name":"Get Details of Trello Item",
}],
"is.workflow.actions.showinblindsquare":[{
	"name":"Open in BlindSquare",
}],
"is.workflow.actions.todoist.add":[{
	"name":"Add Todoist Item",
}],
"is.workflow.actions.trello.add.board":[{
	"name":"Create Trello Board",
}],
"is.workflow.actions.trello.add.card":[{
	"name":"Add Trello Card",
}],
"is.workflow.actions.trello.add.list":[{
	"name":"Create Trello List",
}],
"is.workflow.actions.trello.get":[{
	"name":"Get Trello Items",
}],
"is.workflow.actions.tumblr.post":[{
	"name":"Post to Tumblr",
}],
"is.workflow.actions.tweet":[{
	"name":"Tweet",
}],
"is.workflow.actions.wordpress.post":[{
	"name":"Post to WordPress",
}],
};

const condDict = {
"":"",
"0":"&lt;",
"1":"&lt;=",
"2":"&gt;",
"3":"&gt;=",
"4":"is",
"5":"is not",
"8":"begins with",
"9":"ends with",
"99":"contains",
"100":"has any value",
"101":"does not have any value",
"999":"does not contain",
"1000":"is in the next",
"1001":"is in the last",
"1002":"is today",
"1003":"is between"};

const filterDict = {
"Album":{"type":"Enumeration","default":"Recents"},
"Calendar":{"type":"Enumeration"},
"Folder":{"type":"Enumeration"},
"Group":{"type":"Enumeration"},
"Label":{"type":"Enumeration"},
"List":{"type":"Enumeration"},
"Media Kind":{"type":"Enumeration","default":"Movie"},
"Media Type":{"type":"Enumeration","default":"Image"},
"Orientation":{"type":"Enumeration","default":"Up"},
"Photo Type":{"type":"Enumeration","default":"HDR"},
"Priority":{"type":"Enumeration","default":"None"},
"Role":{"type":"Enumeration","default":"Unknown"},
"Source":{"type":"Enumeration"},
"Status":{"type":"Enumeration","default":"Accepted"},
"Type":{"type":"Enumeration","default":"Step"},
"Email Addresses":{"type":"Email"},
"Phone Number":{"type":"Phone"},
"Phone Numbers":{"type":"Phone"},
"Duration":{"type":"Number","unit":"Unit"},
"File Size":{"type":"Number","unit":"ByteCountUnit"},
};

const unitDict = {
"Unit":{
	"4":"years",
	"8":"months",
	"8192":"weeks",
	"16":"days",
	"32":"hours",
	"64":"minutes",
	"128":"seconds"},
"ByteCountUnit":{
	"1":"bytes",
	"2":"KB",
	"4":"MB",
	"8":"GB",
	"16":"TB",
	"32":"PB",
	"64":"EB",
	"128":"ZB"},
};

function mapNullUndef(a, b) { return (a == null || a == undefined) ? b : a; }

const ignore = ['UUID','GroupingIdentifier','WFControlFlowMode', 'AppIntentDescriptor'];
let udict = {};
let indent = 0;
let loopindex = [];
let repeatlevel = 0;
var gVarDict = {};
var gIndex;
var connected = false;
d.WFWorkflowActions.forEach((a,i) => { udict[a.WFWorkflowActionParameters.UUID] = i; });
let output = d.WFWorkflowActions.map((a,i) => {
	gIndex = i;
	let out = [];
	let param = mapNullUndef(a.WFWorkflowActionParameters, {});
	let name = a.WFWorkflowActionIdentifier;
	let id = idDict[name];
	let loop = false;
	let flow = 0;
	let adict = {};
	if (id) {
		if (id.length > 1) {
			loop = true;
			flow = param.WFControlFlowMode;
			if (flow) {
				out.push('</div>');
				indent--;
			} else {
				loopindex.unshift(i);
			}
		}
		adict = id[flow];
		name = adict.name;
		if (loop) {
			if (flow && (l0 = loopindex[0])<i-5) { name += `\u3000‚ñµ<span class="magic" onclick="magictap(${l0})">${l0}</span>`; }
			if (a.WFWorkflowActionIdentifier.startsWith('is.workflow.actions.repeat')) {
				if (flow) {
					if (repeatlevel > 1) { name = name.replace('Repeat', `Repeat[${repeatlevel}]`); }
					repeatlevel--;
				} else {
					repeatlevel++;
					if (repeatlevel > 1) { name = name.replace('Repeat', `Repeat[${repeatlevel}]`); }
				}
			} else if (a.WFWorkflowActionIdentifier === 'is.workflow.actions.conditional' && param.WFControlFlowMode == 0) {
				ignore.forEach(k => { delete param.k; });
				if (v = param.WFConditions?.Value) {
					let lines = [`<span class="box">${v.WFActionParameterFilterPrefix==0 ?'Any':'All'}</span> are true`];
					lines.push(...v.WFActionParameterFilterTemplates.map(a => ifCondition(a)));
					name += lines.join('<br/>\u3000');
					delete param.WFConditions;
				} else {
					name += ifCondition(param);
					delete param.WFCondition;
					delete param.WFInput;
				}
			}
		}
		if (a.WFWorkflowActionIdentifier === 'is.workflow.actions.getvalueforkey' && ['Value',undefined].includes(param.WFGetDictionaryValueType)) {
			name = name.replace('$\ufffc1', `Value for <span class="box">${gettext(param.WFDictionaryKey)}</span>`);
			delete param.WFDictionaryKey;
		} else if (a.WFWorkflowActionIdentifier === 'is.workflow.actions.getitemfromlist' && (s = param.WFItemSpecifier)) {
			if (s === 'Item At Index') {
				name = name.replace('$\ufffc1', `$\ufffc1 <span class="box">${mapNullUndef(gettext(param.WFItemIndex), '')}</span>`);
				delete param.WFItemIndex;
			} else if (s === 'Items in Range') {
				name = name.replace('$\ufffc1', `$\ufffc1 <span class="box">${mapNullUndef(gettext(param.WFItemRangeStart), '')}</span> to <span class="box">${mapNullUndef(gettext(param.WFItemRangeEnd), '')}</span>`);
				delete param.WFItemRangeStart;
				delete param.WFItemRangeEnd;
			}
		} if (a.WFWorkflowActionIdentifier === 'is.workflow.actions.runworkflow' && !param.WFWorkflow?.isSelf && typeof(param.WFWorkflowName) === 'string' && typeof(param.WFWorkflow?.workflowName) === 'string' && (param.WFWorkflowName !== param.WFWorkflow.workflowName || !sNames.includes(param.WFWorkflowName))) {
			name = name.replace('$\ufffc1', `<span class="box" style="color:red;font-weight:bold">${gettext(param.WFWorkflowName)}</span>`);
			delete param.WFWorkflowName;
		}
	} else if (['is.workflow.actions.useractivity.open', 'is.workflow.actions.sirikit.donation.handle'].includes(a.WFWorkflowActionIdentifier)) {
		let p = (a.WFWorkflowActionIdentifier === 'is.workflow.actions.useractivity.open') ? 'UserActivityData' : 'IntentData';
		if (pl = param[p]) {
			if ((idx = pl.substring(0,100).indexOf('<')) > 0) {
				name = pl.substring(0,idx) + ` (${name})`;
				param[p] = pl.substring(idx);
			}
		}
	} else if (!name.startsWith('is.workflow.actions.') && !name.startsWith('com.apple.')) {
		name = name.replace(/.+?\..+?\.(.+?)\.(.*)/, '$1 &gt; $2');
	}
	if (!adict.param) { adict.param = {}; }
	let p = [];
	let isbig = false;
	for (const [k, v] of Object.entries(param)) {
		if (!ignore.includes(k)) {
			let pstr = k;
			if (k === 'WFInput') {
				if (name.includes('$\ufffc0')) { pstr = '$\ufffc0'; }
			}
			if (adict.param[k]) { pstr = adict.param[k]; }
			switch (pstr[0]) {
				case '$':
					if (pstr !== '$\ufffc9') { name = name.replace(pstr,`<span class="box">${gettext(v)}</span>`); }
					break;
				case '\u0023':
					let t = gettext(v);
					if (mobile) {
						t = truncate(t, 1500, JSON.stringify(v).length);
					} else {
						isbig = !expand && (t.length > 10000 || mapNullUndef(t.match(/\n/g), []).length > 80);
					}
					p.push(`\n<div class="col2">${t}</div>`);
					break;
				default:
					switch (pstr) {
					 	case 'CustomOutputName':
							name += ` <b>\u3000‚ûî ${v}</b>`;
							break;
						default:
							pstr = k.replace(/^WF/,'');
							let t = gettext(v);
							if (!expand && t.length > 1000) { isbig = true; }
							p.push(`\n<div class="row"><div class="col1">${pstr}</div><span style="display:none">: </span><div class="col2">${t}</div></div>`);
					}
			}
		}
	}
	name = name.replace('$\ufffc9', m => {
		let d = {'key':'state', 'default':1, 'dict':{'0':'Off', '1':'On', 'false':'Off', 'true':'On', 'off':'Off', 'on':'On'}, ...adict.param[m]};
		let k = param[d.key];
		if (name.substring(0,5) === 'Turn ' || ['turn','set',undefined].includes(param.operation)) {
			if (k == undefined) { return d.dict[d.default]; }
			return `<span class="box">${typeof(k)==='object'?gettext(k):d.dict[k]}</span>`;
		}
		if (k != undefined) {
			p.push(`\n<div class="row"><div class="col1">${d.key}</div><span style="display:none">: </span><div class="col2">${typeof(k)==='object'?gettext(k):d.dict[k]}</div></div>`);
		}
		return '';
	}).replace(/\$\ufffc[78]/g, m => {
		let keys = adict.param[m].split('.');
		if (Array.isArray(kk = param[keys[0]])) {
			keys.shift();
			return kk.map(k => `<span class="box">${keys.reduce((a, b) => a?.[b], k)}</span>`).join(' ');
		} else {
			if (kk?.Value) { return `<span class="box">${gettext(kk)}</span>`; }
			let k = keys.reduce((a, b) => a?.[b], param);
			//delete param[keys[0]];
			return k ? `<span class="box">${k}</span>` : mapNullUndef(adict.param[m+'0'], '<span class="box"></span>');
		}
	});
	for (let m of mapNullUndef(name.match(/\$\ufffc\d/g), [])) {
		name = name.replace(m, adict.param[m] || '<span class="box"></span>&nbsp;');
	}
	if (p.length || loop && flow != 2) {
		out.push(`\n<button class="button ${id ? mapNullUndef(adict.group, '') : (name.startsWith('is.workflow.actions.') || name.startsWith('com.apple.') ? 'gApple' : 'gUnknown')}${loop?' nonbottom'+(flow>0?' nontop':''):''}${indent?' inside':''}${isbig?' closed':''}" id="m${i}">\n${i} ${name.replace(/^(?:com\.apple\.|is\.workflow\.actions\.)/,'')}</button><div class="content${loop?' contentloop'+(['',' dotted',' dashed'][indent%3]):''}${indent?' inside':''}${a.WFWorkflowActionIdentifier==='is.workflow.actions.comment'?' commentcontent':''}"${isbig?' style="display:none"':''}>`);
		out = out.concat(p);
		if (!loop || flow == 2) {
			out.push('</div>');
		} else {
			indent++;
		}
	} else {
		out.push(`\n<button class="${id ? mapNullUndef(adict.group, '') : (name.startsWith('is.workflow.actions.') || name.startsWith('com.apple.') ? 'gApple' : 'gUnknown')}${loop&&flow>0?' nontop':''}${indent?' inside':''}" id="m${i}">\n${i} ${name.replace(/^(?:com\.apple\.|is\.workflow\.actions\.)/,'')}</button>`);
	}
	if (loop && flow) {
		if (flow == 1) { loopindex[0] = i; } else { loopindex.shift(); }
	}
	return out.join('').replace(new RegExp(`"magic" onclick="magictap\\(${i-1}\\)"`, 'g'), '"var"');
}).map((t,i) => {
	if (connected) {
		t = t.replace('<button', '<hr><button');
		connected = false;
	}
	if (gVarDict[i]) {
		let d = [...new Set(gVarDict[i])];
		if (d.length == 1 && d[0] == i+1) {
			connected = true;
			return t.replace('</button>', `\u3000¬ª</button>`);
		} else {
			let l = d.map(a => (a == i+1) ? `<i>${(connected = true) ? a : a}</i>` : `<span class="magic" onclick="magictap(${a})">${a}</span>`).join(' ');
			return t.replace('</button>', `\u3000¬ª ${l}</button>`);
		}
	}
	return t;
}).join('').replace(/(<button class=")button (gGray nonbottom(?: nontop)?)(?: closed)?((?:(?!<button).)+?)<div class="content contentloop[^>]+><\/div>/gs,'$1$2$3').replace(/<\/b><b>/g,'').replace(/\n<\/(div|span)>/g, '\n\u200b</$1>').replace(/<\/button>\s*<button/g, '<\/button><div></div>\n<button');

let actionCount = d.WFWorkflowActions.length;
delete d.WFWorkflowActions;
let paramstr = JSON.stringify(Object.keys(d).sort().reduce((o,k)=>(o[k]=d[k],o),{}),null,3).replace(/^\{\n|^\}$|^   /gm, '').replace(/(WFWorkflowMinimumClientVersion(?:String": "|": ))([3-9]\d\d\d)/g, '$1<span style="color:red">$2</span>');
paramstr = paramstr.replace(/"ActionIndex": (\d+)/g, '"ActionIndex": <span class="magic" onclick="magictap($1)"><b>$1</b></span>');

let shortcuttitle = (shortcutname.length > shortcutname.normalize().length) ? shortcutname.split('').join('\u2009') : shortcutname;
let params = `<button class="button gParams"><b>${shortcuttitle}</b> (${actionCount > 29 ? '<span class="magic" onclick="magictap('+(actionCount-1)+')">'+actionCount+'</span>' : actionCount} actions, ${fileSize})</button><div class="content">
<div class="col2">${paramstr}</div></div>`;

document.body.textContent = encodeURIComponent(params+output);


function ifCondition(param) {
	let cond = mapNullUndef(param.WFCondition?.toString(), '');
	let out = `<span class="box">${condDict[cond]}</span>`;
	if (cond !== '') {
		if (cond !== '100' && cond !== '101' && cond !== '1002') {
			let paramk = Object.keys(param);
			let m = [];
			if (cond === '1003') {
				m = [['WFNumberValue','WFAnotherNumber'],['WFDate','WFAnotherDate'],['WFDuration','WFAnotherDuration'],['WFMeasurement','WFAnotherMeasurement']].filter(c => paramk.includes(c[0]) && paramk.includes(c[1]));
				if (m.length == 1) {
					out += ` <span class="box">${gettext(param[m[0][0]])}</span> and <span class="box">${gettext(param[m[0][1]])}</span>`;
					delete param[m[0][0]];
					delete param[m[0][1]];
				}
			} else {
				isbool = cond === '4' &&
					(b = param.WFInput?.Variable?.Value?.Aggrandizements) &&
					(b[0].CoercionItemClass === 'WFBooleanContentItem' ||
					b.some(a => ['Is Me','Is a Screenshot','Is Hidden','Is Favorite','Is Explicit','Is Cloud Item','Has Album Artwork','Is Streamable','Is Universal','Supports Game Center','Has Photo','enabled'].includes(a.PropertyName)));
				if (isbool) {
					out = 'is true';
				} else {
					m = ['WFConditionalActionString','WFNumberValue','WFMeasurement','WFDuration','WFDate','WFEnumeration','WFLinkEnumeration'].filter(c => paramk.includes(c));
					if (m.length == 1) {
						out += ` <span class="box">${isNaN(parseInt(param.WFLinkEnumeration)) ? gettext(param[m[0]]) : ['Portrait','Portrait Upside Down','Landscape Left','Landscape Right','Face Up','Face Down','Unknown'][parseInt(param.WFLinkEnumeration)]}</span>`;
						delete param[m[0]];
					}
				}
			}
			if (m.length > 1) {
				out += ' <span class="box" style="display:inline-grid; line-height:normal;">';
				m.forEach(a => {
					out += `<div class="row"><div class="col1">${a.slice(2)}</div>\n<div class="col2">${gettext(param[a])}</div></div>`;
					delete param[a];
				});
				out += '</span>';
			}
		}
	}
	return `<span class="box">${gettext(mapNullUndef(param.WFInput, ''))}</span> ` + out;
}

function gettext(i) {
	switch (typeof(i)) {
		case 'object':
			if (Array.isArray(i)) {
				return ('[' + i.map(a => gettext(a)).join(',\n') + ']').replace(/<span class=\\"[^>]+>/g, m => m.replace(/\\"/g,'"'));
			} else {
				if (i.Type) {
					if (i.Type === 'Variable') {
						i = i.Variable;
					} else {
						return '?type?'+i.Type;
					}
				}
				if (Number.isInteger(i.WFItemType)) {
					return stringifyMap(getvalue(i)).replace(/(  +|^)\{\n +/g,'$1{  ').replace(/( *)(\{.*)\n\1\}/g,'$1$2 }');
				}
				let t = mapNullUndef(i.WFSerializationType, '');
				switch (t) {
					case 'WFTextTokenAttachment':
						return variablename(i.Value);
					case 'WFTextTokenString':
						return stringify(i.Value);
					case 'WFDictionaryFieldValue':
						return stringifyMap(getdict(i.Value)).replace(/<span class=\\"[^>]+>/g, m => m.replace(/\\"/g,'"')).replace(/(  +|^)\{\n +/g,'$1{  ').replace(/( *)(\{.*)\n\1\}/g,'$1$2 }');
					case 'WFQuantityFieldValue':
						return variablename(mapNullUndef(i.Value.Magnitude, '')) + ' ' + i.Value.Unit;
					case 'WFINSpeakableStringSubstitutableState':
						return i.Value ? escapeStr(i.Value.DisplayString) : '';
					case 'WFNumberStringSubstitutableState':
					case 'WFDateSubstitutableState':
						return gettext(i.Value);
					case 'WFContactFieldValue':
						return '[' + (mapNullUndef(i.Value.WFContactFieldValues, [])).map(a => JSON.stringify(a).replace(/\{"__type__":"data","__value__":"([^"]*)"/g, (m,p1) => '"'+(new TextDecoder().decode(base64DecToArr(p1))).replace(/\n/g,'\n   ')+'"')).join(',\n') + ']';
					case 'WFContentPredicateTableTemplate':
						if (i.Value.WFActionParameterFilterTemplates?.[0]?.Property) return predicate(i.Value);
					default:
						if (i.string) { return stringify(i); }
						if (i['__type__'] === 'date') {
							return new Date(1000*i['__value__']).toLocaleString();
						}
						return escapeStr(JSON.stringify(i,null,3)).replace(/\\n/g,'\n').replace(/\\t/g,'\t').replace(/(  +|^)\{\n +/g,'$1{  ').replace(/( *)(\{.*)\n\1\}/g,'$1$2 }');
				}
			}
		case 'string': return escapeStr(i);
		default: return i;
	}
}

function b64ToUint6(nChr) {
	return nChr > 64 && nChr < 91 ?
		  nChr - 65
		: nChr > 96 && nChr < 123 ?
		  nChr - 71
		: nChr > 47 && nChr < 58 ?
		  nChr + 4
		: nChr === 43 ?
		  62
		: nChr === 47 ? 63 : 0;
}

function base64DecToArr(sBase64) {
	let
		sB64Enc = sBase64.replace(/[^A-Za-z0-9\+\/]/g, ""), nInLen = sB64Enc.length,
		nOutLen = nInLen * 3 + 1 >> 2,
		taBytes = new Uint8Array(nOutLen);

	for (let nMod3, nMod4, nUint24 = 0, nOutIdx = 0, nInIdx = 0; nInIdx < nInLen; nInIdx++) {
		nMod4 = nInIdx & 3;
		nUint24 |= b64ToUint6(sB64Enc.charCodeAt(nInIdx)) << 6 * (3 - nMod4);
		if (nMod4 === 3 || nInLen - nInIdx === 1) {
			for (nMod3 = 0; nMod3 < 3 && nOutIdx < nOutLen; nMod3++, nOutIdx++) {
				taBytes[nOutIdx] = nUint24 >>> (16 >>> nMod3 & 24) & 255;
			}
			nUint24 = 0;
		}
	}
	return taBytes;
}

function truncate(str, max, vsize) {
	let m = str.match(/<span.+?<\/span>/g);
	let n1 = 0;
	let s = str;
	if (m) {
		n1 = m.length;
		s = s.replace(/<span.+?<\/span>/g, '\ufffc');
	}
	if (s.length > max) {
		str = s.substring(0, max - 20);
		str += vsize ? `\n<b><i>(${vsize.toString().slice(0,-3)} kbytes; content truncated)</i></b>` : ' <b><i>(truncated)</i></b>';
		if (m) {
			let n2 = mapNullUndef(str.match(/\ufffc/g), []).length;
			for (let i=0; i<n2; i++) {
				str = str.replace('\ufffc', m[i]);
			}
			if (n1 > n2) {
				str += `${vsize?'\n':''}‚Ä¶‚Ä¶ ${m.slice(n2).join(', ')}`;
			}
		}
	}
	return str;
}

function predicate(v) {
	let filters = v.WFActionParameterFilterTemplates;
	let out = filters.length>1 ? `‚Ä¢ ${v.WFActionParameterFilterPrefix==0 ?'Any of':'All'} the following are true\n` : '';
	out += filters.map(f => {
		let p = mapNullUndef(f.Property, '');
		if (p.includes('Date') || p === 'Birthday') { return filtertext(f, {'type':'Date'}); }
		if (p.startsWith('Is ') || p.startsWith('Has ')) { return filtertext(f, {'type':'Bool'}); }
		let d = {'type':'String'};
		if (p !== 'Album' || !f.Values.String) { return filtertext(f, mapNullUndef(filterDict[p], d)); }
		return filtertext(f, d);
	}).join('\n');
	return out;
}

function filtertext(f, d) {
	let p = mapNullUndef(f.Property, '?prop?');
	let v = f.Values;
	let t = d.type;
	let o = mapNullUndef(condDict[f.Operator.toString()], '?op?');
	let out = p + ' ' + o + ' ';
	switch (t) {
		case 'Bool':
			return v.Bool ? p : p.replace(' ', ' Not ');
		case 'Enumeration':
			return out + (mapNullUndef(v.Enumeration ? gettext(v.Enumeration.Value) : v.Enumeration, mapNullUndef(d.default, '(default)')));
		case 'Date':
			if (f.Operator == 1002) { return out; }
			if (f.Operator == 1003) { return out + gettext(mapNullUndef(v.Date, '(now)')) + ' and ' + gettext(mapNullUndef(v.AnotherDate, '(now)')); }
			if (f.Operator > 999) {
				t = 'Number';
				d = {'unit':'Unit'};
			} else if ([null, undefined].includes(v.Date)) { v.Date = '(now)'; }
		default:
			out += gettext(mapNullUndef(v[t], mapNullUndef(v.Number, JSON.stringify(v))));
			if (u=d.unit) {
				let unitv = mapNullUndef(v[u]?.Value, mapNullUndef(v[u], ((p === 'Duration') ? 32 : 4)));
				return out + ' ' + unitDict[u][unitv.toString()];
			}
			return  out;
	}
}

function variablename(v) {
	if (typeof(v) !== 'object') { return escapeStr(JSON.stringify(v)); }
	let t = mapNullUndef(v.Type, '');
	switch (t) {
		case 'Variable':
			return '<span class="var"><b>['+v.VariableName + aggr(v);
		case 'ActionOutput':
			if ((u = v.OutputUUID) && Number.isInteger(i=udict[u])) {
				if (gVarDict[i]) {
					gVarDict[i].push(gIndex);
				} else {
					gVarDict[i] = [gIndex];
				}
				return `<span class="magic" onclick="magictap(${i})"><b>[${i} ` + v.OutputName + aggr(v);
			}
			return '<span class="var" style="color:red"><b>[? ' + v.OutputName + aggr(v);
		default:
			return '<span class="var"><b>[' + t.replace('ExtensionInput', 'Shortcut Input') + ((p=v.Prompt) ? ' ‚Äú</b>' + escapeStr(p) + '<b>‚Äù' : '') + aggr(v);
	}
}

function stringify(o) {
	let out = escapeStr(o.string);
	if (o.attachmentsByRange) {
		Object.entries(o.attachmentsByRange)
			.sort((a,b) => parseInt(a[0].substring(1)) - parseInt(b[0].substring(1)))
			.forEach(a => {
				out = out.replace('\ufffc', variablename(a[1]));
		});
	}
	return out;
}

function aggr(o) {
	let out = '';
	for (let a of mapNullUndef(o.Aggrandizements, [])) {
		switch (a.Type) {
			case 'WFCoercionVariableAggrandizement':
				let c = a.CoercionItemClass;
				out += ' as ' + c.slice(2, -11).replace('String', 'Text').replace('Workflow', 'Shortcut');
				break;
			case 'WFDictionaryValueVariableAggrandizement':
				out += `.${a.DictionaryKey}`;
				break;
			case 'WFPropertyVariableAggrandizement':
				out += '‚Äôs ' + (mapNullUndef(a.NegativePropertyName, a.PropertyName));
				break;
			default:
				delete a.Type;
				out += JSON.stringify(a).replace('WFDateFormatStyle','Date Style').replace('WFTimeFormatStyle','Time Style').replace('WFRelativeDateFormatStyle','Relative Style');
		}
	}
	return (out === '') ? `]</b></span>` : `</b>${out}<b>]</b></span>`;
}

function getdict(dict) {
	const out = new Map();
	for (const d of dict.WFDictionaryFieldValueItems) {
		let v = getvalue(d);
		out.set(stringify(d.WFKey.Value) + ' ' + Math.random().toString().replace('.',''), (mobile && typeof(v) === 'string') ? truncate(v, 150) : v);
	}
	return out;
}

function getvalue(d) {
	if (typeof d !== 'object') { return escapeStr(d); }
	let v = d.WFValue ? d.WFValue.Value : null;
	switch (d.WFItemType) {
		case 0: return stringify(v) + ((s=d.WFValue.Synonyms) ? ' <i>Synonyms</i>[' + s.map(a=>gettext(a)).join(', ') + ']' : '');
		case 1: return d.WFValue.WFSerializationType?.includes('Substitutable') ? variablename(v.Value) + ' <i>as Dictionary</i>' : getdict(v.Value);
		case 2: return d.WFValue.WFSerializationType?.includes('Substitutable') ? variablename(v.Value) + ' <i>as Array</i>' : v.map(getvalue);
		case 3: return stringify(v) + ' <i>as Number</i>';
		case 4: return v.Value ? variablename(v.Value) + ' <i>as Boolean</i>' : v;
		case 5: return variablename(v ? v.Value : {Type:'Choose'});
	}
}

function stringifyMap(o) {
	let px = '   ';
	if (typeof o === 'object') {
		if (Array.isArray(o)) return o.length ? '[\n'+ px + o.map(a=>stringifyMap(a)).join(',\n').replace(/\n/g,'\n'+px) + '\n]' : '[]';
		return (oo=Array.from(o.entries())).length ? '{\n' + px + oo.map(a=>stringifyMap(a[0]).replace(/ \d+"$/,'"')+': '+stringifyMap(a[1])).join(',\n').replace(/\n/g,'\n'+px) + '\n' + '}' : '{}';
	}
	if ((s=JSON.stringify({a:o}).slice(5,-1).replace(/<b>\\\\u/g,'<b>\\u')).endsWith('</i>"')) {
		return s.includes('<span') ? s.slice(1,-1) : s.replace(/^"| <i>as (Number|Boolean)<\/i>"$/g, '');
	} else {
		return s;
	}
}

function escapeStr(s) {
	return s.replace(/&/g,'&amp;').replace(/</g,'&lt;')
		.replace(/[\0-\x08\x0B-\x1F\x7F-\xA0\xAD\u2000-\u200B\u2028\u2029\u202F\u205F-\u2064\u2800\u3000]/g, c=>'<b>\\u'+c.charCodeAt(0).toString(16).toUpperCase().padStart(4,'0')+'</b>')
		.replace(/[\x09\x20]+$/gm, c=>c.replace(/\x09/g,'<b>\\u{tab}</b>')
		.replace(/\x20/g,'<b>\\u{space}</b>'));
}"""
text("${095B022C-F7D0-40FE-A73B-2BE3765FEBBF}")
		url(url: "data:text/html;charset=utf-8,<body/><script>const mobile='${command}'.includes('trim'),expand='${ActionOutput}'.includes('expand')||'${command}'.startsWith('üîçüîç'),shortcutname=${ActionOutput}.name,d=${sNames},fileSize='${ActionOutput}',sNames=${src}.n;${ActionOutput}</script>") >> url 1
		decodeURL(url: "${URL.as(RichText)}") >> decodeURL 1
		if(command .beginsWith "üîç  ") { >> IFResult 21
var 63EAA902-633B-4439-B0AD-7774477D72DB = """<!DOCTYPE html><html><head><meta charset="utf-8">
<meta name="viewport" content="width=device-width">
<meta name="format-detection" content="telephone=no,date=no">
<title>Ôøº</title>
<style>
body {
	font-family: system-ui;
	font-size: 0.95em;
	margin-top: 1rem;
	margin-bottom: calc(1rem + env(safe-area-inset-bottom));
	word-break: break-word;
}

button {
	color: #000;
	background-color: #e4e4ff;
	width: 100%;
	font-size: 1em;
	font-weight: normal;
	line-height: 1.8;
	text-align: left;
	margin: 4px 0;
	padding: 1px 8px;
	border: 1px #aaa;
	border-style: solid;
	border-radius: 8px;
	cursor: initial;
	touch-action: manipulation;
}

.button {
	margin-bottom: 0;
	border-bottom-style: none;
	border-bottom-left-radius: 0;
	border-bottom-right-radius: 0;
	cursor: auto;
}
.button::after {
	content: '\25A1';
	float: right;
	font-weight: bold;
	margin-left: 10px;
}

.closed {
	margin-bottom: 4px;
	border-bottom-style: solid;
	border-bottom-left-radius: 8px;
	border-bottom-right-radius: 8px;
}
.closed::after { content: '\2212'; }

.nonbottom {
	margin-bottom: 0;
	border-bottom-left-radius: 0;
	border-bottom-right-radius: 0;
	border-bottom-style: none;
}
.nontop {
	margin-top: 0;
	border-top-left-radius: 0;
	border-top-right-radius: 0;
}

.gGray { background-color: #e0e0e0; }
.gGreen { background-color: #ddffdd; }
.gYellow { background-color: #ffeebb; }
.gOrange { background-color: #ffddcc; }
.gRed { background-color: #ffccdd; }
.gBlue { background-color: #aaccff; }
.gUnknown { background-color: #bbffff; }
.gApple { background-color: #f6f6ff; }
.gParams {
	text-align: center;
	background-color: #f8f8f8;
}

.content {
	overflow: hidden;
	margin-bottom: 4px;
	padding: 3px 0 3px 8px;
	border: 1px #aaa;
	border-style: none solid solid solid;
	border-bottom-left-radius: 8px;
	border-bottom-right-radius: 8px;
}

.contentloop {
	margin-bottom: 0;
	padding-top: 4px;
	padding-bottom: 4px;
	border-bottom-style: none;
	border-bottom-left-radius: 0;
	border-bottom-right-radius: 0;
}

.dotted { border-left-style: dotted; }
.dashed { border-left-style: dashed; }

.inside {
	border-right-style: none;
	border-top-right-radius: 0;
	border-bottom-right-radius: 0;
}

.commentcontent { background-color: #ffeebb; }

.row {
	display: flex;
	padding-right: 2px;
}

.col1 {
	margin-right: 3px;
	padding-right: 3px;
	border-right-style: double;
}
.col2 { white-space: pre-wrap; }

span.box {
	display: inline;
	white-space: pre-wrap;
	margin: 2px;
	padding: 2px 4px;
	border-radius: 6px;
	background-color: #fff;
}
span.var { font-style: italic; }
span.magic {
	cursor: pointer;
	font-style: italic;
	text-decoration: underline;
}

hr {
	width: 0px;
	height: 2px;
	border: 1px solid #aaa;
	margin: -4px auto;
}

@media (prefers-color-scheme: dark) {
	body { background: #000; color: #eee; }
	button { background: #514c72; color: #eee; }
	.gGray { background-color: #555555; }
	.gGreen { background-color: #3a6441; }
	.gYellow { background-color: #716d33; }
	.gOrange { background-color: #76523f; }
	.gRed { background-color: #674044; }
	.gBlue { background-color: #384c67; }
	.gUnknown { background-color: #377172; }
	.gApple { background-color: #2c2842; }
	.gParams { background-color: #181818; }
	.commentcontent { background-color: #716d33; }
	span.box { background-color: #000; }
}
</style></head><body>
Ôøº
<script>
for (b of document.getElementsByClassName('button')) {
	b.addEventListener('click', function() {
		this.classList.toggle('closed');
		let s = this.nextElementSibling;
		s.style.display = getComputedStyle(s).display==='none' ? 'block' : 'none';
})}

function magictap(id) {
	event.stopPropagation();
	let e = document.getElementById('m'+id);
	let p = e;
	while ((p = p.parentNode).tagName.toLowerCase() === 'div') {
		p.style.display = 'block';
		p.previousElementSibling.classList.remove('closed');
	}
	setTimeout(function(){ e.scrollIntoView({block:'nearest',behavior:'smooth'}); }, 10);
}
</script></body></html>"""
text("${63EAA902-633B-4439-B0AD-7774477D72DB}")
			setName(input: Text, name: "${file.get(Name)}.html") >> setName 5
			menu(, [üíª  Share, üìù  Save to Files, üìÑ  Quick Look as Text, üß≠  Open in Browser]) {
			case("üíª  Share"): >> MenuResult 5
				share(file: Renamed Item) >> share
				exit()
			case("üìù  Save to Files"): >> MenuResult 6
				saveFile(input: Renamed Item, ask: true, overwrite: false) >> saveFile
				exit()
			case("üìÑ  Quick Look as Text"):
			case("üß≠  Open in Browser"): >> MenuResult 7
				if(DeviceDetails == "Mac") {
					randomNumber(min: 0, max: 9999) >> randomNumber 1
					runShellScript(input: Text, script: "cat > /tmp/shortcut${Random Number}.html
open /tmp/shortcut${ActionOutput}.html
sleep 1;rm -f /tmp/shortcut${Random Number}.html") >> runShellScript
				} else { >>  1
					url(url: "data:text/html,${Text}") >> url 2
					openURL(url: URL) >> openURL 1
				} >> IFResult 22
				exit()
			} >> MenuResult 8
		} >> IFResult 23
		replaceText(input: "${URL Encoded Text}", find: "
‚Äã</", replace: "
</") >> replaceText 10
		replaceText(input: "${Updated Text}", find: "<div class="row">", replace: "‚Ä¢ ") >> replaceText 11
		if(command .beginsWith "üîç  ") { >> IFResult 24
			replaceText(input: "${Updated Text}", find: "(?s)<div [^>]+"display:none">.*?</div>(?=\n<(?:hr>|button))", replace: "
 ‚ãØ‚ãØ", isRegex: true) >> replaceText 12
			replaceText(input: "${Updated Text}", find: "<button.*>\n(\d+)", replace: "
„Äî$1„Äï", isRegex: true) >> replaceText 13
			replaceText(input: "${Updated Text}", find: "<b>\[(.*?)\]</b>", replace: "„Äî$1„Äï", isRegex: true) >> replaceText 14
			replaceText(input: "${Updated Text}", find: "<.*?>", isRegex: true) >> replaceText 15
			replaceText(input: "${Updated Text}", find: "&lt;", replace: "<") >> replaceText 16
			replaceText(input: "${Updated Text}", find: "&gt;", replace: ">") >> replaceText 17
			replaceText(input: "${Updated Text}", find: "&nbsp;", replace: "¬†") >> replaceText 18
			replaceText(input: "${Updated Text}", find: "&amp;", replace: "&") >> replaceText 19
			setName(input: Updated Text, name: "${file.get(Name)}.txt") >> setName 6
			quicklook(input: Renamed Item)
			exit()
		}
		replaceText(input: "${Updated Text}
", find: "\u3000¬ª ?(?:<i>\d+</i> ?)?(?:<span.*?</span> ?)*(?=</button>)", isRegex: true) >> replaceText 20
		replaceText(input: "${Updated Text}", find: "\u3000‚ñµ<span.*?</span>(?=</button>)", isRegex: true) >> replaceText 21
		replaceText(input: "${Updated Text}", find: "<button.*>\n(\d+)", replace: "‚Å¢„Äî‚Å§$1„Äï", isRegex: true) >> replaceText 22
		replaceText(input: "${Updated Text}", find: "<b>\[(\d+.*)\]</b>", replace: "‚Å¢„Äî‚Å§$1„Äï", isRegex: true) >> replaceText 23
		replaceText(input: "${Updated Text}", find: "<.*?>", isRegex: true) >> replaceText 24
		replaceText(input: "${Updated Text}", find: "&lt;", replace: "<") >> replaceText 25
		replaceText(input: "${Updated Text}", find: "&gt;", replace: ">") >> replaceText 26
		replaceText(input: "${Updated Text}", find: "&nbsp;", replace: "¬†") >> replaceText 27
		replaceText(input: "${Updated Text}", find: "&amp;", replace: "&") >> replaceText 28
		setValue(key: "f${Repeat Index}", value: "${Updated Text}", dictionary: Dictionary) >> setValue 3
		if(Repeat Index == 1) { >> IFResult 25
			runShortcut(name: "Shortcut Source Helper") >> runShortcut 1
var file = Shortcut Result
			if(Shortcut Result == nil) {
				exit()
			} >> IFResult 26
		} >> IFResult 27
		replaceText(input: "${Updated Text}", find: "<button.*>\n\d+ ?|<b>\[\d+ ?", replace: "‚Å¢„Äî‚Å§", isRegex: true) >> replaceText 29
		replaceText(input: "${Updated Text}", find: "<.*?>", isRegex: true) >> replaceText 30
		replaceText(input: "${Updated Text}", find: "&lt;", replace: "<") >> replaceText 31
		replaceText(input: "${Updated Text}", find: "&gt;", replace: ">") >> replaceText 32
		replaceText(input: "${Updated Text}", find: "&nbsp;", replace: "¬†") >> replaceText 33
		replaceText(input: "${Updated Text}", find: "&amp;", replace: "&") >> replaceText 34
		setName(input: Updated Text, name: "sst_${Repeat Index}.txt") >> setName 7
	} >> RepeatResult 3
	if(DeviceDetails ==) { >> IFResult 28
		saveFile(input: Repeat Results, ask: false, overwrite: true) >> saveFile 1
		runShellScript(script: "cd ~/Downloads
diff -d sst_2.txt sst_1.txt &> sst_diff.txt
rm -f sst_1.txt sst_2.txt") >> runShellScript 1
		getFile(path: "sst_diff.txt") >> getFile 2
	} else { >>  3
//Unable to get shortcuts action AsheKube.app.a-Shell-mini.ExecuteCommandIntent
// üõë  Please download a-Shell mini  üõë
		if(output .contains "mini") {
			file(file: $0)
		} else {
			file(file: $0) >> file
		} >> IFResult 29
		saveFile(input: Repeat Results, ask: false, overwrite: true) >> saveFile 2
//Unable to get shortcuts action AsheKube.app.a-Shell-mini.ExecuteCommandIntent
		getFile(path: "sst_diff.txt") >> getFile 3
	} >> IFResult 30
	count(type: Lines, input: If Result) >> count 2
	if(Count false 5) {
		alert(alert: "Identical", cancel: false)
	} else {
		setValue(key: "diff", value: "${If Result}", dictionary: Dictionary) >> setValue 4
		replaceText(input: "${Dictionary}", find: "\u0023", replace: "\\u0023", isRegex: true) >> replaceText 35
var B84DAB78-581B-4C55-86F5-14C02DBBB90E = """let lines = (s, i) => [...(a=s.split(/[acd]/)[i].split(',').map((a,j)=>(s.includes('a')&&i==0)?parseInt(a):(parseInt(a)-1))), a[0]].slice(0,2);
let print = (a, i, f, a2, f2, rev) => {
	let out='', n1, n2, i2;
	if (i != a[i].start && !a[a[i].start].p) {
		a[a[i].start].p = true;
		if (a2) i2 = a[a[i].start].l;
		if (i2) {
			a2[i2].p = true;
			n1 = f[a[i].start].match(/^\u2062„Äî\u2064(\d+)/)?.[1];
			n2 = f2[i2].match(/^\u2062„Äî\u2064(\d+)/)?.[1];
		}
		out = '\u2062(\u2064 ' + (i2 ? (f[a[i].start].replace(/^(\u2062„Äî\u2064)(\d+)/, n1 === n2 ? '$&' : (rev ? ('$1' + n2 + '‚ñ∂Ô∏é$2') : ('$1$2‚ñ∂Ô∏é' + n2)))) : f[a[i].start]) + ' )\n';
	}
	a[i].p = true;
	return out + f[i];
}
let dline = [...d.diff.match(/^\d.*/mg), '0c0'];
let f1 = d.f2.split('\n');
let f2 = d.f1.split('\n');
let l1 = Array(f1.length).fill({});
let l2 = Array(f2.length).fill({});
let d1 = {start:0};
let d2 = {start:0};
let k1 = lines(dline[0], 0);
let k2 = lines(dline[0], 1);
let ks = dline[0].match(/[acd]/)[0];
let ac = {};
for (i=j=k=0; i<l1.length && j<l2.length; i++, j++) {
	if (f1[i].match(/^\u2062„Äî\u2064(\d+)„Äï/)) { d1.start = i; }
	if (f2[j].match(/^\u2062„Äî\u2064(\d+)„Äï/)) { d2.start = j; }
	if (i == k1[0]) {
		let ii = i + k1[1] - k1[0] + 1;
		let jj = j + k2[1] - k2[0] + 1;
		if (ks === 'a') { ii--; }
		else if (ks === 'd') { jj --; }
		for (;i<ii&&i<l1.length;i++) {
			if (f1[i].match(/^\u2062„Äî\u2064(\d+)„Äï/)) { d1.start = i; }
			l1[i] = {...d1};
		}
		for (;j<jj&&j<l2.length;j++) {
			if (f2[j].match(/^\u2062„Äî\u2064(\d+)„Äï/)) { d2.start = j; }
			l2[j] = {...d2};
		}
		k++;
		k1 = lines(dline[k], 0);
		k2 = lines(dline[k], 1);
		ks = dline[k].match(/[acd]/)[0];
	}
	let s1 = i < l1.length && f1[i].match(/^\u2062„Äî\u2064(\d+)„Äï/)?.[1];
	let s2 = j < l2.length && f2[j].match(/^\u2062„Äî\u2064(\d+)„Äï/)?.[1];
	if (s1) { d1.start = i; }
	if (s2) { d2.start = j; }
	if (s1 && s2) { ac[s1] = s2; }
	if (i < l1.length) { l1[i] = {i:i, ...d1, l:j}; }
	if (j < l2.length) { l2[j] = {i:j, ...d2, l:i}; }
}
let out = [];
k1 = lines(dline[0], 0);
k2 = lines(dline[0], 1);
ks = dline[0].match(/[acd]/)[0];
for (i=j=k=0; i<l1.length && j<l2.length; i++, j++) {
	if (i == k1[0]) {
		let o = [];
		let ii = i + k1[1] - k1[0] + 1;
		let jj = j + k2[1] - k2[0] + 1;
		switch (ks) {
		case 'a':
			o.push('\u2064‚ñ∂Ô∏é added');
			for (;j<jj;j++) { o.push(print(l2, j, f2, l1, f1, true)) }
			break;
		case 'd':
			o.push('\u2064‚óÄÔ∏é deleted');
			for (;i<ii;i++) { o.push(print(l1, i, f1, l2, f2)) }
			break;
		case 'c':
			o.push('\u2064‚óÄÔ∏é‚óÄÔ∏é changed');
			for (;i<ii;i++) { o.push(print(l1, i, f1, l2, f2)) }
			o.push('\u2064‚ñ∂Ô∏é‚ñ∂Ô∏é');
			for (;j<jj;j++) { o.push(print(l2, j, f2)) }
		}
		out.push(o.join('\n'));
		k++;
		k1 = lines(dline[k], 0);
		k2 = lines(dline[k], 1);
		ks = dline[k].match(/[acd]/)[0];
	}
	let a1 = (f1[i].match(/\u2062„Äî\u2064\d+/g) ?? []).map(a => ac[a.replace('\u2062„Äî\u2064', '')]).join('-');
	let a2 = (f2[j].match(/\u2062„Äî\u2064\d+/g) ?? []).map(a => a.replace('\u2062„Äî\u2064','')).join('-');
	if (a1 !== a2) { out.push('\u2064‚óÄÔ∏é‚óÄÔ∏é changed\n' + print(l1, i, f1, l2, f2) + '\n\u2064‚ñ∂Ô∏é‚ñ∂Ô∏é\n' + print(l2, j, f2)); }
}
out[0] = out[0].replace('\u2064‚óÄÔ∏é‚óÄÔ∏é changed\n', '‚óÄÔ∏é‚óÄÔ∏é ').replace('\u2064‚ñ∂Ô∏é‚ñ∂Ô∏é\n', '‚ñ∂Ô∏é‚ñ∂Ô∏é ');
document.body.textContent = encodeURIComponent((out.join('\n\n') + '\n')
.replace(/(\u2064‚óÄÔ∏é‚óÄÔ∏é changed\n|\u2064‚ñ∂Ô∏é‚ñ∂Ô∏é\n)\u2062\(\u2064 (.+?) \)\n/g, '$1$2\n')
.replace(/(\u2064‚óÄÔ∏é‚óÄÔ∏é changed\n(?:[^\u2064\n].*\n|\n)*?)(\u2064‚ñ∂Ô∏é‚ñ∂Ô∏é\n(?:[^\u2064\n].*\n|\n)+?)\n\u2064‚óÄÔ∏é‚óÄÔ∏é changed\n((?:[^\u2062\u2064\n].*\n|\n)*?)\u2064‚ñ∂Ô∏é‚ñ∂Ô∏é\n((?:[^\u2062\u2064\n].*\n|\n)*?\n)(?=\u2064|$)/g, '$1‚Ä¶\n$3$2‚Ä¶\n$4')
.replace(/(\u2064‚óÄÔ∏é‚óÄÔ∏é changed\n(?:[^\u2064\n].*\n|\n)*?)(\u2064‚ñ∂Ô∏é‚ñ∂Ô∏é\n(?:[^\u2064\n].*\n|\n)+?)\n\u2064‚óÄÔ∏é‚óÄÔ∏é changed\n((?:[^\u2062\u2064\n].*\n|\n)*?)\u2064‚ñ∂Ô∏é‚ñ∂Ô∏é\n((?:[^\u2062\u2064\n].*\n|\n)*?\n)(?=\u2064|$)/g, '$1‚Ä¶\n$3$2‚Ä¶\n$4')
.replace(/((\u2064(?:‚óÄÔ∏é deleted|‚ñ∂Ô∏é added)\n)(?:[^\u2064\n].*\n|\n)*?)\n\2((?:[^\u2062\u2064\n].*\n|\n)*?)(?=\u2064|$)/g, '$1‚Ä¶\n$3')
.replace(/((\u2064(?:‚óÄÔ∏é deleted|‚ñ∂Ô∏é added)\n)(?:[^\u2064\n].*\n|\n)*?)\n\2((?:[^\u2062\u2064\n].*\n|\n)*?)(?=\u2064|$)/g, '$1‚Ä¶\n$3')
.replace(/\u2062([„Äî(])\u2064/g, '$1').replace(/\n\u2064([‚óÄÔ∏é‚ñ∂Ô∏é])/g, '\n$1').replace(/\n$/, ''));"""
text("${B84DAB78-581B-4C55-86F5-14C02DBBB90E}")
		url(url: "data:text/html;charset=utf-8,<body/><script>let d=${Updated Text};${ActionOutput}</script>") >> url 3
		decodeURL(url: "${URL.as(RichText)}") >> decodeURL 2
		setName(input: URL Encoded Text, name: "${file.as(File).get(Name)} ‚ñ∂Ô∏é ${Variable.as(File).get(Name)}.txt", dontIncludeExtension: $2) >> setName 8
		quicklook(input: Renamed Item)
	} >> IFResult 31
	exit()
} >> IFResult 32
if(command .beginsWith "‚ùì") { >> IFResult 33
	getFileOfType(input: file, type: "public.json") >> getFileOfType 2
	replaceText(input: "${File of Type}", find: "\u0023", replace: "\\u0023", isRegex: true) >> replaceText 36
var B2B6714E-10A7-4881-9921-8FC6BF9BA7D8 = """count = 0;
d.WFWorkflowImportQuestions.forEach(q => { q.Text = q.Text.replace(/\+\+/g, s => { count++; return '\n' }) });
if (count) { d.count = count }
document.body.textContent = encodeURIComponent(JSON.stringify(d,null,2));"""
text("${B2B6714E-10A7-4881-9921-8FC6BF9BA7D8}")
	url(url: "data:text/html;charset=utf-8,<body/><script>const d=${Text};${ActionOutput}</script>") >> url 4
	decodeURL(url: "${URL.as(RichText)}") >> decodeURL 3
	if(URL Encoded Text == nil) {
		alert(alert: "‚Äò++‚Äô not found in Import Questions", cancel: false)
	} else {
		alert(alert: "
Replaced ${URL Encoded Text.as(Dictionary).key(count)} new lines.
Please remove the first ‚ÄôStop and Output‚Äò action and close the editor when using Remote Sign.
")
		setName(input: URL Encoded Text, name: "${file.get(Name)}.json") >> setName 9
		getFileOfType(input: Renamed Item, type: "com.apple.property-list") >> getFileOfType 3
		runShortcut(name: "Shortcut Source Helper", input: File of Type) >> runShortcut 2
	}
	exit()
} >> IFResult 34
if(file .beginsWith "{") { >> IFResult 35
	dictionary({"Convert to Property List":"com.apple.plist","Skip":"Skip"})
} else { >>  36
	dictionary({"Convert to JSON":"public.json","Skip":"Skip"})
} >> IFResult 36
choose(list: If Result) >> choose
//Unable to get shortcuts action is.workflow.actions.getvariable
if(Chosen Item != "Skip") { >> IFResult 37
	getFileOfType(input: file, type: "${Chosen Item.as(Text)}") >> getFileOfType 4
} >> IFResult 38
replaceText(input: "${If Result}", find: "\u0023", replace: "\\u0023", isRegex: true) >> if result
if(If Result .beginsWith "{") { >> IFResult 39
	url(url: "data:text/html;charset=utf-8,<body/><script>document.body.textContent=encodeURIComponent(JSON.stringify(${if result},null,3).replace(/[\0-\x08\x0B-\x1F\x7F-\xA0\xAD\u2000-\u200B\u2028\u2029\u202F\u205F-\u2064\u2800\u3000\uFFFC]/g, c => '\\u'+c.charCodeAt(0).toString(16).toUpperCase().padStart(4,'0')))</script>") >> url 5
} else { >>  6
	setValue(key: "x", value: "${if result}") >> setValue 5
	url(url: "data:text/html;charset=utf-8,<body/><script>document.body.textContent=encodeURIComponent(${Dictionary}.x.replace(/[\0-\x08\x0B-\x1F\x7F-\xA0\xAD\u2000-\u200B\u2028\u2029\u202F\u205F-\u2064\u2800\u3000\uFFFC]/g, c => '&\u0023x'+c.charCodeAt(0).toString(16).toUpperCase()+';'))</script>") >> url 6
} >> IFResult 40
decodeURL(url: "${If Result.as(RichText)}") >> decodeURL 4
setName(input: URL Encoded Text, name: "${file.get(Name)}.txt") >> setName 10
var file = Renamed Item
if(command .beginsWith "‚úèÔ∏è") { >> IFResult 41
	text(text: "${file}${Variable}") >> text
	if(Text .beginsWith "{") {
		setName(input: Text, name: "a.json") >> setName 11
		getFileOfType(input: Renamed Item, type: "com.apple.property-list") >> getFileOfType 5
	} >> IFResult 42
	askForInput(prompt: "New Shortcut Name:", default: "${file.get(Name)}") >> askForInput
	setName(input: If Result, name: "${Provided Input}.plist") >> setName 12
	runShortcut(name: "Shortcut Source Helper", input: Renamed Item) >> runShortcut 3
} else { >>  4
	if(command .beginsWith "üßê") {
		quicklook(input: file)
	}
	if(command .beginsWith "üìù") {
		saveFile(input: file) >> saveFile 3
	}
	if(command .beginsWith "üíª") {
		share(file: file) >> share 1
	}
} >> IFResult 43
